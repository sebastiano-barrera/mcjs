---
source: mcjs_vm/src/bytecode_compiler/js_to_past.rs
expression: function.dump_to_string()
---
[18-104] func () unbound[] Sloppy block0 {
  decls:
    Decl: closures = TDZ [conflicting]
    Decl: tmp1 = TDZ [conflicting]
  fn asmts:
  exprs:
    e0: Read(tmp1)
  stmts:
    [33-35] Assign(Some(tmp1), eArrayCreate)
    [18-35] Assign(Some(closures), e0)
    block2 {
      decls:
        Decl: i = TDZ [conflicting]
      fn asmts:
      exprs:
        e0: NumberLiteral(0.0)
      stmts:
        [52-104] Assign(Some(i), e0)
        block3 {
          decls:
          fn asmts:
          exprs:
            e0: Read(closures)
            e1: StringLiteral("push")
            e2: ObjectGet { obj: e0, key: e1 }
            e3: CreateClosure:
              [80-87] func () unbound[i] Sloppy block4 {
                decls:
                fn asmts:
                exprs:
                stmts:
                  block5 {
                    decls:
                    fn asmts:
                    exprs:
                      e0: Read(i)
                    stmts:
                      [0-0] Return(e0)
                  }
              }
            e4: StringLiteral("bind")
            e5: ObjectGet { obj: e3, key: e4 }
            e6: Call { callee: e5, args: [eThis] }
            e7: Call { callee: e2, args: [e6] }
            e8: Read(i)
            e9: NumberLiteral(5.0)
            e10: Binary("<", e8, e9)
            e11: NumberLiteral(1.0)
            e12: Binary("+", e8, e11)
          stmts:
            [66-95] Assign(None, e7)
            [66-95] Assign(None, e10)
            [52-104] IfNot { test: e10 }
            [52-104] Break(block2)
            [97-100] Assign(Some(i), e12)
            [52-104] Assign(None, e12)
            [52-104] Unshare(i)
            [52-104] Jump(StmtID(0, block3))
        }
    }
}
