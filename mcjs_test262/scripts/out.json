{"file_path":"test/language/expressions/function/S10.1.1_A1_T2.js","error":null}
{"file_path":"test/language/expressions/function/arguments-with-arguments-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                727,\n            ),\n            hi: BytePos(\n                747,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            727,\n                        ),\n                        hi: BytePos(\n                            728,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('x' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Assign(\n            AssignExpr {\n                span: Span {\n                    lo: BytePos(\n                        731,\n                    ),\n                    hi: BytePos(\n                        747,\n                    ),\n                    ctxt: #0,\n                },\n                op: \"=\",\n                left: Pat(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        731,\n                                    ),\n                                    hi: BytePos(\n                                        735,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('args' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                right: Ident(\n                    Ident {\n                        span: Span {\n                            lo: BytePos(\n                                738,\n                            ),\n                            hi: BytePos(\n                                747,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('arguments' type=static),\n                        optional: false,\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/arguments-with-arguments-lex.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                712,\n            ),\n            hi: BytePos(\n                732,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            712,\n                        ),\n                        hi: BytePos(\n                            713,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('x' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Assign(\n            AssignExpr {\n                span: Span {\n                    lo: BytePos(\n                        716,\n                    ),\n                    hi: BytePos(\n                        732,\n                    ),\n                    ctxt: #0,\n                },\n                op: \"=\",\n                left: Pat(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        716,\n                                    ),\n                                    hi: BytePos(\n                                        720,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('args' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                right: Ident(\n                    Ident {\n                        span: Span {\n                            lo: BytePos(\n                                723,\n                            ),\n                            hi: BytePos(\n                                732,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('arguments' type=static),\n                        optional: false,\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/array-destructuring-param-strict-body.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                5173,\n            ),\n            hi: BytePos(\n                5215,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                5173,\n                            ),\n                            hi: BytePos(\n                                5174,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        5185,\n                                    ),\n                                    hi: BytePos(\n                                        5194,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                5185,\n                                            ),\n                                            hi: BytePos(\n                                                5194,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    5186,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    5193,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('element' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                            },\n                        ],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                5176,\n                            ),\n                            hi: BytePos(\n                                5215,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        5196,\n                                    ),\n                                    hi: BytePos(\n                                        5215,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [\n                                    Expr(\n                                        ExprStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    5200,\n                                                ),\n                                                hi: BytePos(\n                                                    5213,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            expr: Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                5200,\n                                                            ),\n                                                            hi: BytePos(\n                                                                5212,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('use strict' type=dynamic),\n                                                        raw: Some(\n                                                            \"\\\"use strict\\\"\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                ],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-abrupt.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1758,\n            ),\n            hi: BytePos(\n                1806,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1758,\n                        ),\n                        hi: BytePos(\n                            1759,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Paren(\n            ParenExpr {\n                span: Span {\n                    lo: BytePos(\n                        1762,\n                    ),\n                    hi: BytePos(\n                        1806,\n                    ),\n                    ctxt: #0,\n                },\n                expr: Call(\n                    CallExpr {\n                        span: Span {\n                            lo: BytePos(\n                                1763,\n                            ),\n                            hi: BytePos(\n                                1805,\n                            ),\n                            ctxt: #0,\n                        },\n                        callee: Expr(\n                            Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1763,\n                                            ),\n                                            hi: BytePos(\n                                                1803,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1774,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1803,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [\n                                                    Throw(\n                                                        ThrowStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1776,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1801,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            arg: New(\n                                                                NewExpr {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1782,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1800,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    callee: Ident(\n                                                                        Ident {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    1786,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    1798,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            sym: Atom('Test262Error' type=dynamic),\n                                                                            optional: false,\n                                                                        },\n                                                                    ),\n                                                                    args: Some(\n                                                                        [],\n                                                                    ),\n                                                                    type_args: None,\n                                                                },\n                                                            ),\n                                                        },\n                                                    ),\n                                                ],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                        args: [],\n                        type_args: None,\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-arg-val-not-undefined.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1938,\n            ),\n            hi: BytePos(\n                1961,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1938,\n                        ),\n                        hi: BytePos(\n                            1944,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('aFalse' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Assign(\n            AssignExpr {\n                span: Span {\n                    lo: BytePos(\n                        1947,\n                    ),\n                    hi: BytePos(\n                        1961,\n                    ),\n                    ctxt: #0,\n                },\n                op: \"+=\",\n                left: Expr(\n                    Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1947,\n                                ),\n                                hi: BytePos(\n                                    1957,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('falseCount' type=dynamic),\n                            optional: false,\n                        },\n                    ),\n                ),\n                right: Lit(\n                    Num(\n                        Number {\n                            span: Span {\n                                lo: BytePos(\n                                    1960,\n                                ),\n                                hi: BytePos(\n                                    1961,\n                                ),\n                                ctxt: #0,\n                            },\n                            value: 1.0,\n                            raw: Some(\n                                \"1\",\n                            ),\n                        },\n                    ),\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-arg-val-undefined.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1801,\n            ),\n            hi: BytePos(\n                1817,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1801,\n                        ),\n                        hi: BytePos(\n                            1812,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('fromLiteral' type=dynamic),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Lit(\n            Num(\n                Number {\n                    span: Span {\n                        lo: BytePos(\n                            1815,\n                        ),\n                        hi: BytePos(\n                            1817,\n                        ),\n                        ctxt: #0,\n                    },\n                    value: 23.0,\n                    raw: Some(\n                        \"23\",\n                    ),\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-duplicates.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                1774,\n            ),\n            hi: BytePos(\n                1802,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                1774,\n                            ),\n                            hi: BytePos(\n                                1775,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        1786,\n                                    ),\n                                    hi: BytePos(\n                                        1791,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Assign(\n                                    AssignPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1786,\n                                            ),\n                                            hi: BytePos(\n                                                1791,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        left: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1786,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1787,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        right: Lit(\n                                            Num(\n                                                Number {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1790,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1791,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    value: 0.0,\n                                                    raw: Some(\n                                                        \"0\",\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    },\n                                ),\n                            },\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        1793,\n                                    ),\n                                    hi: BytePos(\n                                        1794,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1793,\n                                                ),\n                                                hi: BytePos(\n                                                    1794,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                            },\n                        ],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                1777,\n                            ),\n                            hi: BytePos(\n                                1802,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        1796,\n                                    ),\n                                    hi: BytePos(\n                                        1802,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-ref-later.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1779,\n            ),\n            hi: BytePos(\n                1784,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1779,\n                        ),\n                        hi: BytePos(\n                            1780,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('x' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1783,\n                    ),\n                    hi: BytePos(\n                        1784,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('y' type=inline),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-ref-prior.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1838,\n            ),\n            hi: BytePos(\n                1843,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1838,\n                        ),\n                        hi: BytePos(\n                            1839,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('y' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1842,\n                    ),\n                    hi: BytePos(\n                        1843,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('x' type=static),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-ref-self.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1771,\n            ),\n            hi: BytePos(\n                1776,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1771,\n                        ),\n                        hi: BytePos(\n                            1772,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('x' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1775,\n                    ),\n                    hi: BytePos(\n                        1776,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('x' type=static),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-rest.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                1592,\n            ),\n            hi: BytePos(\n                1621,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                1592,\n                            ),\n                            hi: BytePos(\n                                1593,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        1604,\n                                    ),\n                                    hi: BytePos(\n                                        1613,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Rest(\n                                    RestPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1604,\n                                            ),\n                                            hi: BytePos(\n                                                1613,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        dot3_token: Span {\n                                            lo: BytePos(\n                                                1604,\n                                            ),\n                                            hi: BytePos(\n                                                1607,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        arg: Assign(\n                                            AssignPat {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1604,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1613,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                left: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1607,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1608,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                right: Array(\n                                                    ArrayLit {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1611,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1613,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        elems: [],\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        type_ann: None,\n                                    },\n                                ),\n                            },\n                        ],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                1595,\n                            ),\n                            hi: BytePos(\n                                1621,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        1615,\n                                    ),\n                                    hi: BytePos(\n                                        1621,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/expressions/function/dflt-params-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1522,\n            ),\n            hi: BytePos(\n                1528,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1522,\n                        ),\n                        hi: BytePos(\n                            1523,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('b' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Lit(\n            Num(\n                Number {\n                    span: Span {\n                        lo: BytePos(\n                            1526,\n                        ),\n                        hi: BytePos(\n                            1528,\n                        ),\n                        ctxt: #0,\n                    },\n                    value: 39.0,\n                    raw: Some(\n                        \"39\",\n                    ),\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-init-iter-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1785,\n            ),\n            hi: BytePos(\n                1788,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1786,\n                                ),\n                                hi: BytePos(\n                                    1787,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-init-iter-get-err-array-prototype.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1707,\n            ),\n            hi: BytePos(\n                1716,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1708,\n                                ),\n                                hi: BytePos(\n                                    1709,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1711,\n                                ),\n                                hi: BytePos(\n                                    1712,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1714,\n                                ),\n                                hi: BytePos(\n                                    1715,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('z' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-init-iter-get-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1550,\n            ),\n            hi: BytePos(\n                1553,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1551,\n                                ),\n                                hi: BytePos(\n                                    1552,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-init-iter-no-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1787,\n            ),\n            hi: BytePos(\n                1790,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1788,\n                                ),\n                                hi: BytePos(\n                                    1789,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-name-iter-val.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                2050,\n            ),\n            hi: BytePos(\n                2059,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    2051,\n                                ),\n                                hi: BytePos(\n                                    2052,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    2054,\n                                ),\n                                hi: BytePos(\n                                    2055,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    2057,\n                                ),\n                                hi: BytePos(\n                                    2058,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('z' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-elem-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1816,\n            ),\n            hi: BytePos(\n                1839,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1817,\n                            ),\n                            hi: BytePos(\n                                1838,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1817,\n                                    ),\n                                    hi: BytePos(\n                                        1826,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1818,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1819,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1821,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1822,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1824,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1825,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Array(\n                            ArrayLit {\n                                span: Span {\n                                    lo: BytePos(\n                                        1829,\n                                    ),\n                                    hi: BytePos(\n                                        1838,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1830,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1831,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 4.0,\n                                                        raw: Some(\n                                                            \"4\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                    Some(\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1833,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1834,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 5.0,\n                                                        raw: Some(\n                                                            \"5\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                    Some(\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1836,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1837,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 6.0,\n                                                        raw: Some(\n                                                            \"6\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                ],\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-elem-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1778,\n            ),\n            hi: BytePos(\n                1801,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1779,\n                            ),\n                            hi: BytePos(\n                                1800,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1779,\n                                    ),\n                                    hi: BytePos(\n                                        1788,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1780,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1781,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1783,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1784,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1786,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1787,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Array(\n                            ArrayLit {\n                                span: Span {\n                                    lo: BytePos(\n                                        1791,\n                                    ),\n                                    hi: BytePos(\n                                        1800,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1792,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1793,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 4.0,\n                                                        raw: Some(\n                                                            \"4\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                    Some(\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1795,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1796,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 5.0,\n                                                        raw: Some(\n                                                            \"5\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                    Some(\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1798,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1799,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 6.0,\n                                                        raw: Some(\n                                                            \"6\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                ],\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-elision-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-elision-iter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-empty-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-empty-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1798,\n            ),\n            hi: BytePos(\n                1837,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1799,\n                            ),\n                            hi: BytePos(\n                                1836,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1799,\n                                    ),\n                                    hi: BytePos(\n                                        1801,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1804,\n                                    ),\n                                    hi: BytePos(\n                                        1836,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1804,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1834,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1815,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1834,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [\n                                                            Expr(\n                                                                ExprStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1817,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1832,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    expr: Assign(\n                                                                        AssignExpr {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    1817,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    1831,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            op: \"+=\",\n                                                                            left: Expr(\n                                                                                Ident(\n                                                                                    Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                1817,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                1826,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('initCount' type=dynamic),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                ),\n                                                                            ),\n                                                                            right: Lit(\n                                                                                Num(\n                                                                                    Number {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                1830,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                1831,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        value: 1.0,\n                                                                                        raw: Some(\n                                                                                            \"1\",\n                                                                                        ),\n                                                                                    },\n                                                                                ),\n                                                                            ),\n                                                                        },\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-rest-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1840,\n            ),\n            hi: BytePos(\n                1857,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1841,\n                            ),\n                            hi: BytePos(\n                                1856,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1841,\n                                    ),\n                                    hi: BytePos(\n                                        1847,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Rest(\n                                            RestPat {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1842,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1846,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                dot3_token: Span {\n                                                    lo: BytePos(\n                                                        1842,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1845,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                arg: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1845,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1846,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1850,\n                                    ),\n                                    hi: BytePos(\n                                        1856,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('values' type=static),\n                                optional: false,\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-rest-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1821,\n            ),\n            hi: BytePos(\n                1864,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1822,\n                            ),\n                            hi: BytePos(\n                                1863,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1822,\n                                    ),\n                                    hi: BytePos(\n                                        1828,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Rest(\n                                            RestPat {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1823,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1827,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                dot3_token: Span {\n                                                    lo: BytePos(\n                                                        1823,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1826,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                arg: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1826,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1827,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1831,\n                                    ),\n                                    hi: BytePos(\n                                        1863,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1831,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1861,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1842,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1861,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [\n                                                            Expr(\n                                                                ExprStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1844,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1859,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    expr: Assign(\n                                                                        AssignExpr {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    1844,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    1858,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            op: \"+=\",\n                                                                            left: Expr(\n                                                                                Ident(\n                                                                                    Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                1844,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                1853,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('initCount' type=dynamic),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                ),\n                                                                            ),\n                                                                            right: Lit(\n                                                                                Num(\n                                                                                    Number {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                1857,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                1858,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        value: 1.0,\n                                                                                        raw: Some(\n                                                                                            \"1\",\n                                                                                        ),\n                                                                                    },\n                                                                                ),\n                                                                            ),\n                                                                        },\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-ary-val-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1836,\n            ),\n            hi: BytePos(\n                1841,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Array(\n                    ArrayPat {\n                        span: Span {\n                            lo: BytePos(\n                                1837,\n                            ),\n                            hi: BytePos(\n                                1840,\n                            ),\n                            ctxt: #0,\n                        },\n                        elems: [\n                            Some(\n                                Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1838,\n                                                ),\n                                                hi: BytePos(\n                                                    1839,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                            ),\n                        ],\n                        optional: false,\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1809,\n            ),\n            hi: BytePos(\n                1817,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1810,\n                            ),\n                            hi: BytePos(\n                                1816,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1810,\n                                        ),\n                                        hi: BytePos(\n                                            1811,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1814,\n                                        ),\n                                        hi: BytePos(\n                                            1816,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 23.0,\n                                    raw: Some(\n                                        \"23\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1853,\n            ),\n            hi: BytePos(\n                1871,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1854,\n                            ),\n                            hi: BytePos(\n                                1870,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1854,\n                                        ),\n                                        hi: BytePos(\n                                            1859,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('arrow' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Arrow(\n                            ArrowExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1862,\n                                    ),\n                                    hi: BytePos(\n                                        1870,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                params: [],\n                                body: BlockStmt(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1868,\n                                            ),\n                                            hi: BytePos(\n                                                1870,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [],\n                                    },\n                                ),\n                                is_async: false,\n                                is_generator: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1855,\n            ),\n            hi: BytePos(\n                1926,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1856,\n                            ),\n                            hi: BytePos(\n                                1870,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1856,\n                                        ),\n                                        hi: BytePos(\n                                            1859,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('cls' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Class(\n                            ClassExpr {\n                                ident: None,\n                                class: Class {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1862,\n                                        ),\n                                        hi: BytePos(\n                                            1870,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    decorators: [],\n                                    body: [],\n                                    super_class: None,\n                                    is_abstract: false,\n                                    type_params: None,\n                                    super_type_params: None,\n                                    implements: [],\n                                },\n                            },\n                        ),\n                    },\n                ),\n            ),\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1872,\n                            ),\n                            hi: BytePos(\n                                1889,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1872,\n                                        ),\n                                        hi: BytePos(\n                                            1876,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('xCls' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Class(\n                            ClassExpr {\n                                ident: Some(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1885,\n                                            ),\n                                            hi: BytePos(\n                                                1886,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('X' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                class: Class {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1879,\n                                        ),\n                                        hi: BytePos(\n                                            1889,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    decorators: [],\n                                    body: [],\n                                    super_class: None,\n                                    is_abstract: false,\n                                    type_params: None,\n                                    super_type_params: None,\n                                    implements: [],\n                                },\n                            },\n                        ),\n                    },\n                ),\n            ),\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1891,\n                            ),\n                            hi: BytePos(\n                                1925,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1891,\n                                        ),\n                                        hi: BytePos(\n                                            1896,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('xCls2' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Class(\n                            ClassExpr {\n                                ident: None,\n                                class: Class {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1899,\n                                        ),\n                                        hi: BytePos(\n                                            1925,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    decorators: [],\n                                    body: [\n                                        Method(\n                                            ClassMethod {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1907,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1923,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1914,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1918,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('name' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1907,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1923,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1921,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1923,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                                kind: Method,\n                                                is_static: true,\n                                                accessibility: None,\n                                                is_abstract: false,\n                                                is_optional: false,\n                                                is_override: false,\n                                            },\n                                        ),\n                                    ],\n                                    super_class: None,\n                                    is_abstract: false,\n                                    type_params: None,\n                                    super_type_params: None,\n                                    implements: [],\n                                },\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1883,\n            ),\n            hi: BytePos(\n                1938,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1884,\n                            ),\n                            hi: BytePos(\n                                1908,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1884,\n                                        ),\n                                        hi: BytePos(\n                                            1889,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('cover' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Paren(\n                            ParenExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1892,\n                                    ),\n                                    hi: BytePos(\n                                        1908,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                expr: Fn(\n                                    FnExpr {\n                                        ident: None,\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1893,\n                                                ),\n                                                hi: BytePos(\n                                                    1907,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1905,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1907,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: false,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ),\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1910,\n                            ),\n                            hi: BytePos(\n                                1937,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1910,\n                                        ),\n                                        hi: BytePos(\n                                            1916,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('xCover' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Paren(\n                            ParenExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1919,\n                                    ),\n                                    hi: BytePos(\n                                        1937,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                expr: Seq(\n                                    SeqExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1920,\n                                            ),\n                                            hi: BytePos(\n                                                1936,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        exprs: [\n                                            Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1920,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1921,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 0.0,\n                                                        raw: Some(\n                                                            \"0\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Fn(\n                                                FnExpr {\n                                                    ident: None,\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1923,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1936,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1934,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1936,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1852,\n            ),\n            hi: BytePos(\n                1896,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1853,\n                            ),\n                            hi: BytePos(\n                                1872,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1853,\n                                        ),\n                                        hi: BytePos(\n                                            1855,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('fn' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Fn(\n                            FnExpr {\n                                ident: None,\n                                function: Function {\n                                    params: [],\n                                    decorators: [],\n                                    span: Span {\n                                        lo: BytePos(\n                                            1858,\n                                        ),\n                                        hi: BytePos(\n                                            1872,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    body: Some(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1870,\n                                                ),\n                                                hi: BytePos(\n                                                    1872,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_generator: false,\n                                    is_async: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            },\n                        ),\n                    },\n                ),\n            ),\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1874,\n                            ),\n                            hi: BytePos(\n                                1895,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1874,\n                                        ),\n                                        hi: BytePos(\n                                            1877,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('xFn' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Fn(\n                            FnExpr {\n                                ident: Some(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1889,\n                                            ),\n                                            hi: BytePos(\n                                                1890,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                function: Function {\n                                    params: [],\n                                    decorators: [],\n                                    span: Span {\n                                        lo: BytePos(\n                                            1880,\n                                        ),\n                                        hi: BytePos(\n                                            1895,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    body: Some(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1893,\n                                                ),\n                                                hi: BytePos(\n                                                    1895,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_generator: false,\n                                    is_async: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1876,\n            ),\n            hi: BytePos(\n                1924,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1877,\n                            ),\n                            hi: BytePos(\n                                1898,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1877,\n                                        ),\n                                        hi: BytePos(\n                                            1880,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('gen' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Fn(\n                            FnExpr {\n                                ident: None,\n                                function: Function {\n                                    params: [],\n                                    decorators: [],\n                                    span: Span {\n                                        lo: BytePos(\n                                            1883,\n                                        ),\n                                        hi: BytePos(\n                                            1898,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    body: Some(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1896,\n                                                ),\n                                                hi: BytePos(\n                                                    1898,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_generator: true,\n                                    is_async: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            },\n                        ),\n                    },\n                ),\n            ),\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1900,\n                            ),\n                            hi: BytePos(\n                                1923,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1900,\n                                        ),\n                                        hi: BytePos(\n                                            1904,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('xGen' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Fn(\n                            FnExpr {\n                                ident: Some(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1917,\n                                            ),\n                                            hi: BytePos(\n                                                1918,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                function: Function {\n                                    params: [],\n                                    decorators: [],\n                                    span: Span {\n                                        lo: BytePos(\n                                            1907,\n                                        ),\n                                        hi: BytePos(\n                                            1923,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    body: Some(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1921,\n                                                ),\n                                                hi: BytePos(\n                                                    1923,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_generator: true,\n                                    is_async: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-hole.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1718,\n            ),\n            hi: BytePos(\n                1726,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1719,\n                            ),\n                            hi: BytePos(\n                                1725,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1719,\n                                        ),\n                                        hi: BytePos(\n                                            1720,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1723,\n                                        ),\n                                        hi: BytePos(\n                                            1725,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 23.0,\n                                    raw: Some(\n                                        \"23\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1713,\n            ),\n            hi: BytePos(\n                1773,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1714,\n                            ),\n                            hi: BytePos(\n                                1727,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1714,\n                                        ),\n                                        hi: BytePos(\n                                            1715,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1718,\n                                    ),\n                                    hi: BytePos(\n                                        1727,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1718,\n                                                ),\n                                                hi: BytePos(\n                                                    1725,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('counter' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    },\n                ),\n            ),\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1729,\n                            ),\n                            hi: BytePos(\n                                1742,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1729,\n                                        ),\n                                        hi: BytePos(\n                                            1730,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1733,\n                                    ),\n                                    hi: BytePos(\n                                        1742,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1733,\n                                                ),\n                                                hi: BytePos(\n                                                    1740,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('counter' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    },\n                ),\n            ),\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1744,\n                            ),\n                            hi: BytePos(\n                                1757,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1744,\n                                        ),\n                                        hi: BytePos(\n                                            1745,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1748,\n                                    ),\n                                    hi: BytePos(\n                                        1757,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1748,\n                                                ),\n                                                hi: BytePos(\n                                                    1755,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('counter' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    },\n                ),\n            ),\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1759,\n                            ),\n                            hi: BytePos(\n                                1772,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1759,\n                                        ),\n                                        hi: BytePos(\n                                            1760,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('z' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1763,\n                                    ),\n                                    hi: BytePos(\n                                        1772,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1763,\n                                                ),\n                                                hi: BytePos(\n                                                    1770,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('counter' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1625,\n            ),\n            hi: BytePos(\n                1675,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1626,\n                            ),\n                            hi: BytePos(\n                                1674,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1626,\n                                        ),\n                                        hi: BytePos(\n                                            1627,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1630,\n                                    ),\n                                    hi: BytePos(\n                                        1674,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Paren(\n                                        ParenExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1630,\n                                                ),\n                                                hi: BytePos(\n                                                    1672,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            expr: Fn(\n                                                FnExpr {\n                                                    ident: None,\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1631,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1671,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1642,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1671,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [\n                                                                    Throw(\n                                                                        ThrowStmt {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    1644,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    1669,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            arg: New(\n                                                                                NewExpr {\n                                                                                    span: Span {\n                                                                                        lo: BytePos(\n                                                                                            1650,\n                                                                                        ),\n                                                                                        hi: BytePos(\n                                                                                            1668,\n                                                                                        ),\n                                                                                        ctxt: #0,\n                                                                                    },\n                                                                                    callee: Ident(\n                                                                                        Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1654,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1666,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('Test262Error' type=dynamic),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                    ),\n                                                                                    args: Some(\n                                                                                        [],\n                                                                                    ),\n                                                                                    type_args: None,\n                                                                                },\n                                                                            ),\n                                                                        },\n                                                                    ),\n                                                                ],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1739,\n            ),\n            hi: BytePos(\n                1747,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1740,\n                            ),\n                            hi: BytePos(\n                                1746,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1740,\n                                        ),\n                                        hi: BytePos(\n                                            1741,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1744,\n                                        ),\n                                        hi: BytePos(\n                                            1746,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 23.0,\n                                    raw: Some(\n                                        \"23\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1833,\n            ),\n            hi: BytePos(\n                1862,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1835,\n                            ),\n                            hi: BytePos(\n                                1860,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1835,\n                                        ),\n                                        hi: BytePos(\n                                            1836,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        right: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1839,\n                                    ),\n                                    hi: BytePos(\n                                        1860,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('unresolvableReference' type=dynamic),\n                                optional: false,\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-complete.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1894,\n            ),\n            hi: BytePos(\n                1897,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1895,\n                                ),\n                                hi: BytePos(\n                                    1896,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-done.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1644,\n            ),\n            hi: BytePos(\n                1650,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1645,\n                                ),\n                                hi: BytePos(\n                                    1646,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('_' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1648,\n                                ),\n                                hi: BytePos(\n                                    1649,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-step-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1808,\n            ),\n            hi: BytePos(\n                1811,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1809,\n                                ),\n                                hi: BytePos(\n                                    1810,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-val-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                2172,\n            ),\n            hi: BytePos(\n                2175,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    2173,\n                                ),\n                                hi: BytePos(\n                                    2174,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-val.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                2076,\n            ),\n            hi: BytePos(\n                2085,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    2077,\n                                ),\n                                hi: BytePos(\n                                    2078,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    2080,\n                                ),\n                                hi: BytePos(\n                                    2081,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    2083,\n                                ),\n                                hi: BytePos(\n                                    2084,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('z' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-obj-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1815,\n            ),\n            hi: BytePos(\n                1854,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1816,\n                            ),\n                            hi: BytePos(\n                                1853,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1816,\n                                    ),\n                                    hi: BytePos(\n                                        1827,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1818,\n                                                ),\n                                                hi: BytePos(\n                                                    1819,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1818,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1819,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1821,\n                                                ),\n                                                hi: BytePos(\n                                                    1822,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1821,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1822,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('y' type=inline),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1824,\n                                                ),\n                                                hi: BytePos(\n                                                    1825,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1824,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1825,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('z' type=inline),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Object(\n                            ObjectLit {\n                                span: Span {\n                                    lo: BytePos(\n                                        1830,\n                                    ),\n                                    hi: BytePos(\n                                        1853,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1832,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1833,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1835,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1837,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 44.0,\n                                                            raw: Some(\n                                                                \"44\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1839,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1840,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1842,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1844,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 55.0,\n                                                            raw: Some(\n                                                                \"55\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1846,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1847,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1849,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1851,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 66.0,\n                                                            raw: Some(\n                                                                \"66\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                ],\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-obj-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1814,\n            ),\n            hi: BytePos(\n                1853,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1815,\n                            ),\n                            hi: BytePos(\n                                1852,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1815,\n                                    ),\n                                    hi: BytePos(\n                                        1826,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1817,\n                                                ),\n                                                hi: BytePos(\n                                                    1818,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1817,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1818,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1820,\n                                                ),\n                                                hi: BytePos(\n                                                    1821,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1820,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1821,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('y' type=inline),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1823,\n                                                ),\n                                                hi: BytePos(\n                                                    1824,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1823,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1824,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('z' type=inline),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Object(\n                            ObjectLit {\n                                span: Span {\n                                    lo: BytePos(\n                                        1829,\n                                    ),\n                                    hi: BytePos(\n                                        1852,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1831,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1832,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1834,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1836,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 44.0,\n                                                            raw: Some(\n                                                                \"44\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1838,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1839,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1841,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1843,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 55.0,\n                                                            raw: Some(\n                                                                \"55\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1845,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1846,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1848,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1850,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 66.0,\n                                                            raw: Some(\n                                                                \"66\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                ],\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-obj-prop-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1820,\n            ),\n            hi: BytePos(\n                1871,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1821,\n                            ),\n                            hi: BytePos(\n                                1870,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1821,\n                                    ),\n                                    hi: BytePos(\n                                        1841,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1823,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1824,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('u' type=static),\n                                                    optional: false,\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1826,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1827,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('v' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1829,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1830,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('w' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1832,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1833,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1835,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1836,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1838,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1839,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Object(\n                            ObjectLit {\n                                span: Span {\n                                    lo: BytePos(\n                                        1844,\n                                    ),\n                                    hi: BytePos(\n                                        1870,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1846,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1847,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('u' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1849,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1852,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 444.0,\n                                                            raw: Some(\n                                                                \"444\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1854,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1855,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('w' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1857,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1860,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 555.0,\n                                                            raw: Some(\n                                                                \"555\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1862,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1863,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1865,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1868,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 666.0,\n                                                            raw: Some(\n                                                                \"666\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                ],\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-obj-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1819,\n            ),\n            hi: BytePos(\n                1870,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Assign(\n                    AssignPat {\n                        span: Span {\n                            lo: BytePos(\n                                1820,\n                            ),\n                            hi: BytePos(\n                                1869,\n                            ),\n                            ctxt: #0,\n                        },\n                        left: Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1820,\n                                    ),\n                                    hi: BytePos(\n                                        1840,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1822,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1823,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('u' type=static),\n                                                    optional: false,\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1825,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1826,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('v' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1828,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1829,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('w' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1831,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1832,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1834,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1835,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1837,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1838,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        right: Object(\n                            ObjectLit {\n                                span: Span {\n                                    lo: BytePos(\n                                        1843,\n                                    ),\n                                    hi: BytePos(\n                                        1869,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1845,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1846,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('u' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1848,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1851,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 444.0,\n                                                            raw: Some(\n                                                                \"444\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1853,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1854,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('w' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1856,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1859,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 555.0,\n                                                            raw: Some(\n                                                                \"555\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    Prop(\n                                        KeyValue(\n                                            KeyValueProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1861,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1862,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1864,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1867,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 666.0,\n                                                            raw: Some(\n                                                                \"666\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                ],\n                            },\n                        ),\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-obj-val-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1843,\n            ),\n            hi: BytePos(\n                1850,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Object(\n                    ObjectPat {\n                        span: Span {\n                            lo: BytePos(\n                                1844,\n                            ),\n                            hi: BytePos(\n                                1849,\n                            ),\n                            ctxt: #0,\n                        },\n                        props: [\n                            Assign(\n                                AssignPatProp {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1846,\n                                        ),\n                                        hi: BytePos(\n                                            1847,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    key: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1846,\n                                            ),\n                                            hi: BytePos(\n                                                1847,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    value: None,\n                                },\n                            ),\n                        ],\n                        optional: false,\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elem-obj-val-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1854,\n            ),\n            hi: BytePos(\n                1861,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Object(\n                    ObjectPat {\n                        span: Span {\n                            lo: BytePos(\n                                1855,\n                            ),\n                            hi: BytePos(\n                                1860,\n                            ),\n                            ctxt: #0,\n                        },\n                        props: [\n                            Assign(\n                                AssignPatProp {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1857,\n                                        ),\n                                        hi: BytePos(\n                                            1858,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    key: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1857,\n                                            ),\n                                            hi: BytePos(\n                                                1858,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    value: None,\n                                },\n                            ),\n                        ],\n                        optional: false,\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elision-exhausted.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elision-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-elision.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-empty.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-ary-elem.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                2450,\n            ),\n            hi: BytePos(\n                2464,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                2451,\n                            ),\n                            hi: BytePos(\n                                2463,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                2451,\n                            ),\n                            hi: BytePos(\n                                2454,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        2454,\n                                    ),\n                                    hi: BytePos(\n                                        2463,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            2455,\n                                                        ),\n                                                        hi: BytePos(\n                                                            2456,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            2458,\n                                                        ),\n                                                        hi: BytePos(\n                                                            2459,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            2461,\n                                                        ),\n                                                        hi: BytePos(\n                                                            2462,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-ary-elision.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-ary-empty.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-ary-rest.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1702,\n            ),\n            hi: BytePos(\n                1713,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1703,\n                            ),\n                            hi: BytePos(\n                                1712,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1703,\n                            ),\n                            hi: BytePos(\n                                1706,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1706,\n                                    ),\n                                    hi: BytePos(\n                                        1712,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Rest(\n                                            RestPat {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1707,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1711,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                dot3_token: Span {\n                                                    lo: BytePos(\n                                                        1707,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1710,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                arg: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1710,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1711,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-id-direct.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1622,\n            ),\n            hi: BytePos(\n                1628,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1623,\n                            ),\n                            hi: BytePos(\n                                1627,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1623,\n                            ),\n                            hi: BytePos(\n                                1626,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1626,\n                                        ),\n                                        hi: BytePos(\n                                            1627,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-id-elision-next-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-id-elision.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1830,\n            ),\n            hi: BytePos(\n                1841,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            None,\n            None,\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1836,\n                            ),\n                            hi: BytePos(\n                                1840,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1836,\n                            ),\n                            hi: BytePos(\n                                1839,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1839,\n                                        ),\n                                        hi: BytePos(\n                                            1840,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-id-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1791,\n            ),\n            hi: BytePos(\n                1801,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            None,\n            None,\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1796,\n                            ),\n                            hi: BytePos(\n                                1800,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1796,\n                            ),\n                            hi: BytePos(\n                                1799,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1799,\n                                        ),\n                                        hi: BytePos(\n                                            1800,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-id-iter-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-id-iter-val-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                2037,\n            ),\n            hi: BytePos(\n                2043,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                2038,\n                            ),\n                            hi: BytePos(\n                                2042,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                2038,\n                            ),\n                            hi: BytePos(\n                                2041,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2041,\n                                        ),\n                                        hi: BytePos(\n                                            2042,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1556,\n            ),\n            hi: BytePos(\n                1562,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1557,\n                            ),\n                            hi: BytePos(\n                                1561,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1557,\n                            ),\n                            hi: BytePos(\n                                1560,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1560,\n                                        ),\n                                        hi: BytePos(\n                                            1561,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-init-ary.js","error":null}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-init-id.js","error":null}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-init-obj.js","error":null}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-not-final-ary.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1648,\n            ),\n            hi: BytePos(\n                1659,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1649,\n                            ),\n                            hi: BytePos(\n                                1655,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1649,\n                            ),\n                            hi: BytePos(\n                                1652,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1652,\n                                    ),\n                                    hi: BytePos(\n                                        1655,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1653,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1654,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1657,\n                                ),\n                                hi: BytePos(\n                                    1658,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-not-final-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1636,\n            ),\n            hi: BytePos(\n                1645,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1637,\n                            ),\n                            hi: BytePos(\n                                1641,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1637,\n                            ),\n                            hi: BytePos(\n                                1640,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1640,\n                                        ),\n                                        hi: BytePos(\n                                            1641,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1643,\n                                ),\n                                hi: BytePos(\n                                    1644,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-not-final-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1649,\n            ),\n            hi: BytePos(\n                1662,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1650,\n                            ),\n                            hi: BytePos(\n                                1658,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1650,\n                            ),\n                            hi: BytePos(\n                                1653,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1653,\n                                    ),\n                                    hi: BytePos(\n                                        1658,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1655,\n                                                ),\n                                                hi: BytePos(\n                                                    1656,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1655,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1656,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n            Some(\n                Ident(\n                    BindingIdent {\n                        id: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1660,\n                                ),\n                                hi: BytePos(\n                                    1661,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-obj-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1687,\n            ),\n            hi: BytePos(\n                1702,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1688,\n                            ),\n                            hi: BytePos(\n                                1701,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1688,\n                            ),\n                            hi: BytePos(\n                                1691,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1691,\n                                    ),\n                                    hi: BytePos(\n                                        1701,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1693,\n                                                ),\n                                                hi: BytePos(\n                                                    1699,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1693,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1699,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('length' type=static),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/ary-ptrn-rest-obj-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Array(\n    ArrayPat {\n        span: Span {\n            lo: BytePos(\n                1714,\n            ),\n            hi: BytePos(\n                1756,\n            ),\n            ctxt: #0,\n        },\n        elems: [\n            Some(\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                1715,\n                            ),\n                            hi: BytePos(\n                                1755,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                1715,\n                            ),\n                            hi: BytePos(\n                                1718,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1718,\n                                    ),\n                                    hi: BytePos(\n                                        1755,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Num(\n                                                Number {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1720,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1721,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    value: 0.0,\n                                                    raw: Some(\n                                                        \"0\",\n                                                    ),\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1723,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1724,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('v' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Num(\n                                                Number {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1726,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1727,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    value: 1.0,\n                                                    raw: Some(\n                                                        \"1\",\n                                                    ),\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1729,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1730,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('w' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Num(\n                                                Number {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1732,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1733,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    value: 2.0,\n                                                    raw: Some(\n                                                        \"2\",\n                                                    ),\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1735,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1736,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Num(\n                                                Number {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1738,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1739,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    value: 3.0,\n                                                    raw: Some(\n                                                        \"3\",\n                                                    ),\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1741,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1742,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                    KeyValue(\n                                        KeyValuePatProp {\n                                            key: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1744,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1750,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('length' type=static),\n                                                    optional: false,\n                                                },\n                                            ),\n                                            value: Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1752,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1753,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-init-iter-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1830,\n            ),\n            hi: BytePos(\n                1840,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1830,\n                    ),\n                    hi: BytePos(\n                        1833,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1831,\n                                        ),\n                                        hi: BytePos(\n                                            1832,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1836,\n                    ),\n                    hi: BytePos(\n                        1840,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-init-iter-get-err-array-prototype.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1752,\n            ),\n            hi: BytePos(\n                1773,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1752,\n                    ),\n                    hi: BytePos(\n                        1761,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1753,\n                                        ),\n                                        hi: BytePos(\n                                            1754,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1756,\n                                        ),\n                                        hi: BytePos(\n                                            1757,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1759,\n                                        ),\n                                        hi: BytePos(\n                                            1760,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('z' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1764,\n                    ),\n                    hi: BytePos(\n                        1773,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1765,\n                                            ),\n                                            hi: BytePos(\n                                                1766,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1768,\n                                            ),\n                                            hi: BytePos(\n                                                1769,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1771,\n                                            ),\n                                            hi: BytePos(\n                                                1772,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-init-iter-get-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1595,\n            ),\n            hi: BytePos(\n                1605,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1595,\n                    ),\n                    hi: BytePos(\n                        1598,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1596,\n                                        ),\n                                        hi: BytePos(\n                                            1597,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1601,\n                    ),\n                    hi: BytePos(\n                        1605,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-init-iter-no-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1832,\n            ),\n            hi: BytePos(\n                1842,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1832,\n                    ),\n                    hi: BytePos(\n                        1835,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1833,\n                                        ),\n                                        hi: BytePos(\n                                            1834,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1838,\n                    ),\n                    hi: BytePos(\n                        1842,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-name-iter-val.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                2095,\n            ),\n            hi: BytePos(\n                2116,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        2095,\n                    ),\n                    hi: BytePos(\n                        2104,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2096,\n                                        ),\n                                        hi: BytePos(\n                                            2097,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2099,\n                                        ),\n                                        hi: BytePos(\n                                            2100,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2102,\n                                        ),\n                                        hi: BytePos(\n                                            2103,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('z' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        2107,\n                    ),\n                    hi: BytePos(\n                        2116,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2108,\n                                            ),\n                                            hi: BytePos(\n                                                2109,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2111,\n                                            ),\n                                            hi: BytePos(\n                                                2112,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2114,\n                                            ),\n                                            hi: BytePos(\n                                                2115,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-elem-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1861,\n            ),\n            hi: BytePos(\n                1889,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1861,\n                    ),\n                    hi: BytePos(\n                        1884,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1862,\n                                    ),\n                                    hi: BytePos(\n                                        1883,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1862,\n                                            ),\n                                            hi: BytePos(\n                                                1871,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1863,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1864,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1866,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1867,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1869,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1870,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1874,\n                                            ),\n                                            hi: BytePos(\n                                                1883,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1875,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1876,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1878,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1879,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1881,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1882,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1887,\n                    ),\n                    hi: BytePos(\n                        1889,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-elem-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1823,\n            ),\n            hi: BytePos(\n                1860,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1823,\n                    ),\n                    hi: BytePos(\n                        1846,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1824,\n                                    ),\n                                    hi: BytePos(\n                                        1845,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1824,\n                                            ),\n                                            hi: BytePos(\n                                                1833,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1825,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1826,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1828,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1829,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1831,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1832,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1836,\n                                            ),\n                                            hi: BytePos(\n                                                1845,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1837,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1838,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1840,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1841,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1843,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1844,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1849,\n                    ),\n                    hi: BytePos(\n                        1860,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1850,\n                                        ),\n                                        hi: BytePos(\n                                            1859,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1851,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1852,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 7.0,\n                                                            raw: Some(\n                                                                \"7\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1854,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1855,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 8.0,\n                                                            raw: Some(\n                                                                \"8\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1857,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1858,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 9.0,\n                                                            raw: Some(\n                                                                \"9\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-elision-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-elision-iter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-empty-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-empty-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1843,\n            ),\n            hi: BytePos(\n                1891,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1843,\n                    ),\n                    hi: BytePos(\n                        1882,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1844,\n                                    ),\n                                    hi: BytePos(\n                                        1881,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1844,\n                                            ),\n                                            hi: BytePos(\n                                                1846,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1849,\n                                            ),\n                                            hi: BytePos(\n                                                1881,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Fn(\n                                                FnExpr {\n                                                    ident: None,\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1849,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1879,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1860,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1879,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [\n                                                                    Expr(\n                                                                        ExprStmt {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    1862,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    1877,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            expr: Assign(\n                                                                                AssignExpr {\n                                                                                    span: Span {\n                                                                                        lo: BytePos(\n                                                                                            1862,\n                                                                                        ),\n                                                                                        hi: BytePos(\n                                                                                            1876,\n                                                                                        ),\n                                                                                        ctxt: #0,\n                                                                                    },\n                                                                                    op: \"+=\",\n                                                                                    left: Expr(\n                                                                                        Ident(\n                                                                                            Ident {\n                                                                                                span: Span {\n                                                                                                    lo: BytePos(\n                                                                                                        1862,\n                                                                                                    ),\n                                                                                                    hi: BytePos(\n                                                                                                        1871,\n                                                                                                    ),\n                                                                                                    ctxt: #0,\n                                                                                                },\n                                                                                                sym: Atom('initCount' type=dynamic),\n                                                                                                optional: false,\n                                                                                            },\n                                                                                        ),\n                                                                                    ),\n                                                                                    right: Lit(\n                                                                                        Num(\n                                                                                            Number {\n                                                                                                span: Span {\n                                                                                                    lo: BytePos(\n                                                                                                        1875,\n                                                                                                    ),\n                                                                                                    hi: BytePos(\n                                                                                                        1876,\n                                                                                                    ),\n                                                                                                    ctxt: #0,\n                                                                                                },\n                                                                                                value: 1.0,\n                                                                                                raw: Some(\n                                                                                                    \"1\",\n                                                                                                ),\n                                                                                            },\n                                                                                        ),\n                                                                                    ),\n                                                                                },\n                                                                            ),\n                                                                        },\n                                                                    ),\n                                                                ],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1885,\n                    ),\n                    hi: BytePos(\n                        1891,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1886,\n                                        ),\n                                        hi: BytePos(\n                                            1890,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1887,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1889,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 23.0,\n                                                            raw: Some(\n                                                                \"23\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-rest-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1885,\n            ),\n            hi: BytePos(\n                1907,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1885,\n                    ),\n                    hi: BytePos(\n                        1902,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1886,\n                                    ),\n                                    hi: BytePos(\n                                        1901,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1886,\n                                            ),\n                                            hi: BytePos(\n                                                1892,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Rest(\n                                                    RestPat {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1887,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1891,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        dot3_token: Span {\n                                                            lo: BytePos(\n                                                                1887,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1890,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        arg: Ident(\n                                                            BindingIdent {\n                                                                id: Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1890,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1891,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('x' type=static),\n                                                                    optional: false,\n                                                                },\n                                                                type_ann: None,\n                                                            },\n                                                        ),\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1895,\n                                            ),\n                                            hi: BytePos(\n                                                1901,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('values' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1905,\n                    ),\n                    hi: BytePos(\n                        1907,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-rest-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1866,\n            ),\n            hi: BytePos(\n                1920,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1866,\n                    ),\n                    hi: BytePos(\n                        1909,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1867,\n                                    ),\n                                    hi: BytePos(\n                                        1908,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1867,\n                                            ),\n                                            hi: BytePos(\n                                                1873,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Rest(\n                                                    RestPat {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1868,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1872,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        dot3_token: Span {\n                                                            lo: BytePos(\n                                                                1868,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1871,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        arg: Ident(\n                                                            BindingIdent {\n                                                                id: Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1871,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1872,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('x' type=static),\n                                                                    optional: false,\n                                                                },\n                                                                type_ann: None,\n                                                            },\n                                                        ),\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1876,\n                                            ),\n                                            hi: BytePos(\n                                                1908,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Fn(\n                                                FnExpr {\n                                                    ident: None,\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1876,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1906,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1887,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1906,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [\n                                                                    Expr(\n                                                                        ExprStmt {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    1889,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    1904,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            expr: Assign(\n                                                                                AssignExpr {\n                                                                                    span: Span {\n                                                                                        lo: BytePos(\n                                                                                            1889,\n                                                                                        ),\n                                                                                        hi: BytePos(\n                                                                                            1903,\n                                                                                        ),\n                                                                                        ctxt: #0,\n                                                                                    },\n                                                                                    op: \"+=\",\n                                                                                    left: Expr(\n                                                                                        Ident(\n                                                                                            Ident {\n                                                                                                span: Span {\n                                                                                                    lo: BytePos(\n                                                                                                        1889,\n                                                                                                    ),\n                                                                                                    hi: BytePos(\n                                                                                                        1898,\n                                                                                                    ),\n                                                                                                    ctxt: #0,\n                                                                                                },\n                                                                                                sym: Atom('initCount' type=dynamic),\n                                                                                                optional: false,\n                                                                                            },\n                                                                                        ),\n                                                                                    ),\n                                                                                    right: Lit(\n                                                                                        Num(\n                                                                                            Number {\n                                                                                                span: Span {\n                                                                                                    lo: BytePos(\n                                                                                                        1902,\n                                                                                                    ),\n                                                                                                    hi: BytePos(\n                                                                                                        1903,\n                                                                                                    ),\n                                                                                                    ctxt: #0,\n                                                                                                },\n                                                                                                value: 1.0,\n                                                                                                raw: Some(\n                                                                                                    \"1\",\n                                                                                                ),\n                                                                                            },\n                                                                                        ),\n                                                                                    ),\n                                                                                },\n                                                                            ),\n                                                                        },\n                                                                    ),\n                                                                ],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1912,\n                    ),\n                    hi: BytePos(\n                        1920,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1913,\n                                        ),\n                                        hi: BytePos(\n                                            1919,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('values' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-ary-val-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1881,\n            ),\n            hi: BytePos(\n                1895,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1881,\n                    ),\n                    hi: BytePos(\n                        1886,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1882,\n                                    ),\n                                    hi: BytePos(\n                                        1885,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1883,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1884,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1889,\n                    ),\n                    hi: BytePos(\n                        1895,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1890,\n                                            ),\n                                            hi: BytePos(\n                                                1894,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1854,\n            ),\n            hi: BytePos(\n                1867,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1854,\n                    ),\n                    hi: BytePos(\n                        1862,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1855,\n                                    ),\n                                    hi: BytePos(\n                                        1861,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1855,\n                                                ),\n                                                hi: BytePos(\n                                                    1856,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1859,\n                                                ),\n                                                hi: BytePos(\n                                                    1861,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1865,\n                    ),\n                    hi: BytePos(\n                        1867,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-arrow.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1898,\n            ),\n            hi: BytePos(\n                1921,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1898,\n                    ),\n                    hi: BytePos(\n                        1916,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1899,\n                                    ),\n                                    hi: BytePos(\n                                        1915,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1899,\n                                                ),\n                                                hi: BytePos(\n                                                    1904,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('arrow' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Arrow(\n                                    ArrowExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1907,\n                                            ),\n                                            hi: BytePos(\n                                                1915,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        params: [],\n                                        body: BlockStmt(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1913,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1915,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_async: false,\n                                        is_generator: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1919,\n                    ),\n                    hi: BytePos(\n                        1921,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1900,\n            ),\n            hi: BytePos(\n                1976,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1900,\n                    ),\n                    hi: BytePos(\n                        1971,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1901,\n                                    ),\n                                    hi: BytePos(\n                                        1915,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1901,\n                                                ),\n                                                hi: BytePos(\n                                                    1904,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('cls' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Class(\n                                    ClassExpr {\n                                        ident: None,\n                                        class: Class {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1907,\n                                                ),\n                                                hi: BytePos(\n                                                    1915,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            decorators: [],\n                                            body: [],\n                                            super_class: None,\n                                            is_abstract: false,\n                                            type_params: None,\n                                            super_type_params: None,\n                                            implements: [],\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1917,\n                                    ),\n                                    hi: BytePos(\n                                        1934,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1917,\n                                                ),\n                                                hi: BytePos(\n                                                    1921,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('xCls' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Class(\n                                    ClassExpr {\n                                        ident: Some(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1930,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1931,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('X' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                        class: Class {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1924,\n                                                ),\n                                                hi: BytePos(\n                                                    1934,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            decorators: [],\n                                            body: [],\n                                            super_class: None,\n                                            is_abstract: false,\n                                            type_params: None,\n                                            super_type_params: None,\n                                            implements: [],\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1936,\n                                    ),\n                                    hi: BytePos(\n                                        1970,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1936,\n                                                ),\n                                                hi: BytePos(\n                                                    1941,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('xCls2' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Class(\n                                    ClassExpr {\n                                        ident: None,\n                                        class: Class {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1944,\n                                                ),\n                                                hi: BytePos(\n                                                    1970,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            decorators: [],\n                                            body: [\n                                                Method(\n                                                    ClassMethod {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1952,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1968,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1959,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1963,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('name' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        function: Function {\n                                                            params: [],\n                                                            decorators: [],\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1952,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1968,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            body: Some(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1966,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1968,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [],\n                                                                },\n                                                            ),\n                                                            is_generator: false,\n                                                            is_async: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                        kind: Method,\n                                                        is_static: true,\n                                                        accessibility: None,\n                                                        is_abstract: false,\n                                                        is_optional: false,\n                                                        is_override: false,\n                                                    },\n                                                ),\n                                            ],\n                                            super_class: None,\n                                            is_abstract: false,\n                                            type_params: None,\n                                            super_type_params: None,\n                                            implements: [],\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1974,\n                    ),\n                    hi: BytePos(\n                        1976,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1928,\n            ),\n            hi: BytePos(\n                1988,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1928,\n                    ),\n                    hi: BytePos(\n                        1983,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1929,\n                                    ),\n                                    hi: BytePos(\n                                        1953,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1929,\n                                                ),\n                                                hi: BytePos(\n                                                    1934,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('cover' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Paren(\n                                    ParenExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1937,\n                                            ),\n                                            hi: BytePos(\n                                                1953,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        expr: Fn(\n                                            FnExpr {\n                                                ident: None,\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1938,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1952,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1950,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1952,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                            },\n                                        ),\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1955,\n                                    ),\n                                    hi: BytePos(\n                                        1982,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1955,\n                                                ),\n                                                hi: BytePos(\n                                                    1961,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('xCover' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Paren(\n                                    ParenExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1964,\n                                            ),\n                                            hi: BytePos(\n                                                1982,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        expr: Seq(\n                                            SeqExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1965,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1981,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                exprs: [\n                                                    Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1965,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1966,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 0.0,\n                                                                raw: Some(\n                                                                    \"0\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                    Fn(\n                                                        FnExpr {\n                                                            ident: None,\n                                                            function: Function {\n                                                                params: [],\n                                                                decorators: [],\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1968,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1981,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                body: Some(\n                                                                    BlockStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1979,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1981,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        stmts: [],\n                                                                    },\n                                                                ),\n                                                                is_generator: false,\n                                                                is_async: false,\n                                                                type_params: None,\n                                                                return_type: None,\n                                                            },\n                                                        },\n                                                    ),\n                                                ],\n                                            },\n                                        ),\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1986,\n                    ),\n                    hi: BytePos(\n                        1988,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1897,\n            ),\n            hi: BytePos(\n                1946,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1897,\n                    ),\n                    hi: BytePos(\n                        1941,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1898,\n                                    ),\n                                    hi: BytePos(\n                                        1917,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1898,\n                                                ),\n                                                hi: BytePos(\n                                                    1900,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('fn' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Fn(\n                                    FnExpr {\n                                        ident: None,\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1903,\n                                                ),\n                                                hi: BytePos(\n                                                    1917,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1915,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1917,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: false,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1919,\n                                    ),\n                                    hi: BytePos(\n                                        1940,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1919,\n                                                ),\n                                                hi: BytePos(\n                                                    1922,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('xFn' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Fn(\n                                    FnExpr {\n                                        ident: Some(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1934,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1935,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1925,\n                                                ),\n                                                hi: BytePos(\n                                                    1940,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1938,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1940,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: false,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1944,\n                    ),\n                    hi: BytePos(\n                        1946,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1921,\n            ),\n            hi: BytePos(\n                1974,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1921,\n                    ),\n                    hi: BytePos(\n                        1969,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1922,\n                                    ),\n                                    hi: BytePos(\n                                        1943,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1922,\n                                                ),\n                                                hi: BytePos(\n                                                    1925,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('gen' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Fn(\n                                    FnExpr {\n                                        ident: None,\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1928,\n                                                ),\n                                                hi: BytePos(\n                                                    1943,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1941,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1943,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: true,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1945,\n                                    ),\n                                    hi: BytePos(\n                                        1968,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1945,\n                                                ),\n                                                hi: BytePos(\n                                                    1949,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('xGen' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Fn(\n                                    FnExpr {\n                                        ident: Some(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1962,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1963,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1952,\n                                                ),\n                                                hi: BytePos(\n                                                    1968,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1966,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1968,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: true,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1972,\n                    ),\n                    hi: BytePos(\n                        1974,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-hole.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1763,\n            ),\n            hi: BytePos(\n                1777,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1763,\n                    ),\n                    hi: BytePos(\n                        1771,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1764,\n                                    ),\n                                    hi: BytePos(\n                                        1770,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1764,\n                                                ),\n                                                hi: BytePos(\n                                                    1765,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1768,\n                                                ),\n                                                hi: BytePos(\n                                                    1770,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1774,\n                    ),\n                    hi: BytePos(\n                        1777,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    None,\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1758,\n            ),\n            hi: BytePos(\n                1841,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1758,\n                    ),\n                    hi: BytePos(\n                        1818,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1759,\n                                    ),\n                                    hi: BytePos(\n                                        1772,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1759,\n                                                ),\n                                                hi: BytePos(\n                                                    1760,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('w' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1763,\n                                            ),\n                                            hi: BytePos(\n                                                1772,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1763,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1770,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1774,\n                                    ),\n                                    hi: BytePos(\n                                        1787,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1774,\n                                                ),\n                                                hi: BytePos(\n                                                    1775,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1778,\n                                            ),\n                                            hi: BytePos(\n                                                1787,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1778,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1785,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1789,\n                                    ),\n                                    hi: BytePos(\n                                        1802,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1789,\n                                                ),\n                                                hi: BytePos(\n                                                    1790,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('y' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1793,\n                                            ),\n                                            hi: BytePos(\n                                                1802,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1793,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1800,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1804,\n                                    ),\n                                    hi: BytePos(\n                                        1817,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1804,\n                                                ),\n                                                hi: BytePos(\n                                                    1805,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('z' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1808,\n                                            ),\n                                            hi: BytePos(\n                                                1817,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1808,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1815,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1821,\n                    ),\n                    hi: BytePos(\n                        1841,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1822,\n                                            ),\n                                            hi: BytePos(\n                                                1826,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1828,\n                                            ),\n                                            hi: BytePos(\n                                                1829,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 0.0,\n                                        raw: Some(\n                                            \"0\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Bool(\n                                    Bool {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1831,\n                                            ),\n                                            hi: BytePos(\n                                                1836,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: false,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Str(\n                                    Str {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1838,\n                                            ),\n                                            hi: BytePos(\n                                                1840,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: Atom('' type=static),\n                                        raw: Some(\n                                            \"''\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1670,\n            ),\n            hi: BytePos(\n                1734,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1670,\n                    ),\n                    hi: BytePos(\n                        1720,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1671,\n                                    ),\n                                    hi: BytePos(\n                                        1719,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1671,\n                                                ),\n                                                hi: BytePos(\n                                                    1672,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1675,\n                                            ),\n                                            hi: BytePos(\n                                                1719,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Paren(\n                                                ParenExpr {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1675,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1717,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    expr: Fn(\n                                                        FnExpr {\n                                                            ident: None,\n                                                            function: Function {\n                                                                params: [],\n                                                                decorators: [],\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1676,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1716,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                body: Some(\n                                                                    BlockStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1687,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1716,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        stmts: [\n                                                                            Throw(\n                                                                                ThrowStmt {\n                                                                                    span: Span {\n                                                                                        lo: BytePos(\n                                                                                            1689,\n                                                                                        ),\n                                                                                        hi: BytePos(\n                                                                                            1714,\n                                                                                        ),\n                                                                                        ctxt: #0,\n                                                                                    },\n                                                                                    arg: New(\n                                                                                        NewExpr {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1695,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1713,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            callee: Ident(\n                                                                                                Ident {\n                                                                                                    span: Span {\n                                                                                                        lo: BytePos(\n                                                                                                            1699,\n                                                                                                        ),\n                                                                                                        hi: BytePos(\n                                                                                                            1711,\n                                                                                                        ),\n                                                                                                        ctxt: #0,\n                                                                                                    },\n                                                                                                    sym: Atom('Test262Error' type=dynamic),\n                                                                                                    optional: false,\n                                                                                                },\n                                                                                            ),\n                                                                                            args: Some(\n                                                                                                [],\n                                                                                            ),\n                                                                                            type_args: None,\n                                                                                        },\n                                                                                    ),\n                                                                                },\n                                                                            ),\n                                                                        ],\n                                                                    },\n                                                                ),\n                                                                is_generator: false,\n                                                                is_async: false,\n                                                                type_params: None,\n                                                                return_type: None,\n                                                            },\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1723,\n                    ),\n                    hi: BytePos(\n                        1734,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1724,\n                                        ),\n                                        hi: BytePos(\n                                            1733,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('undefined' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1784,\n            ),\n            hi: BytePos(\n                1806,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1784,\n                    ),\n                    hi: BytePos(\n                        1792,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1785,\n                                    ),\n                                    hi: BytePos(\n                                        1791,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1785,\n                                                ),\n                                                hi: BytePos(\n                                                    1786,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1789,\n                                                ),\n                                                hi: BytePos(\n                                                    1791,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1795,\n                    ),\n                    hi: BytePos(\n                        1806,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1796,\n                                        ),\n                                        hi: BytePos(\n                                            1805,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('undefined' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1878,\n            ),\n            hi: BytePos(\n                1912,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1878,\n                    ),\n                    hi: BytePos(\n                        1907,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1880,\n                                    ),\n                                    hi: BytePos(\n                                        1905,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1880,\n                                                ),\n                                                hi: BytePos(\n                                                    1881,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1884,\n                                            ),\n                                            hi: BytePos(\n                                                1905,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('unresolvableReference' type=dynamic),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1910,\n                    ),\n                    hi: BytePos(\n                        1912,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-iter-complete.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1939,\n            ),\n            hi: BytePos(\n                1947,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1939,\n                    ),\n                    hi: BytePos(\n                        1942,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1940,\n                                        ),\n                                        hi: BytePos(\n                                            1941,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1945,\n                    ),\n                    hi: BytePos(\n                        1947,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-iter-done.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1689,\n            ),\n            hi: BytePos(\n                1700,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1689,\n                    ),\n                    hi: BytePos(\n                        1695,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1690,\n                                        ),\n                                        hi: BytePos(\n                                            1691,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('_' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1693,\n                                        ),\n                                        hi: BytePos(\n                                            1694,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1698,\n                    ),\n                    hi: BytePos(\n                        1700,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-iter-step-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1853,\n            ),\n            hi: BytePos(\n                1860,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1853,\n                    ),\n                    hi: BytePos(\n                        1856,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1854,\n                                        ),\n                                        hi: BytePos(\n                                            1855,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1859,\n                    ),\n                    hi: BytePos(\n                        1860,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('g' type=static),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-iter-val-array-prototype.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-iter-val-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                2217,\n            ),\n            hi: BytePos(\n                2224,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        2217,\n                    ),\n                    hi: BytePos(\n                        2220,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2218,\n                                        ),\n                                        hi: BytePos(\n                                            2219,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        2223,\n                    ),\n                    hi: BytePos(\n                        2224,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('g' type=static),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-iter-val.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                2121,\n            ),\n            hi: BytePos(\n                2142,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        2121,\n                    ),\n                    hi: BytePos(\n                        2130,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2122,\n                                        ),\n                                        hi: BytePos(\n                                            2123,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2125,\n                                        ),\n                                        hi: BytePos(\n                                            2126,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2128,\n                                        ),\n                                        hi: BytePos(\n                                            2129,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('z' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        2133,\n                    ),\n                    hi: BytePos(\n                        2142,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2134,\n                                            ),\n                                            hi: BytePos(\n                                                2135,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2137,\n                                            ),\n                                            hi: BytePos(\n                                                2138,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2140,\n                                            ),\n                                            hi: BytePos(\n                                                2141,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-obj-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1860,\n            ),\n            hi: BytePos(\n                1904,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1860,\n                    ),\n                    hi: BytePos(\n                        1899,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1861,\n                                    ),\n                                    hi: BytePos(\n                                        1898,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1861,\n                                            ),\n                                            hi: BytePos(\n                                                1872,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1863,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1864,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1863,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1864,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1866,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1867,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1866,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1867,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1869,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1870,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1869,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1870,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1875,\n                                            ),\n                                            hi: BytePos(\n                                                1898,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1877,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1878,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1880,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1882,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 44.0,\n                                                                    raw: Some(\n                                                                        \"44\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1884,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1885,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1887,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1889,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 55.0,\n                                                                    raw: Some(\n                                                                        \"55\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1891,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1892,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1894,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1896,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 66.0,\n                                                                    raw: Some(\n                                                                        \"66\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1902,\n                    ),\n                    hi: BytePos(\n                        1904,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-obj-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1859,\n            ),\n            hi: BytePos(\n                1926,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1859,\n                    ),\n                    hi: BytePos(\n                        1898,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1860,\n                                    ),\n                                    hi: BytePos(\n                                        1897,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1860,\n                                            ),\n                                            hi: BytePos(\n                                                1871,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1862,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1863,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1862,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1863,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1865,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1866,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1865,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1866,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1868,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1869,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1868,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1869,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1874,\n                                            ),\n                                            hi: BytePos(\n                                                1897,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1876,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1877,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1879,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1881,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 44.0,\n                                                                    raw: Some(\n                                                                        \"44\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1883,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1884,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1886,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1888,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 55.0,\n                                                                    raw: Some(\n                                                                        \"55\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1890,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1891,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1893,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1895,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 66.0,\n                                                                    raw: Some(\n                                                                        \"66\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1901,\n                    ),\n                    hi: BytePos(\n                        1926,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1902,\n                                        ),\n                                        hi: BytePos(\n                                            1925,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1904,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1905,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1907,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1909,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 11.0,\n                                                                raw: Some(\n                                                                    \"11\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1911,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1912,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1914,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1916,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 22.0,\n                                                                raw: Some(\n                                                                    \"22\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1918,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1919,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1921,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1923,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 33.0,\n                                                                raw: Some(\n                                                                    \"33\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-obj-prop-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1865,\n            ),\n            hi: BytePos(\n                1921,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1865,\n                    ),\n                    hi: BytePos(\n                        1916,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1866,\n                                    ),\n                                    hi: BytePos(\n                                        1915,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1866,\n                                            ),\n                                            hi: BytePos(\n                                                1886,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1868,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1869,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1871,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1872,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('v' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1874,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1875,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1877,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1878,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1880,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1881,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1883,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1884,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1889,\n                                            ),\n                                            hi: BytePos(\n                                                1915,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1891,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1892,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('u' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1894,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1897,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 444.0,\n                                                                    raw: Some(\n                                                                        \"444\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1899,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1900,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('w' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1902,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1905,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 555.0,\n                                                                    raw: Some(\n                                                                        \"555\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1907,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1908,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1910,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1913,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 666.0,\n                                                                    raw: Some(\n                                                                        \"666\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1919,\n                    ),\n                    hi: BytePos(\n                        1921,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-obj-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1864,\n            ),\n            hi: BytePos(\n                1946,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1864,\n                    ),\n                    hi: BytePos(\n                        1915,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1865,\n                                    ),\n                                    hi: BytePos(\n                                        1914,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1865,\n                                            ),\n                                            hi: BytePos(\n                                                1885,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1867,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1868,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1870,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1871,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('v' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1873,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1874,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1876,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1877,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1879,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1880,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1882,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1883,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1888,\n                                            ),\n                                            hi: BytePos(\n                                                1914,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1890,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1891,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('u' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1893,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1896,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 444.0,\n                                                                    raw: Some(\n                                                                        \"444\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1898,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1899,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('w' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1901,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1904,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 555.0,\n                                                                    raw: Some(\n                                                                        \"555\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1906,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1907,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1909,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1912,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 666.0,\n                                                                    raw: Some(\n                                                                        \"666\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1918,\n                    ),\n                    hi: BytePos(\n                        1946,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1919,\n                                        ),\n                                        hi: BytePos(\n                                            1945,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1921,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1922,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1924,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1927,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 777.0,\n                                                                raw: Some(\n                                                                    \"777\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1929,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1930,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1932,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1935,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 888.0,\n                                                                raw: Some(\n                                                                    \"888\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1937,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1938,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1940,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1943,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 999.0,\n                                                                raw: Some(\n                                                                    \"999\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-obj-val-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1888,\n            ),\n            hi: BytePos(\n                1904,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1888,\n                    ),\n                    hi: BytePos(\n                        1895,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1889,\n                                    ),\n                                    hi: BytePos(\n                                        1894,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1891,\n                                                ),\n                                                hi: BytePos(\n                                                    1892,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1891,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1892,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1898,\n                    ),\n                    hi: BytePos(\n                        1904,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1899,\n                                            ),\n                                            hi: BytePos(\n                                                1903,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elem-obj-val-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1899,\n            ),\n            hi: BytePos(\n                1911,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1899,\n                    ),\n                    hi: BytePos(\n                        1906,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Object(\n                            ObjectPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1900,\n                                    ),\n                                    hi: BytePos(\n                                        1905,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                props: [\n                                    Assign(\n                                        AssignPatProp {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1902,\n                                                ),\n                                                hi: BytePos(\n                                                    1903,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            key: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1902,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1903,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            value: None,\n                                        },\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1909,\n                    ),\n                    hi: BytePos(\n                        1911,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elision-exhausted.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elision-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-elision.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-empty.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-ary-elem.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                2495,\n            ),\n            hi: BytePos(\n                2521,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        2495,\n                    ),\n                    hi: BytePos(\n                        2509,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        2496,\n                                    ),\n                                    hi: BytePos(\n                                        2508,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        2496,\n                                    ),\n                                    hi: BytePos(\n                                        2499,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2499,\n                                            ),\n                                            hi: BytePos(\n                                                2508,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    2500,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    2501,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    2503,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    2504,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    2506,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    2507,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        2512,\n                    ),\n                    hi: BytePos(\n                        2521,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2513,\n                                            ),\n                                            hi: BytePos(\n                                                2514,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2516,\n                                            ),\n                                            hi: BytePos(\n                                                2517,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 4.0,\n                                        raw: Some(\n                                            \"4\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                2519,\n                                            ),\n                                            hi: BytePos(\n                                                2520,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 5.0,\n                                        raw: Some(\n                                            \"5\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-ary-elision.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-ary-empty.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-ary-rest.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1747,\n            ),\n            hi: BytePos(\n                1767,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1747,\n                    ),\n                    hi: BytePos(\n                        1758,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1748,\n                                    ),\n                                    hi: BytePos(\n                                        1757,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1748,\n                                    ),\n                                    hi: BytePos(\n                                        1751,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1751,\n                                            ),\n                                            hi: BytePos(\n                                                1757,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Rest(\n                                                    RestPat {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1752,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1756,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        dot3_token: Span {\n                                                            lo: BytePos(\n                                                                1752,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1755,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        arg: Ident(\n                                                            BindingIdent {\n                                                                id: Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1755,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1756,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('x' type=static),\n                                                                    optional: false,\n                                                                },\n                                                                type_ann: None,\n                                                            },\n                                                        ),\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1761,\n                    ),\n                    hi: BytePos(\n                        1767,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-id-direct.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1667,\n            ),\n            hi: BytePos(\n                1679,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1667,\n                    ),\n                    hi: BytePos(\n                        1673,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1668,\n                                    ),\n                                    hi: BytePos(\n                                        1672,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1668,\n                                    ),\n                                    hi: BytePos(\n                                        1671,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1671,\n                                                ),\n                                                hi: BytePos(\n                                                    1672,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1676,\n                    ),\n                    hi: BytePos(\n                        1679,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1677,\n                                            ),\n                                            hi: BytePos(\n                                                1678,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-id-elision-next-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-id-elision.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1875,\n            ),\n            hi: BytePos(\n                1895,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1875,\n                    ),\n                    hi: BytePos(\n                        1886,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    None,\n                    None,\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1881,\n                                    ),\n                                    hi: BytePos(\n                                        1885,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1881,\n                                    ),\n                                    hi: BytePos(\n                                        1884,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1884,\n                                                ),\n                                                hi: BytePos(\n                                                    1885,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1889,\n                    ),\n                    hi: BytePos(\n                        1895,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-id-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1836,\n            ),\n            hi: BytePos(\n                1855,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1836,\n                    ),\n                    hi: BytePos(\n                        1846,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    None,\n                    None,\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1841,\n                                    ),\n                                    hi: BytePos(\n                                        1845,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1841,\n                                    ),\n                                    hi: BytePos(\n                                        1844,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1844,\n                                                ),\n                                                hi: BytePos(\n                                                    1845,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1849,\n                    ),\n                    hi: BytePos(\n                        1855,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1850,\n                                            ),\n                                            hi: BytePos(\n                                                1851,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1853,\n                                            ),\n                                            hi: BytePos(\n                                                1854,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-id-iter-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-id-iter-val-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                2082,\n            ),\n            hi: BytePos(\n                2095,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        2082,\n                    ),\n                    hi: BytePos(\n                        2088,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        2083,\n                                    ),\n                                    hi: BytePos(\n                                        2087,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        2083,\n                                    ),\n                                    hi: BytePos(\n                                        2086,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    2086,\n                                                ),\n                                                hi: BytePos(\n                                                    2087,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        2091,\n                    ),\n                    hi: BytePos(\n                        2095,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1601,\n            ),\n            hi: BytePos(\n                1616,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1601,\n                    ),\n                    hi: BytePos(\n                        1607,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1602,\n                                    ),\n                                    hi: BytePos(\n                                        1606,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1602,\n                                    ),\n                                    hi: BytePos(\n                                        1605,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1605,\n                                                ),\n                                                hi: BytePos(\n                                                    1606,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1610,\n                    ),\n                    hi: BytePos(\n                        1616,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-init-ary.js","error":null}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-init-id.js","error":null}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-init-obj.js","error":null}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-not-final-ary.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1693,\n            ),\n            hi: BytePos(\n                1716,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1693,\n                    ),\n                    hi: BytePos(\n                        1704,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1694,\n                                    ),\n                                    hi: BytePos(\n                                        1700,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1694,\n                                    ),\n                                    hi: BytePos(\n                                        1697,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1697,\n                                            ),\n                                            hi: BytePos(\n                                                1700,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1698,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1699,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1702,\n                                        ),\n                                        hi: BytePos(\n                                            1703,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1707,\n                    ),\n                    hi: BytePos(\n                        1716,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1708,\n                                            ),\n                                            hi: BytePos(\n                                                1709,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1711,\n                                            ),\n                                            hi: BytePos(\n                                                1712,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1714,\n                                            ),\n                                            hi: BytePos(\n                                                1715,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-not-final-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1681,\n            ),\n            hi: BytePos(\n                1702,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1681,\n                    ),\n                    hi: BytePos(\n                        1690,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1682,\n                                    ),\n                                    hi: BytePos(\n                                        1686,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1682,\n                                    ),\n                                    hi: BytePos(\n                                        1685,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1685,\n                                                ),\n                                                hi: BytePos(\n                                                    1686,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1688,\n                                        ),\n                                        hi: BytePos(\n                                            1689,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1693,\n                    ),\n                    hi: BytePos(\n                        1702,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1694,\n                                            ),\n                                            hi: BytePos(\n                                                1695,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1697,\n                                            ),\n                                            hi: BytePos(\n                                                1698,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1700,\n                                            ),\n                                            hi: BytePos(\n                                                1701,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-not-final-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1694,\n            ),\n            hi: BytePos(\n                1719,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1694,\n                    ),\n                    hi: BytePos(\n                        1707,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1695,\n                                    ),\n                                    hi: BytePos(\n                                        1703,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1695,\n                                    ),\n                                    hi: BytePos(\n                                        1698,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1698,\n                                            ),\n                                            hi: BytePos(\n                                                1703,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1700,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1701,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1700,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1701,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    Some(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1705,\n                                        ),\n                                        hi: BytePos(\n                                            1706,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1710,\n                    ),\n                    hi: BytePos(\n                        1719,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1711,\n                                            ),\n                                            hi: BytePos(\n                                                1712,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1714,\n                                            ),\n                                            hi: BytePos(\n                                                1715,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1717,\n                                            ),\n                                            hi: BytePos(\n                                                1718,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-obj-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1732,\n            ),\n            hi: BytePos(\n                1759,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1732,\n                    ),\n                    hi: BytePos(\n                        1747,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1733,\n                                    ),\n                                    hi: BytePos(\n                                        1746,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1733,\n                                    ),\n                                    hi: BytePos(\n                                        1736,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1736,\n                                            ),\n                                            hi: BytePos(\n                                                1746,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1738,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1744,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1738,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1744,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('length' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1750,\n                    ),\n                    hi: BytePos(\n                        1759,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1751,\n                                            ),\n                                            hi: BytePos(\n                                                1752,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1754,\n                                            ),\n                                            hi: BytePos(\n                                                1755,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1757,\n                                            ),\n                                            hi: BytePos(\n                                                1758,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-ary-ptrn-rest-obj-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1759,\n            ),\n            hi: BytePos(\n                1813,\n            ),\n            ctxt: #0,\n        },\n        left: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        1759,\n                    ),\n                    hi: BytePos(\n                        1801,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Rest(\n                            RestPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1760,\n                                    ),\n                                    hi: BytePos(\n                                        1800,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                dot3_token: Span {\n                                    lo: BytePos(\n                                        1760,\n                                    ),\n                                    hi: BytePos(\n                                        1763,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                arg: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1763,\n                                            ),\n                                            hi: BytePos(\n                                                1800,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1765,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1766,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 0.0,\n                                                            raw: Some(\n                                                                \"0\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1768,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1769,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('v' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1771,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1772,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 1.0,\n                                                            raw: Some(\n                                                                \"1\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1774,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1775,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('w' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1777,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1778,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 2.0,\n                                                            raw: Some(\n                                                                \"2\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1780,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1781,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1783,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1784,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 3.0,\n                                                            raw: Some(\n                                                                \"3\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1786,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1787,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            KeyValue(\n                                                KeyValuePatProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1789,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1795,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('length' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1797,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1798,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1804,\n                    ),\n                    hi: BytePos(\n                        1813,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1805,\n                                            ),\n                                            hi: BytePos(\n                                                1806,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 7.0,\n                                        raw: Some(\n                                            \"7\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1808,\n                                            ),\n                                            hi: BytePos(\n                                                1809,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 8.0,\n                                        raw: Some(\n                                            \"8\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1811,\n                                            ),\n                                            hi: BytePos(\n                                                1812,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 9.0,\n                                        raw: Some(\n                                            \"9\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-init-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1462,\n            ),\n            hi: BytePos(\n                1471,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1462,\n                    ),\n                    hi: BytePos(\n                        1464,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Lit(\n            Null(\n                Null {\n                    span: Span {\n                        lo: BytePos(\n                            1467,\n                        ),\n                        hi: BytePos(\n                            1471,\n                        ),\n                        ctxt: #0,\n                    },\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-init-undefined.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1472,\n            ),\n            hi: BytePos(\n                1486,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1472,\n                    ),\n                    hi: BytePos(\n                        1474,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1477,\n                    ),\n                    hi: BytePos(\n                        1486,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('undefined' type=static),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-empty.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1594,\n            ),\n            hi: BytePos(\n                1602,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1594,\n                    ),\n                    hi: BytePos(\n                        1596,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1599,\n                    ),\n                    hi: BytePos(\n                        1602,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('obj' type=inline),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-get-value-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1676,\n            ),\n            hi: BytePos(\n                1707,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1676,\n                    ),\n                    hi: BytePos(\n                        1688,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1678,\n                                ),\n                                hi: BytePos(\n                                    1686,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1678,\n                                    ),\n                                    hi: BytePos(\n                                        1686,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('poisoned' type=dynamic),\n                                optional: false,\n                            },\n                            value: None,\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1691,\n                    ),\n                    hi: BytePos(\n                        1707,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('poisonedProperty' type=dynamic),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-arrow.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1841,\n            ),\n            hi: BytePos(\n                1866,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1841,\n                    ),\n                    hi: BytePos(\n                        1861,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1843,\n                                ),\n                                hi: BytePos(\n                                    1859,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1843,\n                                    ),\n                                    hi: BytePos(\n                                        1848,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('arrow' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Arrow(\n                                    ArrowExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1851,\n                                            ),\n                                            hi: BytePos(\n                                                1859,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        params: [],\n                                        body: BlockStmt(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1857,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1859,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_async: false,\n                                        is_generator: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1864,\n                    ),\n                    hi: BytePos(\n                        1866,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1845,\n            ),\n            hi: BytePos(\n                1923,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1845,\n                    ),\n                    hi: BytePos(\n                        1918,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1847,\n                                ),\n                                hi: BytePos(\n                                    1861,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1847,\n                                    ),\n                                    hi: BytePos(\n                                        1850,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('cls' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Class(\n                                    ClassExpr {\n                                        ident: None,\n                                        class: Class {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1853,\n                                                ),\n                                                hi: BytePos(\n                                                    1861,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            decorators: [],\n                                            body: [],\n                                            super_class: None,\n                                            is_abstract: false,\n                                            type_params: None,\n                                            super_type_params: None,\n                                            implements: [],\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1863,\n                                ),\n                                hi: BytePos(\n                                    1880,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1863,\n                                    ),\n                                    hi: BytePos(\n                                        1867,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('xCls' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Class(\n                                    ClassExpr {\n                                        ident: Some(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1876,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1877,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('X' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                        class: Class {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1870,\n                                                ),\n                                                hi: BytePos(\n                                                    1880,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            decorators: [],\n                                            body: [],\n                                            super_class: None,\n                                            is_abstract: false,\n                                            type_params: None,\n                                            super_type_params: None,\n                                            implements: [],\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1882,\n                                ),\n                                hi: BytePos(\n                                    1916,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1882,\n                                    ),\n                                    hi: BytePos(\n                                        1887,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('xCls2' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Class(\n                                    ClassExpr {\n                                        ident: None,\n                                        class: Class {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1890,\n                                                ),\n                                                hi: BytePos(\n                                                    1916,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            decorators: [],\n                                            body: [\n                                                Method(\n                                                    ClassMethod {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1898,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1914,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1905,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1909,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('name' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        function: Function {\n                                                            params: [],\n                                                            decorators: [],\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1898,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1914,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            body: Some(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1912,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1914,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [],\n                                                                },\n                                                            ),\n                                                            is_generator: false,\n                                                            is_async: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                        kind: Method,\n                                                        is_static: true,\n                                                        accessibility: None,\n                                                        is_abstract: false,\n                                                        is_optional: false,\n                                                        is_override: false,\n                                                    },\n                                                ),\n                                            ],\n                                            super_class: None,\n                                            is_abstract: false,\n                                            type_params: None,\n                                            super_type_params: None,\n                                            implements: [],\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1921,\n                    ),\n                    hi: BytePos(\n                        1923,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1871,\n            ),\n            hi: BytePos(\n                1934,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1871,\n                    ),\n                    hi: BytePos(\n                        1929,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1873,\n                                ),\n                                hi: BytePos(\n                                    1897,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1873,\n                                    ),\n                                    hi: BytePos(\n                                        1878,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('cover' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Paren(\n                                    ParenExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1881,\n                                            ),\n                                            hi: BytePos(\n                                                1897,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        expr: Fn(\n                                            FnExpr {\n                                                ident: None,\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1882,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1896,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1894,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1896,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                            },\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1899,\n                                ),\n                                hi: BytePos(\n                                    1926,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1899,\n                                    ),\n                                    hi: BytePos(\n                                        1905,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('xCover' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Paren(\n                                    ParenExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1908,\n                                            ),\n                                            hi: BytePos(\n                                                1926,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        expr: Seq(\n                                            SeqExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1909,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1925,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                exprs: [\n                                                    Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1909,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1910,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 0.0,\n                                                                raw: Some(\n                                                                    \"0\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                    Fn(\n                                                        FnExpr {\n                                                            ident: None,\n                                                            function: Function {\n                                                                params: [],\n                                                                decorators: [],\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1912,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1925,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                body: Some(\n                                                                    BlockStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1923,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1925,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        stmts: [],\n                                                                    },\n                                                                ),\n                                                                is_generator: false,\n                                                                is_async: false,\n                                                                type_params: None,\n                                                                return_type: None,\n                                                            },\n                                                        },\n                                                    ),\n                                                ],\n                                            },\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1932,\n                    ),\n                    hi: BytePos(\n                        1934,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1842,\n            ),\n            hi: BytePos(\n                1893,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1842,\n                    ),\n                    hi: BytePos(\n                        1888,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1844,\n                                ),\n                                hi: BytePos(\n                                    1863,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1844,\n                                    ),\n                                    hi: BytePos(\n                                        1846,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('fn' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Fn(\n                                    FnExpr {\n                                        ident: None,\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1849,\n                                                ),\n                                                hi: BytePos(\n                                                    1863,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1861,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1863,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: false,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1865,\n                                ),\n                                hi: BytePos(\n                                    1886,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1865,\n                                    ),\n                                    hi: BytePos(\n                                        1868,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('xFn' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Fn(\n                                    FnExpr {\n                                        ident: Some(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1880,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1881,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1871,\n                                                ),\n                                                hi: BytePos(\n                                                    1886,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1884,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1886,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: false,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1891,\n                    ),\n                    hi: BytePos(\n                        1893,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1866,\n            ),\n            hi: BytePos(\n                1921,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1866,\n                    ),\n                    hi: BytePos(\n                        1916,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1868,\n                                ),\n                                hi: BytePos(\n                                    1889,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1868,\n                                    ),\n                                    hi: BytePos(\n                                        1871,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('gen' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Fn(\n                                    FnExpr {\n                                        ident: None,\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1874,\n                                                ),\n                                                hi: BytePos(\n                                                    1889,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1887,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1889,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: true,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1891,\n                                ),\n                                hi: BytePos(\n                                    1914,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1891,\n                                    ),\n                                    hi: BytePos(\n                                        1895,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('xGen' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Fn(\n                                    FnExpr {\n                                        ident: Some(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1908,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1909,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1898,\n                                                ),\n                                                hi: BytePos(\n                                                    1914,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1912,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1914,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: true,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1919,\n                    ),\n                    hi: BytePos(\n                        1921,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1648,\n            ),\n            hi: BytePos(\n                1747,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1648,\n                    ),\n                    hi: BytePos(\n                        1710,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1650,\n                                ),\n                                hi: BytePos(\n                                    1663,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1650,\n                                    ),\n                                    hi: BytePos(\n                                        1651,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1654,\n                                            ),\n                                            hi: BytePos(\n                                                1663,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1654,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1661,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1665,\n                                ),\n                                hi: BytePos(\n                                    1678,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1665,\n                                    ),\n                                    hi: BytePos(\n                                        1666,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            value: Some(\n                                Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1669,\n                                            ),\n                                            hi: BytePos(\n                                                1678,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1669,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1676,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1680,\n                                ),\n                                hi: BytePos(\n                                    1693,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1680,\n                                    ),\n                                    hi: BytePos(\n                                        1681,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1684,\n                                            ),\n                                            hi: BytePos(\n                                                1693,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1684,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1691,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1695,\n                                ),\n                                hi: BytePos(\n                                    1708,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1695,\n                                    ),\n                                    hi: BytePos(\n                                        1696,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1699,\n                                            ),\n                                            hi: BytePos(\n                                                1708,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1699,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1706,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1713,\n                    ),\n                    hi: BytePos(\n                        1747,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1715,\n                                            ),\n                                            hi: BytePos(\n                                                1716,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1718,\n                                                ),\n                                                hi: BytePos(\n                                                    1722,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1724,\n                                            ),\n                                            hi: BytePos(\n                                                1725,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1727,\n                                                ),\n                                                hi: BytePos(\n                                                    1728,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 0.0,\n                                            raw: Some(\n                                                \"0\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1730,\n                                            ),\n                                            hi: BytePos(\n                                                1731,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Bool(\n                                        Bool {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1733,\n                                                ),\n                                                hi: BytePos(\n                                                    1738,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: false,\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1740,\n                                            ),\n                                            hi: BytePos(\n                                                1741,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('z' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Str(\n                                        Str {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1743,\n                                                ),\n                                                hi: BytePos(\n                                                    1745,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: Atom('' type=static),\n                                            raw: Some(\n                                                \"''\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1704,\n            ),\n            hi: BytePos(\n                1726,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1704,\n                    ),\n                    hi: BytePos(\n                        1721,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1706,\n                                ),\n                                hi: BytePos(\n                                    1719,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1706,\n                                    ),\n                                    hi: BytePos(\n                                        1707,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            value: Some(\n                                Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1710,\n                                            ),\n                                            hi: BytePos(\n                                                1719,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1710,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1717,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('thrower' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1724,\n                    ),\n                    hi: BytePos(\n                        1726,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1870,\n            ),\n            hi: BytePos(\n                1904,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1870,\n                    ),\n                    hi: BytePos(\n                        1899,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1872,\n                                ),\n                                hi: BytePos(\n                                    1897,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1872,\n                                    ),\n                                    hi: BytePos(\n                                        1873,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            value: Some(\n                                Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1876,\n                                            ),\n                                            hi: BytePos(\n                                                1897,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('unresolvableReference' type=dynamic),\n                                        optional: false,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1902,\n                    ),\n                    hi: BytePos(\n                        1904,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-id-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1535,\n            ),\n            hi: BytePos(\n                1553,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1535,\n                    ),\n                    hi: BytePos(\n                        1541,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1537,\n                                ),\n                                hi: BytePos(\n                                    1538,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1537,\n                                    ),\n                                    hi: BytePos(\n                                        1538,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            value: None,\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1544,\n                    ),\n                    hi: BytePos(\n                        1553,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1546,\n                                            ),\n                                            hi: BytePos(\n                                                1547,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1549,\n                                                ),\n                                                hi: BytePos(\n                                                    1551,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-list-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1709,\n            ),\n            hi: BytePos(\n                1751,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1709,\n                    ),\n                    hi: BytePos(\n                        1746,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1711,\n                                ),\n                                hi: BytePos(\n                                    1712,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1711,\n                                    ),\n                                    hi: BytePos(\n                                        1712,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('a' type=static),\n                                optional: false,\n                            },\n                            value: None,\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1714,\n                                ),\n                                hi: BytePos(\n                                    1727,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1714,\n                                    ),\n                                    hi: BytePos(\n                                        1715,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('b' type=static),\n                                optional: false,\n                            },\n                            value: Some(\n                                Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1718,\n                                            ),\n                                            hi: BytePos(\n                                                1727,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1718,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1725,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('thrower' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1729,\n                                ),\n                                hi: BytePos(\n                                    1744,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1729,\n                                    ),\n                                    hi: BytePos(\n                                        1730,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('c' type=inline),\n                                optional: false,\n                            },\n                            value: Some(\n                                Update(\n                                    UpdateExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1733,\n                                            ),\n                                            hi: BytePos(\n                                                1744,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        op: \"++\",\n                                        prefix: true,\n                                        arg: Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1735,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1744,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('initCount' type=dynamic),\n                                                optional: false,\n                                            },\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1749,\n                    ),\n                    hi: BytePos(\n                        1751,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-ary-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1776,\n            ),\n            hi: BytePos(\n                1809,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1776,\n                    ),\n                    hi: BytePos(\n                        1804,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1778,\n                                        ),\n                                        hi: BytePos(\n                                            1779,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1781,\n                                        ),\n                                        hi: BytePos(\n                                            1802,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Array(\n                                        ArrayPat {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1781,\n                                                ),\n                                                hi: BytePos(\n                                                    1790,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            elems: [\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1782,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1783,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1785,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1786,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1788,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1789,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                            ],\n                                            optional: false,\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Array(\n                                        ArrayLit {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1793,\n                                                ),\n                                                hi: BytePos(\n                                                    1802,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            elems: [\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1794,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1795,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1797,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1798,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1800,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1801,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1807,\n                    ),\n                    hi: BytePos(\n                        1809,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-ary-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1541,\n            ),\n            hi: BytePos(\n                1566,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1541,\n                    ),\n                    hi: BytePos(\n                        1552,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1543,\n                                        ),\n                                        hi: BytePos(\n                                            1544,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            value: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1546,\n                                        ),\n                                        hi: BytePos(\n                                            1549,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1547,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1548,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1555,\n                    ),\n                    hi: BytePos(\n                        1566,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1557,\n                                            ),\n                                            hi: BytePos(\n                                                1558,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1560,\n                                            ),\n                                            hi: BytePos(\n                                                1564,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1561,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1563,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 45.0,\n                                                                raw: Some(\n                                                                    \"45\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-ary-value-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1637,\n            ),\n            hi: BytePos(\n                1679,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1637,\n                    ),\n                    hi: BytePos(\n                        1665,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1639,\n                                        ),\n                                        hi: BytePos(\n                                            1640,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1642,\n                                        ),\n                                        hi: BytePos(\n                                            1663,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Array(\n                                        ArrayPat {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1642,\n                                                ),\n                                                hi: BytePos(\n                                                    1651,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            elems: [\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1643,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1644,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1646,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1647,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1649,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1650,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                            ],\n                                            optional: false,\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Array(\n                                        ArrayLit {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1654,\n                                                ),\n                                                hi: BytePos(\n                                                    1663,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            elems: [\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1655,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1656,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1658,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1659,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1661,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1662,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1668,\n                    ),\n                    hi: BytePos(\n                        1679,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1670,\n                                            ),\n                                            hi: BytePos(\n                                                1671,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1673,\n                                                ),\n                                                hi: BytePos(\n                                                    1677,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-ary.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1648,\n            ),\n            hi: BytePos(\n                1702,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1648,\n                    ),\n                    hi: BytePos(\n                        1676,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1650,\n                                        ),\n                                        hi: BytePos(\n                                            1651,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1653,\n                                        ),\n                                        hi: BytePos(\n                                            1674,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Array(\n                                        ArrayPat {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1653,\n                                                ),\n                                                hi: BytePos(\n                                                    1662,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            elems: [\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1654,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1655,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1657,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1658,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                                Some(\n                                                    Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1660,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1661,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                ),\n                                            ],\n                                            optional: false,\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Array(\n                                        ArrayLit {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1665,\n                                                ),\n                                                hi: BytePos(\n                                                    1674,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            elems: [\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1666,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1667,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1669,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1670,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                                Some(\n                                                    ExprOrSpread {\n                                                        spread: None,\n                                                        expr: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1672,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1673,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1679,\n                    ),\n                    hi: BytePos(\n                        1702,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1681,\n                                            ),\n                                            hi: BytePos(\n                                                1682,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1684,\n                                            ),\n                                            hi: BytePos(\n                                                1700,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1685,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1686,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 7.0,\n                                                                raw: Some(\n                                                                    \"7\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1688,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1697,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('undefined' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-eval-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1576,\n            ),\n            hi: BytePos(\n                1599,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1576,\n                    ),\n                    hi: BytePos(\n                        1594,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Computed(\n                                ComputedPropName {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1578,\n                                        ),\n                                        hi: BytePos(\n                                            1589,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Call(\n                                        CallExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1579,\n                                                ),\n                                                hi: BytePos(\n                                                    1588,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            callee: Expr(\n                                                Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1579,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1586,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('thrower' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            ),\n                                            args: [],\n                                            type_args: None,\n                                        },\n                                    ),\n                                },\n                            ),\n                            value: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1591,\n                                            ),\n                                            hi: BytePos(\n                                                1592,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1597,\n                    ),\n                    hi: BytePos(\n                        1599,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-id-get-value-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1688,\n            ),\n            hi: BytePos(\n                1740,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1688,\n                    ),\n                    hi: BytePos(\n                        1721,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1690,\n                                        ),\n                                        hi: BytePos(\n                                            1698,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('poisoned' type=dynamic),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1700,\n                                        ),\n                                        hi: BytePos(\n                                            1719,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1700,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1701,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Update(\n                                        UpdateExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1704,\n                                                ),\n                                                hi: BytePos(\n                                                    1719,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            op: \"++\",\n                                            prefix: true,\n                                            arg: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1706,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1719,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('initEvalCount' type=dynamic),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1724,\n                    ),\n                    hi: BytePos(\n                        1740,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('poisonedProperty' type=dynamic),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1634,\n            ),\n            hi: BytePos(\n                1745,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1634,\n                    ),\n                    hi: BytePos(\n                        1708,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1636,\n                                        ),\n                                        hi: BytePos(\n                                            1637,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('s' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1639,\n                                        ),\n                                        hi: BytePos(\n                                            1652,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1639,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1640,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('t' type=inline),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Call(\n                                        CallExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1643,\n                                                ),\n                                                hi: BytePos(\n                                                    1652,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            callee: Expr(\n                                                Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1643,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1650,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('counter' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            ),\n                                            args: [],\n                                            type_args: None,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1654,\n                                        ),\n                                        hi: BytePos(\n                                            1655,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('u' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1657,\n                                        ),\n                                        hi: BytePos(\n                                            1670,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1657,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1658,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('v' type=inline),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Call(\n                                        CallExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1661,\n                                                ),\n                                                hi: BytePos(\n                                                    1670,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            callee: Expr(\n                                                Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1661,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1668,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('counter' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            ),\n                                            args: [],\n                                            type_args: None,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1672,\n                                        ),\n                                        hi: BytePos(\n                                            1673,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1675,\n                                        ),\n                                        hi: BytePos(\n                                            1688,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1675,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1676,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Call(\n                                        CallExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1679,\n                                                ),\n                                                hi: BytePos(\n                                                    1688,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            callee: Expr(\n                                                Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1679,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1686,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('counter' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            ),\n                                            args: [],\n                                            type_args: None,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1690,\n                                        ),\n                                        hi: BytePos(\n                                            1691,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1693,\n                                        ),\n                                        hi: BytePos(\n                                            1706,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1693,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1694,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('z' type=inline),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Call(\n                                        CallExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1697,\n                                                ),\n                                                hi: BytePos(\n                                                    1706,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            callee: Expr(\n                                                Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1697,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1704,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('counter' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            ),\n                                            args: [],\n                                            type_args: None,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1711,\n                    ),\n                    hi: BytePos(\n                        1745,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1713,\n                                            ),\n                                            hi: BytePos(\n                                                1714,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('s' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1716,\n                                                ),\n                                                hi: BytePos(\n                                                    1720,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1722,\n                                            ),\n                                            hi: BytePos(\n                                                1723,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('u' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1725,\n                                                ),\n                                                hi: BytePos(\n                                                    1726,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 0.0,\n                                            raw: Some(\n                                                \"0\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1728,\n                                            ),\n                                            hi: BytePos(\n                                                1729,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Bool(\n                                        Bool {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1731,\n                                                ),\n                                                hi: BytePos(\n                                                    1736,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: false,\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1738,\n                                            ),\n                                            hi: BytePos(\n                                                1739,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Str(\n                                        Str {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1741,\n                                                ),\n                                                hi: BytePos(\n                                                    1743,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: Atom('' type=static),\n                                            raw: Some(\n                                                \"''\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1702,\n            ),\n            hi: BytePos(\n                1727,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1702,\n                    ),\n                    hi: BytePos(\n                        1722,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1704,\n                                        ),\n                                        hi: BytePos(\n                                            1705,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1707,\n                                        ),\n                                        hi: BytePos(\n                                            1720,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1707,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1708,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('y' type=inline),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Call(\n                                        CallExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1711,\n                                                ),\n                                                hi: BytePos(\n                                                    1720,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            callee: Expr(\n                                                Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1711,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1718,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('thrower' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            ),\n                                            args: [],\n                                            type_args: None,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1725,\n                    ),\n                    hi: BytePos(\n                        1727,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1869,\n            ),\n            hi: BytePos(\n                1906,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1869,\n                    ),\n                    hi: BytePos(\n                        1901,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1871,\n                                        ),\n                                        hi: BytePos(\n                                            1872,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1874,\n                                        ),\n                                        hi: BytePos(\n                                            1899,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1874,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1875,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('y' type=inline),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1878,\n                                                ),\n                                                hi: BytePos(\n                                                    1899,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('unresolvableReference' type=dynamic),\n                                            optional: false,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1904,\n                    ),\n                    hi: BytePos(\n                        1906,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1550,\n            ),\n            hi: BytePos(\n                1569,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1550,\n                    ),\n                    hi: BytePos(\n                        1563,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1552,\n                                        ),\n                                        hi: BytePos(\n                                            1553,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1555,\n                                        ),\n                                        hi: BytePos(\n                                            1561,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1555,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1556,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('y' type=inline),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Lit(\n                                        Num(\n                                            Number {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1559,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1561,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                value: 33.0,\n                                                raw: Some(\n                                                    \"33\",\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1566,\n                    ),\n                    hi: BytePos(\n                        1569,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-id-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1540,\n            ),\n            hi: BytePos(\n                1561,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1540,\n                    ),\n                    hi: BytePos(\n                        1549,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1542,\n                                        ),\n                                        hi: BytePos(\n                                            1543,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            value: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1545,\n                                            ),\n                                            hi: BytePos(\n                                                1546,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1552,\n                    ),\n                    hi: BytePos(\n                        1561,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1554,\n                                            ),\n                                            hi: BytePos(\n                                                1555,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1557,\n                                                ),\n                                                hi: BytePos(\n                                                    1559,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1531,\n            ),\n            hi: BytePos(\n                1551,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1531,\n                    ),\n                    hi: BytePos(\n                        1539,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1533,\n                                        ),\n                                        hi: BytePos(\n                                            1534,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            value: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1536,\n                                            ),\n                                            hi: BytePos(\n                                                1537,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1542,\n                    ),\n                    hi: BytePos(\n                        1551,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1544,\n                                            ),\n                                            hi: BytePos(\n                                                1545,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1547,\n                                                ),\n                                                hi: BytePos(\n                                                    1549,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-obj-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1777,\n            ),\n            hi: BytePos(\n                1837,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1777,\n                    ),\n                    hi: BytePos(\n                        1818,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1779,\n                                        ),\n                                        hi: BytePos(\n                                            1780,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1782,\n                                        ),\n                                        hi: BytePos(\n                                            1816,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Object(\n                                        ObjectPat {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1782,\n                                                ),\n                                                hi: BytePos(\n                                                    1793,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            props: [\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1784,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1785,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1784,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1785,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1787,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1788,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1787,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1788,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1790,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1791,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1790,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1791,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                            ],\n                                            optional: false,\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Object(\n                                        ObjectLit {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1796,\n                                                ),\n                                                hi: BytePos(\n                                                    1816,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            props: [\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1798,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1799,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('x' type=static),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1801,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1802,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 4.0,\n                                                                        raw: Some(\n                                                                            \"4\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1804,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1805,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('y' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1807,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1808,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 5.0,\n                                                                        raw: Some(\n                                                                            \"5\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1810,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1811,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('z' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1813,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1814,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 6.0,\n                                                                        raw: Some(\n                                                                            \"6\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1821,\n                    ),\n                    hi: BytePos(\n                        1837,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1823,\n                                            ),\n                                            hi: BytePos(\n                                                1824,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1826,\n                                            ),\n                                            hi: BytePos(\n                                                1835,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('undefined' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-obj-value-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1638,\n            ),\n            hi: BytePos(\n                1693,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1638,\n                    ),\n                    hi: BytePos(\n                        1679,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1640,\n                                        ),\n                                        hi: BytePos(\n                                            1641,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1643,\n                                        ),\n                                        hi: BytePos(\n                                            1677,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Object(\n                                        ObjectPat {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1643,\n                                                ),\n                                                hi: BytePos(\n                                                    1654,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            props: [\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1645,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1646,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1645,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1646,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1648,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1649,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1648,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1649,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1651,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1652,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1651,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1652,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                            ],\n                                            optional: false,\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Object(\n                                        ObjectLit {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1657,\n                                                ),\n                                                hi: BytePos(\n                                                    1677,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            props: [\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1659,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1660,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('x' type=static),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1662,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1663,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 4.0,\n                                                                        raw: Some(\n                                                                            \"4\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1665,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1666,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('y' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1668,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1669,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 5.0,\n                                                                        raw: Some(\n                                                                            \"5\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1671,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1672,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('z' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1674,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1675,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 6.0,\n                                                                        raw: Some(\n                                                                            \"6\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1682,\n                    ),\n                    hi: BytePos(\n                        1693,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1684,\n                                            ),\n                                            hi: BytePos(\n                                                1685,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1687,\n                                                ),\n                                                hi: BytePos(\n                                                    1691,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-obj-value-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1639,\n            ),\n            hi: BytePos(\n                1675,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1639,\n                    ),\n                    hi: BytePos(\n                        1669,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1641,\n                                        ),\n                                        hi: BytePos(\n                                            1642,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1644,\n                                        ),\n                                        hi: BytePos(\n                                            1667,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Object(\n                                        ObjectPat {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1644,\n                                                ),\n                                                hi: BytePos(\n                                                    1655,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            props: [\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1646,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1647,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1646,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1647,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1649,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1650,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1649,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1650,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1652,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1653,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1652,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1653,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                            ],\n                                            optional: false,\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1658,\n                                                ),\n                                                hi: BytePos(\n                                                    1667,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('undefined' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1672,\n                    ),\n                    hi: BytePos(\n                        1675,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-prop-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1649,\n            ),\n            hi: BytePos(\n                1722,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1649,\n                    ),\n                    hi: BytePos(\n                        1690,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    KeyValue(\n                        KeyValuePatProp {\n                            key: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1651,\n                                        ),\n                                        hi: BytePos(\n                                            1652,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('w' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                            value: Assign(\n                                AssignPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1654,\n                                        ),\n                                        hi: BytePos(\n                                            1688,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    left: Object(\n                                        ObjectPat {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1654,\n                                                ),\n                                                hi: BytePos(\n                                                    1665,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            props: [\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1656,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1657,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1656,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1657,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1659,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1660,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1659,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1660,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                                Assign(\n                                                    AssignPatProp {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1662,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1663,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        key: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1662,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1663,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        value: None,\n                                                    },\n                                                ),\n                                            ],\n                                            optional: false,\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    right: Object(\n                                        ObjectLit {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1668,\n                                                ),\n                                                hi: BytePos(\n                                                    1688,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            props: [\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1670,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1671,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('x' type=static),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1673,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1674,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 4.0,\n                                                                        raw: Some(\n                                                                            \"4\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1676,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1677,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('y' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1679,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1680,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 5.0,\n                                                                        raw: Some(\n                                                                            \"5\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Prop(\n                                                    KeyValue(\n                                                        KeyValueProp {\n                                                            key: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1682,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1683,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('z' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            value: Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1685,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1686,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 6.0,\n                                                                        raw: Some(\n                                                                            \"6\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1693,\n                    ),\n                    hi: BytePos(\n                        1722,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1695,\n                                            ),\n                                            hi: BytePos(\n                                                1696,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1698,\n                                            ),\n                                            hi: BytePos(\n                                                1720,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1700,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1701,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1703,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1712,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('undefined' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1714,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1715,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1717,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1718,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 7.0,\n                                                                    raw: Some(\n                                                                        \"7\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-rest-getter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1425,\n            ),\n            hi: BytePos(\n                1468,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1425,\n                    ),\n                    hi: BytePos(\n                        1431,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1426,\n                                ),\n                                hi: BytePos(\n                                    1430,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1426,\n                                ),\n                                hi: BytePos(\n                                    1429,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1429,\n                                            ),\n                                            hi: BytePos(\n                                                1430,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1434,\n                    ),\n                    hi: BytePos(\n                        1468,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        Getter(\n                            GetterProp {\n                                span: Span {\n                                    lo: BytePos(\n                                        1436,\n                                    ),\n                                    hi: BytePos(\n                                        1466,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1440,\n                                            ),\n                                            hi: BytePos(\n                                                1441,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('v' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                type_ann: None,\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1444,\n                                            ),\n                                            hi: BytePos(\n                                                1466,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [\n                                            Expr(\n                                                ExprStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1446,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1454,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    expr: Update(\n                                                        UpdateExpr {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1446,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1453,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            op: \"++\",\n                                                            prefix: false,\n                                                            arg: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1446,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1451,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('count' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            Return(\n                                                ReturnStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1455,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1464,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Some(\n                                                        Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1462,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1463,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 2.0,\n                                                                    raw: Some(\n                                                                        \"2\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1497,\n            ),\n            hi: BytePos(\n                1510,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1497,\n                    ),\n                    hi: BytePos(\n                        1506,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1498,\n                                ),\n                                hi: BytePos(\n                                    1505,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1498,\n                                ),\n                                hi: BytePos(\n                                    1501,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1501,\n                                            ),\n                                            hi: BytePos(\n                                                1505,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('rest' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1509,\n                    ),\n                    hi: BytePos(\n                        1510,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('o' type=inline),\n                optional: false,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/dflt-obj-ptrn-rest-val-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1388,\n            ),\n            hi: BytePos(\n                1430,\n            ),\n            ctxt: #0,\n        },\n        left: Object(\n            ObjectPat {\n                span: Span {\n                    lo: BytePos(\n                        1388,\n                    ),\n                    hi: BytePos(\n                        1403,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1389,\n                                ),\n                                hi: BytePos(\n                                    1390,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1389,\n                                    ),\n                                    hi: BytePos(\n                                        1390,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('a' type=static),\n                                optional: false,\n                            },\n                            value: None,\n                        },\n                    ),\n                    Assign(\n                        AssignPatProp {\n                            span: Span {\n                                lo: BytePos(\n                                    1392,\n                                ),\n                                hi: BytePos(\n                                    1393,\n                                ),\n                                ctxt: #0,\n                            },\n                            key: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1392,\n                                    ),\n                                    hi: BytePos(\n                                        1393,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('b' type=static),\n                                optional: false,\n                            },\n                            value: None,\n                        },\n                    ),\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1395,\n                                ),\n                                hi: BytePos(\n                                    1402,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1395,\n                                ),\n                                hi: BytePos(\n                                    1398,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1398,\n                                            ),\n                                            hi: BytePos(\n                                                1402,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('rest' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        right: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1406,\n                    ),\n                    hi: BytePos(\n                        1430,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1407,\n                                            ),\n                                            hi: BytePos(\n                                                1408,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1410,\n                                                ),\n                                                hi: BytePos(\n                                                    1411,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 1.0,\n                                            raw: Some(\n                                                \"1\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1413,\n                                            ),\n                                            hi: BytePos(\n                                                1414,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1416,\n                                                ),\n                                                hi: BytePos(\n                                                    1417,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 2.0,\n                                            raw: Some(\n                                                \"2\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1419,\n                                            ),\n                                            hi: BytePos(\n                                                1420,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('a' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1422,\n                                                ),\n                                                hi: BytePos(\n                                                    1423,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 5.0,\n                                            raw: Some(\n                                                \"5\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1425,\n                                            ),\n                                            hi: BytePos(\n                                                1426,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('b' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1428,\n                                                ),\n                                                hi: BytePos(\n                                                    1429,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 3.0,\n                                            raw: Some(\n                                                \"3\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-init-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1417,\n            ),\n            hi: BytePos(\n                1419,\n            ),\n            ctxt: #0,\n        },\n        props: [],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-init-undefined.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1427,\n            ),\n            hi: BytePos(\n                1429,\n            ),\n            ctxt: #0,\n        },\n        props: [],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-empty.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1549,\n            ),\n            hi: BytePos(\n                1551,\n            ),\n            ctxt: #0,\n        },\n        props: [],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-get-value-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1631,\n            ),\n            hi: BytePos(\n                1643,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1633,\n                        ),\n                        hi: BytePos(\n                            1641,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1633,\n                            ),\n                            hi: BytePos(\n                                1641,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('poisoned' type=dynamic),\n                        optional: false,\n                    },\n                    value: None,\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-arrow.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1796,\n            ),\n            hi: BytePos(\n                1816,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1798,\n                        ),\n                        hi: BytePos(\n                            1814,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1798,\n                            ),\n                            hi: BytePos(\n                                1803,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('arrow' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Arrow(\n                            ArrowExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1806,\n                                    ),\n                                    hi: BytePos(\n                                        1814,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                params: [],\n                                body: BlockStmt(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1812,\n                                            ),\n                                            hi: BytePos(\n                                                1814,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [],\n                                    },\n                                ),\n                                is_async: false,\n                                is_generator: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1800,\n            ),\n            hi: BytePos(\n                1873,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1802,\n                        ),\n                        hi: BytePos(\n                            1816,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1802,\n                            ),\n                            hi: BytePos(\n                                1805,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('cls' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Class(\n                            ClassExpr {\n                                ident: None,\n                                class: Class {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1808,\n                                        ),\n                                        hi: BytePos(\n                                            1816,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    decorators: [],\n                                    body: [],\n                                    super_class: None,\n                                    is_abstract: false,\n                                    type_params: None,\n                                    super_type_params: None,\n                                    implements: [],\n                                },\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1818,\n                        ),\n                        hi: BytePos(\n                            1835,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1818,\n                            ),\n                            hi: BytePos(\n                                1822,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('xCls' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Class(\n                            ClassExpr {\n                                ident: Some(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1831,\n                                            ),\n                                            hi: BytePos(\n                                                1832,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('X' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                class: Class {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1825,\n                                        ),\n                                        hi: BytePos(\n                                            1835,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    decorators: [],\n                                    body: [],\n                                    super_class: None,\n                                    is_abstract: false,\n                                    type_params: None,\n                                    super_type_params: None,\n                                    implements: [],\n                                },\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1837,\n                        ),\n                        hi: BytePos(\n                            1871,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1837,\n                            ),\n                            hi: BytePos(\n                                1842,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('xCls2' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Class(\n                            ClassExpr {\n                                ident: None,\n                                class: Class {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1845,\n                                        ),\n                                        hi: BytePos(\n                                            1871,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    decorators: [],\n                                    body: [\n                                        Method(\n                                            ClassMethod {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1853,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1869,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1860,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1864,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('name' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1853,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1869,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1867,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1869,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                                kind: Method,\n                                                is_static: true,\n                                                accessibility: None,\n                                                is_abstract: false,\n                                                is_optional: false,\n                                                is_override: false,\n                                            },\n                                        ),\n                                    ],\n                                    super_class: None,\n                                    is_abstract: false,\n                                    type_params: None,\n                                    super_type_params: None,\n                                    implements: [],\n                                },\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1826,\n            ),\n            hi: BytePos(\n                1884,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1828,\n                        ),\n                        hi: BytePos(\n                            1852,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1828,\n                            ),\n                            hi: BytePos(\n                                1833,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('cover' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Paren(\n                            ParenExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1836,\n                                    ),\n                                    hi: BytePos(\n                                        1852,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                expr: Fn(\n                                    FnExpr {\n                                        ident: None,\n                                        function: Function {\n                                            params: [],\n                                            decorators: [],\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1837,\n                                                ),\n                                                hi: BytePos(\n                                                    1851,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            body: Some(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1849,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1851,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [],\n                                                },\n                                            ),\n                                            is_generator: false,\n                                            is_async: false,\n                                            type_params: None,\n                                            return_type: None,\n                                        },\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1854,\n                        ),\n                        hi: BytePos(\n                            1881,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1854,\n                            ),\n                            hi: BytePos(\n                                1860,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('xCover' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Paren(\n                            ParenExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1863,\n                                    ),\n                                    hi: BytePos(\n                                        1881,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                expr: Seq(\n                                    SeqExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1864,\n                                            ),\n                                            hi: BytePos(\n                                                1880,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        exprs: [\n                                            Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1864,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1865,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 0.0,\n                                                        raw: Some(\n                                                            \"0\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Fn(\n                                                FnExpr {\n                                                    ident: None,\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1867,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1880,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1878,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1880,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1797,\n            ),\n            hi: BytePos(\n                1843,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1799,\n                        ),\n                        hi: BytePos(\n                            1818,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1799,\n                            ),\n                            hi: BytePos(\n                                1801,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('fn' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Fn(\n                            FnExpr {\n                                ident: None,\n                                function: Function {\n                                    params: [],\n                                    decorators: [],\n                                    span: Span {\n                                        lo: BytePos(\n                                            1804,\n                                        ),\n                                        hi: BytePos(\n                                            1818,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    body: Some(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1816,\n                                                ),\n                                                hi: BytePos(\n                                                    1818,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_generator: false,\n                                    is_async: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1820,\n                        ),\n                        hi: BytePos(\n                            1841,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1820,\n                            ),\n                            hi: BytePos(\n                                1823,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('xFn' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Fn(\n                            FnExpr {\n                                ident: Some(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1835,\n                                            ),\n                                            hi: BytePos(\n                                                1836,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                function: Function {\n                                    params: [],\n                                    decorators: [],\n                                    span: Span {\n                                        lo: BytePos(\n                                            1826,\n                                        ),\n                                        hi: BytePos(\n                                            1841,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    body: Some(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1839,\n                                                ),\n                                                hi: BytePos(\n                                                    1841,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_generator: false,\n                                    is_async: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1821,\n            ),\n            hi: BytePos(\n                1871,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1823,\n                        ),\n                        hi: BytePos(\n                            1844,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1823,\n                            ),\n                            hi: BytePos(\n                                1826,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('gen' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Fn(\n                            FnExpr {\n                                ident: None,\n                                function: Function {\n                                    params: [],\n                                    decorators: [],\n                                    span: Span {\n                                        lo: BytePos(\n                                            1829,\n                                        ),\n                                        hi: BytePos(\n                                            1844,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    body: Some(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1842,\n                                                ),\n                                                hi: BytePos(\n                                                    1844,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_generator: true,\n                                    is_async: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1846,\n                        ),\n                        hi: BytePos(\n                            1869,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1846,\n                            ),\n                            hi: BytePos(\n                                1850,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('xGen' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Fn(\n                            FnExpr {\n                                ident: Some(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1863,\n                                            ),\n                                            hi: BytePos(\n                                                1864,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                function: Function {\n                                    params: [],\n                                    decorators: [],\n                                    span: Span {\n                                        lo: BytePos(\n                                            1853,\n                                        ),\n                                        hi: BytePos(\n                                            1869,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    body: Some(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1867,\n                                                ),\n                                                hi: BytePos(\n                                                    1869,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_generator: true,\n                                    is_async: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1603,\n            ),\n            hi: BytePos(\n                1665,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1605,\n                        ),\n                        hi: BytePos(\n                            1618,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1605,\n                            ),\n                            hi: BytePos(\n                                1606,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('w' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1609,\n                                    ),\n                                    hi: BytePos(\n                                        1618,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1609,\n                                                ),\n                                                hi: BytePos(\n                                                    1616,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('counter' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1620,\n                        ),\n                        hi: BytePos(\n                            1633,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1620,\n                            ),\n                            hi: BytePos(\n                                1621,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('x' type=static),\n                        optional: false,\n                    },\n                    value: Some(\n                        Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1624,\n                                    ),\n                                    hi: BytePos(\n                                        1633,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1624,\n                                                ),\n                                                hi: BytePos(\n                                                    1631,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('counter' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1635,\n                        ),\n                        hi: BytePos(\n                            1648,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1635,\n                            ),\n                            hi: BytePos(\n                                1636,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('y' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1639,\n                                    ),\n                                    hi: BytePos(\n                                        1648,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1639,\n                                                ),\n                                                hi: BytePos(\n                                                    1646,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('counter' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1650,\n                        ),\n                        hi: BytePos(\n                            1663,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1650,\n                            ),\n                            hi: BytePos(\n                                1651,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('z' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1654,\n                                    ),\n                                    hi: BytePos(\n                                        1663,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1654,\n                                                ),\n                                                hi: BytePos(\n                                                    1661,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('counter' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1659,\n            ),\n            hi: BytePos(\n                1676,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1661,\n                        ),\n                        hi: BytePos(\n                            1674,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1661,\n                            ),\n                            hi: BytePos(\n                                1662,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('x' type=static),\n                        optional: false,\n                    },\n                    value: Some(\n                        Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1665,\n                                    ),\n                                    hi: BytePos(\n                                        1674,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1665,\n                                                ),\n                                                hi: BytePos(\n                                                    1672,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('thrower' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1825,\n            ),\n            hi: BytePos(\n                1854,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1827,\n                        ),\n                        hi: BytePos(\n                            1852,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1827,\n                            ),\n                            hi: BytePos(\n                                1828,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('x' type=static),\n                        optional: false,\n                    },\n                    value: Some(\n                        Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1831,\n                                    ),\n                                    hi: BytePos(\n                                        1852,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('unresolvableReference' type=dynamic),\n                                optional: false,\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-id-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1490,\n            ),\n            hi: BytePos(\n                1496,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1492,\n                        ),\n                        hi: BytePos(\n                            1493,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1492,\n                            ),\n                            hi: BytePos(\n                                1493,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('x' type=static),\n                        optional: false,\n                    },\n                    value: None,\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-list-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1664,\n            ),\n            hi: BytePos(\n                1701,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1666,\n                        ),\n                        hi: BytePos(\n                            1667,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1666,\n                            ),\n                            hi: BytePos(\n                                1667,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('a' type=static),\n                        optional: false,\n                    },\n                    value: None,\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1669,\n                        ),\n                        hi: BytePos(\n                            1682,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1669,\n                            ),\n                            hi: BytePos(\n                                1670,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('b' type=static),\n                        optional: false,\n                    },\n                    value: Some(\n                        Call(\n                            CallExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1673,\n                                    ),\n                                    hi: BytePos(\n                                        1682,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                callee: Expr(\n                                    Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1673,\n                                                ),\n                                                hi: BytePos(\n                                                    1680,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('thrower' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                ),\n                                args: [],\n                                type_args: None,\n                            },\n                        ),\n                    ),\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1684,\n                        ),\n                        hi: BytePos(\n                            1699,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1684,\n                            ),\n                            hi: BytePos(\n                                1685,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('c' type=inline),\n                        optional: false,\n                    },\n                    value: Some(\n                        Update(\n                            UpdateExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        1688,\n                                    ),\n                                    hi: BytePos(\n                                        1699,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                op: \"++\",\n                                prefix: true,\n                                arg: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1690,\n                                            ),\n                                            hi: BytePos(\n                                                1699,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('initCount' type=dynamic),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-ary-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1731,\n            ),\n            hi: BytePos(\n                1759,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1733,\n                                ),\n                                hi: BytePos(\n                                    1734,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1736,\n                                ),\n                                hi: BytePos(\n                                    1757,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1736,\n                                        ),\n                                        hi: BytePos(\n                                            1745,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1737,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1738,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1740,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1741,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1743,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1744,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1748,\n                                        ),\n                                        hi: BytePos(\n                                            1757,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1749,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1750,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 4.0,\n                                                            raw: Some(\n                                                                \"4\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1752,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1753,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 5.0,\n                                                            raw: Some(\n                                                                \"5\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1755,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1756,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 6.0,\n                                                            raw: Some(\n                                                                \"6\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-ary-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1496,\n            ),\n            hi: BytePos(\n                1507,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1498,\n                                ),\n                                hi: BytePos(\n                                    1499,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Array(\n                        ArrayPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1501,\n                                ),\n                                hi: BytePos(\n                                    1504,\n                                ),\n                                ctxt: #0,\n                            },\n                            elems: [\n                                Some(\n                                    Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1502,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1503,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('y' type=inline),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                ),\n                            ],\n                            optional: false,\n                            type_ann: None,\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-ary-value-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1592,\n            ),\n            hi: BytePos(\n                1620,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1594,\n                                ),\n                                hi: BytePos(\n                                    1595,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1597,\n                                ),\n                                hi: BytePos(\n                                    1618,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1597,\n                                        ),\n                                        hi: BytePos(\n                                            1606,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1598,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1599,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1601,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1602,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1604,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1605,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1609,\n                                        ),\n                                        hi: BytePos(\n                                            1618,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1610,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1611,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 4.0,\n                                                            raw: Some(\n                                                                \"4\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1613,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1614,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 5.0,\n                                                            raw: Some(\n                                                                \"5\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1616,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1617,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 6.0,\n                                                            raw: Some(\n                                                                \"6\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-ary.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1603,\n            ),\n            hi: BytePos(\n                1631,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1605,\n                                ),\n                                hi: BytePos(\n                                    1606,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1608,\n                                ),\n                                hi: BytePos(\n                                    1629,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1608,\n                                        ),\n                                        hi: BytePos(\n                                            1617,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1609,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1610,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1612,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1613,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1615,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1616,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1620,\n                                        ),\n                                        hi: BytePos(\n                                            1629,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1621,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1622,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 4.0,\n                                                            raw: Some(\n                                                                \"4\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1624,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1625,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 5.0,\n                                                            raw: Some(\n                                                                \"5\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1627,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1628,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 6.0,\n                                                            raw: Some(\n                                                                \"6\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-eval-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1531,\n            ),\n            hi: BytePos(\n                1549,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Computed(\n                        ComputedPropName {\n                            span: Span {\n                                lo: BytePos(\n                                    1533,\n                                ),\n                                hi: BytePos(\n                                    1544,\n                                ),\n                                ctxt: #0,\n                            },\n                            expr: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1534,\n                                        ),\n                                        hi: BytePos(\n                                            1543,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1534,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1541,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('thrower' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                    value: Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1546,\n                                    ),\n                                    hi: BytePos(\n                                        1547,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-id-get-value-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1643,\n            ),\n            hi: BytePos(\n                1676,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1645,\n                                ),\n                                hi: BytePos(\n                                    1653,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('poisoned' type=dynamic),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1655,\n                                ),\n                                hi: BytePos(\n                                    1674,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1655,\n                                            ),\n                                            hi: BytePos(\n                                                1656,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Update(\n                                UpdateExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1659,\n                                        ),\n                                        hi: BytePos(\n                                            1674,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"++\",\n                                    prefix: true,\n                                    arg: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1661,\n                                                ),\n                                                hi: BytePos(\n                                                    1674,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('initEvalCount' type=dynamic),\n                                            optional: false,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1589,\n            ),\n            hi: BytePos(\n                1663,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1591,\n                                ),\n                                hi: BytePos(\n                                    1592,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('s' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1594,\n                                ),\n                                hi: BytePos(\n                                    1607,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1594,\n                                            ),\n                                            hi: BytePos(\n                                                1595,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('t' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1598,\n                                        ),\n                                        hi: BytePos(\n                                            1607,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1598,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1605,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1609,\n                                ),\n                                hi: BytePos(\n                                    1610,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('u' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1612,\n                                ),\n                                hi: BytePos(\n                                    1625,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1612,\n                                            ),\n                                            hi: BytePos(\n                                                1613,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('v' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1616,\n                                        ),\n                                        hi: BytePos(\n                                            1625,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1616,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1623,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1627,\n                                ),\n                                hi: BytePos(\n                                    1628,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1630,\n                                ),\n                                hi: BytePos(\n                                    1643,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1630,\n                                            ),\n                                            hi: BytePos(\n                                                1631,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1634,\n                                        ),\n                                        hi: BytePos(\n                                            1643,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1634,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1641,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1645,\n                                ),\n                                hi: BytePos(\n                                    1646,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1648,\n                                ),\n                                hi: BytePos(\n                                    1661,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1648,\n                                            ),\n                                            hi: BytePos(\n                                                1649,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('z' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1652,\n                                        ),\n                                        hi: BytePos(\n                                            1661,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1652,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1659,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1657,\n            ),\n            hi: BytePos(\n                1677,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1659,\n                                ),\n                                hi: BytePos(\n                                    1660,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1662,\n                                ),\n                                hi: BytePos(\n                                    1675,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1662,\n                                            ),\n                                            hi: BytePos(\n                                                1663,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1666,\n                                        ),\n                                        hi: BytePos(\n                                            1675,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1666,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1673,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('thrower' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1824,\n            ),\n            hi: BytePos(\n                1856,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1826,\n                                ),\n                                hi: BytePos(\n                                    1827,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1829,\n                                ),\n                                hi: BytePos(\n                                    1854,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1829,\n                                            ),\n                                            hi: BytePos(\n                                                1830,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1833,\n                                        ),\n                                        hi: BytePos(\n                                            1854,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('unresolvableReference' type=dynamic),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1505,\n            ),\n            hi: BytePos(\n                1518,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1507,\n                                ),\n                                hi: BytePos(\n                                    1508,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1510,\n                                ),\n                                hi: BytePos(\n                                    1516,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1510,\n                                            ),\n                                            hi: BytePos(\n                                                1511,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1514,\n                                            ),\n                                            hi: BytePos(\n                                                1516,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 33.0,\n                                        raw: Some(\n                                            \"33\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-id-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1495,\n            ),\n            hi: BytePos(\n                1504,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1497,\n                                ),\n                                hi: BytePos(\n                                    1498,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1500,\n                                    ),\n                                    hi: BytePos(\n                                        1501,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1486,\n            ),\n            hi: BytePos(\n                1494,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1488,\n                                ),\n                                hi: BytePos(\n                                    1489,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1491,\n                                    ),\n                                    hi: BytePos(\n                                        1492,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-obj-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1732,\n            ),\n            hi: BytePos(\n                1773,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1734,\n                                ),\n                                hi: BytePos(\n                                    1735,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1737,\n                                ),\n                                hi: BytePos(\n                                    1771,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1737,\n                                        ),\n                                        hi: BytePos(\n                                            1748,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1739,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1740,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1739,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1740,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1742,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1743,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1742,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1743,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1745,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1746,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1745,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1746,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1751,\n                                        ),\n                                        hi: BytePos(\n                                            1771,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1753,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1754,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1756,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1757,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1759,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1760,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1762,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1763,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1765,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1766,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1768,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1769,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-obj-value-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1593,\n            ),\n            hi: BytePos(\n                1634,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1595,\n                                ),\n                                hi: BytePos(\n                                    1596,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1598,\n                                ),\n                                hi: BytePos(\n                                    1632,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1598,\n                                        ),\n                                        hi: BytePos(\n                                            1609,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1600,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1601,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1600,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1601,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1603,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1604,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1603,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1604,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1606,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1607,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1606,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1607,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1612,\n                                        ),\n                                        hi: BytePos(\n                                            1632,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1614,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1615,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1617,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1618,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1620,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1621,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1623,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1624,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1626,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1627,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1629,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1630,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-obj-value-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1594,\n            ),\n            hi: BytePos(\n                1624,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1596,\n                                ),\n                                hi: BytePos(\n                                    1597,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1599,\n                                ),\n                                hi: BytePos(\n                                    1622,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1599,\n                                        ),\n                                        hi: BytePos(\n                                            1610,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1601,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1602,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1601,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1602,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1604,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1605,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1604,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1605,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1607,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1608,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1607,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1608,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1613,\n                                        ),\n                                        hi: BytePos(\n                                            1622,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('undefined' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-prop-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1604,\n            ),\n            hi: BytePos(\n                1645,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1606,\n                                ),\n                                hi: BytePos(\n                                    1607,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1609,\n                                ),\n                                hi: BytePos(\n                                    1643,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1609,\n                                        ),\n                                        hi: BytePos(\n                                            1620,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1611,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1612,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1611,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1612,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1614,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1615,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1614,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1615,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1617,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1618,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1617,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1618,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1623,\n                                        ),\n                                        hi: BytePos(\n                                            1643,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1625,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1626,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1628,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1629,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1631,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1632,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1634,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1635,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1637,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1638,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1640,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1641,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-rest-getter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1380,\n            ),\n            hi: BytePos(\n                1386,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Rest(\n                RestPat {\n                    span: Span {\n                        lo: BytePos(\n                            1381,\n                        ),\n                        hi: BytePos(\n                            1385,\n                        ),\n                        ctxt: #0,\n                    },\n                    dot3_token: Span {\n                        lo: BytePos(\n                            1381,\n                        ),\n                        hi: BytePos(\n                            1384,\n                        ),\n                        ctxt: #0,\n                    },\n                    arg: Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1384,\n                                    ),\n                                    hi: BytePos(\n                                        1385,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                    type_ann: None,\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-rest-skip-non-enumerable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1452,\n            ),\n            hi: BytePos(\n                1461,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Rest(\n                RestPat {\n                    span: Span {\n                        lo: BytePos(\n                            1453,\n                        ),\n                        hi: BytePos(\n                            1460,\n                        ),\n                        ctxt: #0,\n                    },\n                    dot3_token: Span {\n                        lo: BytePos(\n                            1453,\n                        ),\n                        hi: BytePos(\n                            1456,\n                        ),\n                        ctxt: #0,\n                    },\n                    arg: Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1456,\n                                    ),\n                                    hi: BytePos(\n                                        1460,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('rest' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                    type_ann: None,\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/dstr/obj-ptrn-rest-val-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                1343,\n            ),\n            hi: BytePos(\n                1358,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1344,\n                        ),\n                        hi: BytePos(\n                            1345,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1344,\n                            ),\n                            hi: BytePos(\n                                1345,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('a' type=static),\n                        optional: false,\n                    },\n                    value: None,\n                },\n            ),\n            Assign(\n                AssignPatProp {\n                    span: Span {\n                        lo: BytePos(\n                            1347,\n                        ),\n                        hi: BytePos(\n                            1348,\n                        ),\n                        ctxt: #0,\n                    },\n                    key: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1347,\n                            ),\n                            hi: BytePos(\n                                1348,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('b' type=static),\n                        optional: false,\n                    },\n                    value: None,\n                },\n            ),\n            Rest(\n                RestPat {\n                    span: Span {\n                        lo: BytePos(\n                            1350,\n                        ),\n                        hi: BytePos(\n                            1357,\n                        ),\n                        ctxt: #0,\n                    },\n                    dot3_token: Span {\n                        lo: BytePos(\n                            1350,\n                        ),\n                        hi: BytePos(\n                            1353,\n                        ),\n                        ctxt: #0,\n                    },\n                    arg: Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1353,\n                                    ),\n                                    hi: BytePos(\n                                        1357,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('rest' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                    type_ann: None,\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/early-body-super-call.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                415,\n            ),\n            hi: BytePos(\n                443,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                415,\n                            ),\n                            hi: BytePos(\n                                416,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                418,\n                            ),\n                            hi: BytePos(\n                                443,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        429,\n                                    ),\n                                    hi: BytePos(\n                                        443,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [\n                                    Expr(\n                                        ExprStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    433,\n                                                ),\n                                                hi: BytePos(\n                                                    441,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            expr: Call(\n                                                CallExpr {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            433,\n                                                        ),\n                                                        hi: BytePos(\n                                                            440,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    callee: Super(\n                                                        Super {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    433,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    438,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                        },\n                                                    ),\n                                                    args: [],\n                                                    type_args: None,\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                ],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/expressions/function/early-body-super-prop.js","error":null}
{"file_path":"test/language/expressions/function/early-errors/invalid-names-call-expression-bad-reference.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: PrivateName(\n    PrivateName {\n        span: Span {\n            lo: BytePos(\n                1237,\n            ),\n            hi: BytePos(\n                1239,\n            ),\n            ctxt: #0,\n        },\n        id: Ident {\n            span: Span {\n                lo: BytePos(\n                    1238,\n                ),\n                hi: BytePos(\n                    1239,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('x' type=static),\n            optional: false,\n        },\n    },\n)"}}
{"file_path":"test/language/expressions/function/early-errors/invalid-names-call-expression-this.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: PrivateName(\n    PrivateName {\n        span: Span {\n            lo: BytePos(\n                1231,\n            ),\n            hi: BytePos(\n                1233,\n            ),\n            ctxt: #0,\n        },\n        id: Ident {\n            span: Span {\n                lo: BytePos(\n                    1232,\n                ),\n                hi: BytePos(\n                    1233,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('x' type=static),\n            optional: false,\n        },\n    },\n)"}}
{"file_path":"test/language/expressions/function/early-errors/invalid-names-member-expression-bad-reference.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: PrivateName(\n    PrivateName {\n        span: Span {\n            lo: BytePos(\n                1238,\n            ),\n            hi: BytePos(\n                1240,\n            ),\n            ctxt: #0,\n        },\n        id: Ident {\n            span: Span {\n                lo: BytePos(\n                    1239,\n                ),\n                hi: BytePos(\n                    1240,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('x' type=static),\n            optional: false,\n        },\n    },\n)"}}
{"file_path":"test/language/expressions/function/early-errors/invalid-names-member-expression-this.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: PrivateName(\n    PrivateName {\n        span: Span {\n            lo: BytePos(\n                1225,\n            ),\n            hi: BytePos(\n                1227,\n            ),\n            ctxt: #0,\n        },\n        id: Ident {\n            span: Span {\n                lo: BytePos(\n                    1226,\n                ),\n                hi: BytePos(\n                    1227,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('x' type=static),\n            optional: false,\n        },\n    },\n)"}}
{"file_path":"test/language/expressions/function/early-params-super-call.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                429,\n            ),\n            hi: BytePos(\n                456,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                429,\n                            ),\n                            hi: BytePos(\n                                430,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        441,\n                                    ),\n                                    hi: BytePos(\n                                        452,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Assign(\n                                    AssignPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                441,\n                                            ),\n                                            hi: BytePos(\n                                                452,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        left: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            441,\n                                                        ),\n                                                        hi: BytePos(\n                                                            442,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        right: Call(\n                                            CallExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        445,\n                                                    ),\n                                                    hi: BytePos(\n                                                        452,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                callee: Super(\n                                                    Super {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                445,\n                                                            ),\n                                                            hi: BytePos(\n                                                                450,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                    },\n                                                ),\n                                                args: [],\n                                                type_args: None,\n                                            },\n                                        ),\n                                    },\n                                ),\n                            },\n                        ],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                432,\n                            ),\n                            hi: BytePos(\n                                456,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        454,\n                                    ),\n                                    hi: BytePos(\n                                        456,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/expressions/function/early-params-super-prop.js","error":null}
{"file_path":"test/language/expressions/function/eval-var-scope-syntax-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1572,\n            ),\n            hi: BytePos(\n                1594,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1572,\n                        ),\n                        hi: BytePos(\n                            1573,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('a' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Call(\n            CallExpr {\n                span: Span {\n                    lo: BytePos(\n                        1576,\n                    ),\n                    hi: BytePos(\n                        1594,\n                    ),\n                    ctxt: #0,\n                },\n                callee: Expr(\n                    Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1576,\n                                ),\n                                hi: BytePos(\n                                    1580,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('eval' type=static),\n                            optional: false,\n                        },\n                    ),\n                ),\n                args: [\n                    ExprOrSpread {\n                        spread: None,\n                        expr: Lit(\n                            Str(\n                                Str {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1581,\n                                        ),\n                                        hi: BytePos(\n                                            1593,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: Atom('var a = 42' type=dynamic),\n                                    raw: Some(\n                                        \"\\\"var a = 42\\\"\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ],\n                type_args: None,\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/forbidden-ext/b1/func-expr-strict-forbidden-ext-direct-access-prop-arguments.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/forbidden-ext/b1/func-expr-strict-forbidden-ext-direct-access-prop-caller.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/forbidden-ext/b2/func-expr-forbidden-ext-indirect-access-own-prop-caller-get.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/forbidden-ext/b2/func-expr-forbidden-ext-indirect-access-own-prop-caller-value.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/forbidden-ext/b2/func-expr-forbidden-ext-indirect-access-prop-caller.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/length-dflt.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1054,\n            ),\n            hi: BytePos(\n                1060,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1054,\n                        ),\n                        hi: BytePos(\n                            1055,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('x' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Lit(\n            Num(\n                Number {\n                    span: Span {\n                        lo: BytePos(\n                            1058,\n                        ),\n                        hi: BytePos(\n                            1060,\n                        ),\n                        ctxt: #0,\n                    },\n                    value: 42.0,\n                    raw: Some(\n                        \"42\",\n                    ),\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/name-arguments-non-strict.js","error":null}
{"file_path":"test/language/expressions/function/name-arguments-strict-body.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/name-arguments-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/name-eval-non-strict.js","error":null}
{"file_path":"test/language/expressions/function/name-eval-strict-body.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/name-eval-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/name-eval-stricteval.js","error":{"category":"run","message":"could not use as object: v23"}}
{"file_path":"test/language/expressions/function/name.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/named-no-strict-reassign-fn-name-in-body-in-arrow.js","error":{"category":"run","message":"could not use as object: v30"}}
{"file_path":"test/language/expressions/function/named-no-strict-reassign-fn-name-in-body-in-eval.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/named-no-strict-reassign-fn-name-in-body.js","error":{"category":"run","message":"could not use as object: v30"}}
{"file_path":"test/language/expressions/function/named-strict-error-reassign-fn-name-in-body-in-arrow.js","error":{"category":"run","message":"could not use as object: v27"}}
{"file_path":"test/language/expressions/function/named-strict-error-reassign-fn-name-in-body-in-eval.js","error":{"category":"run","message":"could not use as object: v27"}}
{"file_path":"test/language/expressions/function/named-strict-error-reassign-fn-name-in-body.js","error":{"category":"run","message":"could not use as object: v27"}}
{"file_path":"test/language/expressions/function/object-destructuring-param-strict-body.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                5175,\n            ),\n            hi: BytePos(\n                5218,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                5175,\n                            ),\n                            hi: BytePos(\n                                5176,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        5187,\n                                    ),\n                                    hi: BytePos(\n                                        5197,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                5187,\n                                            ),\n                                            hi: BytePos(\n                                                5197,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            5188,\n                                                        ),\n                                                        hi: BytePos(\n                                                            5196,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                5188,\n                                                            ),\n                                                            hi: BytePos(\n                                                                5196,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('property' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                            },\n                        ],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                5178,\n                            ),\n                            hi: BytePos(\n                                5218,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        5199,\n                                    ),\n                                    hi: BytePos(\n                                        5218,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [\n                                    Expr(\n                                        ExprStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    5203,\n                                                ),\n                                                hi: BytePos(\n                                                    5216,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            expr: Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                5203,\n                                                            ),\n                                                            hi: BytePos(\n                                                                5215,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('use strict' type=dynamic),\n                                                        raw: Some(\n                                                            \"\\\"use strict\\\"\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                ],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/expressions/function/param-arguments-non-strict.js","error":null}
{"file_path":"test/language/expressions/function/param-dflt-yield-non-strict.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/expressions/function/param-dflt-yield-non-strict.js"}}
{"file_path":"test/language/expressions/function/param-dflt-yield-strict.js","error":null}
{"file_path":"test/language/expressions/function/param-duplicated-non-strict.js","error":null}
{"file_path":"test/language/expressions/function/param-duplicated-strict-1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/param-duplicated-strict-2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/param-duplicated-strict-3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/param-duplicated-strict-body-1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/param-duplicated-strict-body-2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/param-duplicated-strict-body-3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/param-eval-non-strict-is-correct-value.js","error":{"category":"run","message":"could not use as object: v14"}}
{"file_path":"test/language/expressions/function/param-eval-non-strict.js","error":null}
{"file_path":"test/language/expressions/function/param-eval-strict-body.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/expressions/function/param-eval-stricteval.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/expressions/function/params-dflt-args-unmapped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1732,\n            ),\n            hi: BytePos(\n                1737,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1732,\n                        ),\n                        hi: BytePos(\n                            1733,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Lit(\n            Num(\n                Number {\n                    span: Span {\n                        lo: BytePos(\n                            1736,\n                        ),\n                        hi: BytePos(\n                            1737,\n                        ),\n                        ctxt: #0,\n                    },\n                    value: 0.0,\n                    raw: Some(\n                        \"0\",\n                    ),\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/params-dflt-ref-arguments.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                1728,\n            ),\n            hi: BytePos(\n                1744,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            1728,\n                        ),\n                        hi: BytePos(\n                            1729,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('x' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Member(\n            MemberExpr {\n                span: Span {\n                    lo: BytePos(\n                        1732,\n                    ),\n                    hi: BytePos(\n                        1744,\n                    ),\n                    ctxt: #0,\n                },\n                obj: Ident(\n                    Ident {\n                        span: Span {\n                            lo: BytePos(\n                                1732,\n                            ),\n                            hi: BytePos(\n                                1741,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('arguments' type=static),\n                        optional: false,\n                    },\n                ),\n                prop: Computed(\n                    ComputedPropName {\n                        span: Span {\n                            lo: BytePos(\n                                1741,\n                            ),\n                            hi: BytePos(\n                                1744,\n                            ),\n                            ctxt: #0,\n                        },\n                        expr: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1742,\n                                        ),\n                                        hi: BytePos(\n                                            1743,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 2.0,\n                                    raw: Some(\n                                        \"2\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/params-trailing-comma-multiple.js","error":{"category":"run","message":"could not use as object: v13"}}
{"file_path":"test/language/expressions/function/params-trailing-comma-single.js","error":{"category":"run","message":"could not use as object: v12"}}
{"file_path":"test/language/expressions/function/rest-param-strict-body.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                5182,\n            ),\n            hi: BytePos(\n                5224,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                5182,\n                            ),\n                            hi: BytePos(\n                                5183,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        5194,\n                                    ),\n                                    hi: BytePos(\n                                        5195,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    5194,\n                                                ),\n                                                hi: BytePos(\n                                                    5195,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('a' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                            },\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        5196,\n                                    ),\n                                    hi: BytePos(\n                                        5203,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Rest(\n                                    RestPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                5196,\n                                            ),\n                                            hi: BytePos(\n                                                5203,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        dot3_token: Span {\n                                            lo: BytePos(\n                                                5196,\n                                            ),\n                                            hi: BytePos(\n                                                5199,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        arg: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            5199,\n                                                        ),\n                                                        hi: BytePos(\n                                                            5203,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('rest' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        type_ann: None,\n                                    },\n                                ),\n                            },\n                        ],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                5185,\n                            ),\n                            hi: BytePos(\n                                5224,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        5205,\n                                    ),\n                                    hi: BytePos(\n                                        5224,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [\n                                    Expr(\n                                        ExprStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    5209,\n                                                ),\n                                                hi: BytePos(\n                                                    5222,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            expr: Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                5209,\n                                                            ),\n                                                            hi: BytePos(\n                                                                5221,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('use strict' type=dynamic),\n                                                        raw: Some(\n                                                            \"\\\"use strict\\\"\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                ],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/expressions/function/rest-params-trailing-comma-early-error.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                1694,\n            ),\n            hi: BytePos(\n                1719,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                1694,\n                            ),\n                            hi: BytePos(\n                                1695,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [\n                            Param {\n                                span: Span {\n                                    lo: BytePos(\n                                        1706,\n                                    ),\n                                    hi: BytePos(\n                                        1710,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                decorators: [],\n                                pat: Rest(\n                                    RestPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1706,\n                                            ),\n                                            hi: BytePos(\n                                                1710,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        dot3_token: Span {\n                                            lo: BytePos(\n                                                1706,\n                                            ),\n                                            hi: BytePos(\n                                                1709,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        arg: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1709,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1710,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('a' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        type_ann: None,\n                                    },\n                                ),\n                            },\n                        ],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                1697,\n                            ),\n                            hi: BytePos(\n                                1719,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        1713,\n                                    ),\n                                    hi: BytePos(\n                                        1719,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/expressions/function/scope-body-lex-distinct.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/expressions/function/scope-name-var-close.js","error":{"category":"run","message":"could not use as object: v29"}}
{"file_path":"test/language/expressions/function/scope-name-var-open-non-strict.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                925,\n            ),\n            hi: BytePos(\n                1021,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            925,\n                        ),\n                        hi: BytePos(\n                            926,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Paren(\n            ParenExpr {\n                span: Span {\n                    lo: BytePos(\n                        929,\n                    ),\n                    hi: BytePos(\n                        1021,\n                    ),\n                    ctxt: #0,\n                },\n                expr: Seq(\n                    SeqExpr {\n                        span: Span {\n                            lo: BytePos(\n                                935,\n                            ),\n                            hi: BytePos(\n                                1015,\n                            ),\n                            ctxt: #0,\n                        },\n                        exprs: [\n                            Assign(\n                                AssignExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            935,\n                                        ),\n                                        hi: BytePos(\n                                            973,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"=\",\n                                    left: Pat(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            935,\n                                                        ),\n                                                        hi: BytePos(\n                                                            946,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('probeParams' type=dynamic),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    right: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        949,\n                                                    ),\n                                                    hi: BytePos(\n                                                        973,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                960,\n                                                            ),\n                                                            hi: BytePos(\n                                                                973,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [\n                                                            Return(\n                                                                ReturnStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            962,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            971,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    arg: Some(\n                                                                        Ident(\n                                                                            Ident {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        969,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        970,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                sym: Atom('f' type=inline),\n                                                                                optional: false,\n                                                                            },\n                                                                        ),\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                            Assign(\n                                AssignExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            979,\n                                        ),\n                                        hi: BytePos(\n                                            1015,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"=\",\n                                    left: Pat(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            979,\n                                                        ),\n                                                        hi: BytePos(\n                                                            988,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('setParams' type=dynamic),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    right: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        991,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1015,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1002,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1015,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [\n                                                            Expr(\n                                                                ExprStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1004,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1013,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    expr: Assign(\n                                                                        AssignExpr {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    1004,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    1012,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            op: \"=\",\n                                                                            left: Pat(\n                                                                                Ident(\n                                                                                    BindingIdent {\n                                                                                        id: Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1004,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1005,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('f' type=inline),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                        type_ann: None,\n                                                                                    },\n                                                                                ),\n                                                                            ),\n                                                                            right: Lit(\n                                                                                Null(\n                                                                                    Null {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                1008,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                1012,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                    },\n                                                                                ),\n                                                                            ),\n                                                                        },\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                        ],\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/scope-name-var-open-strict.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                927,\n            ),\n            hi: BytePos(\n                1023,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            927,\n                        ),\n                        hi: BytePos(\n                            928,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Paren(\n            ParenExpr {\n                span: Span {\n                    lo: BytePos(\n                        931,\n                    ),\n                    hi: BytePos(\n                        1023,\n                    ),\n                    ctxt: #0,\n                },\n                expr: Seq(\n                    SeqExpr {\n                        span: Span {\n                            lo: BytePos(\n                                937,\n                            ),\n                            hi: BytePos(\n                                1017,\n                            ),\n                            ctxt: #0,\n                        },\n                        exprs: [\n                            Assign(\n                                AssignExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            937,\n                                        ),\n                                        hi: BytePos(\n                                            975,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"=\",\n                                    left: Pat(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            937,\n                                                        ),\n                                                        hi: BytePos(\n                                                            948,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('probeParams' type=dynamic),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    right: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        951,\n                                                    ),\n                                                    hi: BytePos(\n                                                        975,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                962,\n                                                            ),\n                                                            hi: BytePos(\n                                                                975,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [\n                                                            Return(\n                                                                ReturnStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            964,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            973,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    arg: Some(\n                                                                        Ident(\n                                                                            Ident {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        971,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        972,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                sym: Atom('f' type=inline),\n                                                                                optional: false,\n                                                                            },\n                                                                        ),\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                            Assign(\n                                AssignExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            981,\n                                        ),\n                                        hi: BytePos(\n                                            1017,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"=\",\n                                    left: Pat(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            981,\n                                                        ),\n                                                        hi: BytePos(\n                                                            990,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('setParams' type=dynamic),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    right: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        993,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1017,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1004,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1017,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [\n                                                            Expr(\n                                                                ExprStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1006,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1015,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    expr: Assign(\n                                                                        AssignExpr {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    1006,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    1014,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            op: \"=\",\n                                                                            left: Pat(\n                                                                                Ident(\n                                                                                    BindingIdent {\n                                                                                        id: Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1006,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1007,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('f' type=inline),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                        type_ann: None,\n                                                                                    },\n                                                                                ),\n                                                                            ),\n                                                                            right: Lit(\n                                                                                Null(\n                                                                                    Null {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                1010,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                1014,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                    },\n                                                                                ),\n                                                                            ),\n                                                                        },\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                        ],\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/scope-param-elem-var-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                754,\n            ),\n            hi: BytePos(\n                820,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            754,\n                        ),\n                        hi: BytePos(\n                            755,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Paren(\n            ParenExpr {\n                span: Span {\n                    lo: BytePos(\n                        758,\n                    ),\n                    hi: BytePos(\n                        820,\n                    ),\n                    ctxt: #0,\n                },\n                expr: Seq(\n                    SeqExpr {\n                        span: Span {\n                            lo: BytePos(\n                                759,\n                            ),\n                            hi: BytePos(\n                                819,\n                            ),\n                            ctxt: #0,\n                        },\n                        exprs: [\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            759,\n                                        ),\n                                        hi: BytePos(\n                                            784,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        759,\n                                                    ),\n                                                    hi: BytePos(\n                                                        763,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('eval' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                764,\n                                                            ),\n                                                            hi: BytePos(\n                                                                783,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('var x = \"inside\";' type=dynamic),\n                                                        raw: Some(\n                                                            \"'var x = \\\"inside\\\";'\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ],\n                                    type_args: None,\n                                },\n                            ),\n                            Assign(\n                                AssignExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            786,\n                                        ),\n                                        hi: BytePos(\n                                            819,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"=\",\n                                    left: Pat(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            786,\n                                                        ),\n                                                        hi: BytePos(\n                                                            792,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('probe1' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                    right: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        795,\n                                                    ),\n                                                    hi: BytePos(\n                                                        819,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                806,\n                                                            ),\n                                                            hi: BytePos(\n                                                                819,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [\n                                                            Return(\n                                                                ReturnStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            808,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            817,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    arg: Some(\n                                                                        Ident(\n                                                                            Ident {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        815,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        816,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                sym: Atom('x' type=static),\n                                                                                optional: false,\n                                                                            },\n                                                                        ),\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                        ],\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/scope-param-elem-var-open.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                743,\n            ),\n            hi: BytePos(\n                780,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            743,\n                        ),\n                        hi: BytePos(\n                            744,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Assign(\n            AssignExpr {\n                span: Span {\n                    lo: BytePos(\n                        747,\n                    ),\n                    hi: BytePos(\n                        780,\n                    ),\n                    ctxt: #0,\n                },\n                op: \"=\",\n                left: Pat(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        747,\n                                    ),\n                                    hi: BytePos(\n                                        753,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('probe1' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                right: Fn(\n                    FnExpr {\n                        ident: None,\n                        function: Function {\n                            params: [],\n                            decorators: [],\n                            span: Span {\n                                lo: BytePos(\n                                    756,\n                                ),\n                                hi: BytePos(\n                                    780,\n                                ),\n                                ctxt: #0,\n                            },\n                            body: Some(\n                                BlockStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            767,\n                                        ),\n                                        hi: BytePos(\n                                            780,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    stmts: [\n                                        Return(\n                                            ReturnStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        769,\n                                                    ),\n                                                    hi: BytePos(\n                                                        778,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                arg: Some(\n                                                    Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    776,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    777,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                            is_generator: false,\n                            is_async: false,\n                            type_params: None,\n                            return_type: None,\n                        },\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/scope-param-rest-elem-var-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Rest(\n    RestPat {\n        span: Span {\n            lo: BytePos(\n                750,\n            ),\n            hi: BytePos(\n                825,\n            ),\n            ctxt: #0,\n        },\n        dot3_token: Span {\n            lo: BytePos(\n                750,\n            ),\n            hi: BytePos(\n                753,\n            ),\n            ctxt: #0,\n        },\n        arg: Array(\n            ArrayPat {\n                span: Span {\n                    lo: BytePos(\n                        753,\n                    ),\n                    hi: BytePos(\n                        825,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        754,\n                                    ),\n                                    hi: BytePos(\n                                        824,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    754,\n                                                ),\n                                                hi: BytePos(\n                                                    755,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('_' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Paren(\n                                    ParenExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                758,\n                                            ),\n                                            hi: BytePos(\n                                                824,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        expr: Seq(\n                                            SeqExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        759,\n                                                    ),\n                                                    hi: BytePos(\n                                                        823,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                exprs: [\n                                                    Call(\n                                                        CallExpr {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    759,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    784,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            callee: Expr(\n                                                                Ident(\n                                                                    Ident {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                759,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                763,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        sym: Atom('eval' type=static),\n                                                                        optional: false,\n                                                                    },\n                                                                ),\n                                                            ),\n                                                            args: [\n                                                                ExprOrSpread {\n                                                                    spread: None,\n                                                                    expr: Lit(\n                                                                        Str(\n                                                                            Str {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        764,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        783,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                value: Atom('var x = \"inside\";' type=dynamic),\n                                                                                raw: Some(\n                                                                                    \"'var x = \\\"inside\\\";'\",\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    ),\n                                                                },\n                                                            ],\n                                                            type_args: None,\n                                                        },\n                                                    ),\n                                                    Assign(\n                                                        AssignExpr {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    786,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    823,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            op: \"=\",\n                                                            left: Pat(\n                                                                Ident(\n                                                                    BindingIdent {\n                                                                        id: Ident {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    786,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    796,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            sym: Atom('probeParam' type=dynamic),\n                                                                            optional: false,\n                                                                        },\n                                                                        type_ann: None,\n                                                                    },\n                                                                ),\n                                                            ),\n                                                            right: Fn(\n                                                                FnExpr {\n                                                                    ident: None,\n                                                                    function: Function {\n                                                                        params: [],\n                                                                        decorators: [],\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                799,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                823,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        body: Some(\n                                                                            BlockStmt {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        810,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        823,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                stmts: [\n                                                                                    Return(\n                                                                                        ReturnStmt {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    812,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    821,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            arg: Some(\n                                                                                                Ident(\n                                                                                                    Ident {\n                                                                                                        span: Span {\n                                                                                                            lo: BytePos(\n                                                                                                                819,\n                                                                                                            ),\n                                                                                                            hi: BytePos(\n                                                                                                                820,\n                                                                                                            ),\n                                                                                                            ctxt: #0,\n                                                                                                        },\n                                                                                                        sym: Atom('x' type=static),\n                                                                                                        optional: false,\n                                                                                                    },\n                                                                                                ),\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ],\n                                                                            },\n                                                                        ),\n                                                                        is_generator: false,\n                                                                        is_async: false,\n                                                                        type_params: None,\n                                                                        return_type: None,\n                                                                    },\n                                                                },\n                                                            ),\n                                                        },\n                                                    ),\n                                                ],\n                                            },\n                                        ),\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n                optional: false,\n                type_ann: None,\n            },\n        ),\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/expressions/function/scope-param-rest-elem-var-open.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                743,\n            ),\n            hi: BytePos(\n                780,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            743,\n                        ),\n                        hi: BytePos(\n                            744,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Assign(\n            AssignExpr {\n                span: Span {\n                    lo: BytePos(\n                        747,\n                    ),\n                    hi: BytePos(\n                        780,\n                    ),\n                    ctxt: #0,\n                },\n                op: \"=\",\n                left: Pat(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        747,\n                                    ),\n                                    hi: BytePos(\n                                        753,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('probe1' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                right: Fn(\n                    FnExpr {\n                        ident: None,\n                        function: Function {\n                            params: [],\n                            decorators: [],\n                            span: Span {\n                                lo: BytePos(\n                                    756,\n                                ),\n                                hi: BytePos(\n                                    780,\n                                ),\n                                ctxt: #0,\n                            },\n                            body: Some(\n                                BlockStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            767,\n                                        ),\n                                        hi: BytePos(\n                                            780,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    stmts: [\n                                        Return(\n                                            ReturnStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        769,\n                                                    ),\n                                                    hi: BytePos(\n                                                        778,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                arg: Some(\n                                                    Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    776,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    777,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                            is_generator: false,\n                            is_async: false,\n                            type_params: None,\n                            return_type: None,\n                        },\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/scope-paramsbody-var-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                943,\n            ),\n            hi: BytePos(\n                951,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            943,\n                        ),\n                        hi: BytePos(\n                            944,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Lit(\n            Null(\n                Null {\n                    span: Span {\n                        lo: BytePos(\n                            947,\n                        ),\n                        hi: BytePos(\n                            951,\n                        ),\n                        ctxt: #0,\n                    },\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/scope-paramsbody-var-open.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                951,\n            ),\n            hi: BytePos(\n                993,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            951,\n                        ),\n                        hi: BytePos(\n                            952,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('_' type=inline),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Assign(\n            AssignExpr {\n                span: Span {\n                    lo: BytePos(\n                        955,\n                    ),\n                    hi: BytePos(\n                        993,\n                    ),\n                    ctxt: #0,\n                },\n                op: \"=\",\n                left: Pat(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        955,\n                                    ),\n                                    hi: BytePos(\n                                        966,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('probeParams' type=dynamic),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                right: Fn(\n                    FnExpr {\n                        ident: None,\n                        function: Function {\n                            params: [],\n                            decorators: [],\n                            span: Span {\n                                lo: BytePos(\n                                    969,\n                                ),\n                                hi: BytePos(\n                                    993,\n                                ),\n                                ctxt: #0,\n                            },\n                            body: Some(\n                                BlockStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            980,\n                                        ),\n                                        hi: BytePos(\n                                            993,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    stmts: [\n                                        Return(\n                                            ReturnStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        982,\n                                                    ),\n                                                    hi: BytePos(\n                                                        991,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                arg: Some(\n                                                    Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    989,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    990,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                            is_generator: false,\n                            is_async: false,\n                            type_params: None,\n                            return_type: None,\n                        },\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/static-init-await-binding.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/expressions/function/static-init-await-binding.js"}}
{"file_path":"test/language/expressions/function/static-init-await-reference.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/expressions/function/static-init-await-reference.js"}}
{"file_path":"test/language/expressions/function/unscopables-with-in-nested-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: With(\n    WithStmt {\n        span: Span {\n            lo: BytePos(\n                2049,\n            ),\n            hi: BytePos(\n                2144,\n            ),\n            ctxt: #0,\n        },\n        obj: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        2055,\n                    ),\n                    hi: BytePos(\n                        2065,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('globalThis' type=dynamic),\n                optional: false,\n            },\n        ),\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        2067,\n                    ),\n                    hi: BytePos(\n                        2144,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Expr(\n                        ExprStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    2075,\n                                ),\n                                hi: BytePos(\n                                    2083,\n                                ),\n                                ctxt: #0,\n                            },\n                            expr: Update(\n                                UpdateExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2075,\n                                        ),\n                                        hi: BytePos(\n                                            2082,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"++\",\n                                    prefix: false,\n                                    arg: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    2075,\n                                                ),\n                                                hi: BytePos(\n                                                    2080,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('count' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                    Expr(\n                        ExprStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    2090,\n                                ),\n                                hi: BytePos(\n                                    2138,\n                                ),\n                                ctxt: #0,\n                            },\n                            expr: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2090,\n                                        ),\n                                        hi: BytePos(\n                                            2137,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Member(\n                                            MemberExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        2090,\n                                                    ),\n                                                    hi: BytePos(\n                                                        2106,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                obj: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                2090,\n                                                            ),\n                                                            hi: BytePos(\n                                                                2096,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('assert' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                prop: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                2097,\n                                                            ),\n                                                            hi: BytePos(\n                                                                2106,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('sameValue' type=dynamic),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    args: [\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            2107,\n                                                        ),\n                                                        hi: BytePos(\n                                                            2108,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('v' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        },\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                2110,\n                                                            ),\n                                                            hi: BytePos(\n                                                                2111,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 1.0,\n                                                        raw: Some(\n                                                            \"1\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                2113,\n                                                            ),\n                                                            hi: BytePos(\n                                                                2136,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('The value of `v` is 1' type=dynamic),\n                                                        raw: Some(\n                                                            \"'The value of `v` is 1'\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/unscopables-with.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: With(\n    WithStmt {\n        span: Span {\n            lo: BytePos(\n                2016,\n            ),\n            hi: BytePos(\n                2141,\n            ),\n            ctxt: #0,\n        },\n        obj: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        2022,\n                    ),\n                    hi: BytePos(\n                        2032,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('globalThis' type=dynamic),\n                optional: false,\n            },\n        ),\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        2034,\n                    ),\n                    hi: BytePos(\n                        2141,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Expr(\n                        ExprStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    2040,\n                                ),\n                                hi: BytePos(\n                                    2048,\n                                ),\n                                ctxt: #0,\n                            },\n                            expr: Update(\n                                UpdateExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2040,\n                                        ),\n                                        hi: BytePos(\n                                            2047,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"++\",\n                                    prefix: false,\n                                    arg: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    2040,\n                                                ),\n                                                hi: BytePos(\n                                                    2045,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('count' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                    Expr(\n                        ExprStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    2053,\n                                ),\n                                hi: BytePos(\n                                    2137,\n                                ),\n                                ctxt: #0,\n                            },\n                            expr: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            2053,\n                                        ),\n                                        hi: BytePos(\n                                            2136,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Member(\n                                            MemberExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        2053,\n                                                    ),\n                                                    hi: BytePos(\n                                                        2069,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                obj: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                2053,\n                                                            ),\n                                                            hi: BytePos(\n                                                                2059,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('assert' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                prop: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                2060,\n                                                            ),\n                                                            hi: BytePos(\n                                                                2069,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('sameValue' type=dynamic),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    args: [\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            2070,\n                                                        ),\n                                                        hi: BytePos(\n                                                            2071,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('v' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        },\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            2073,\n                                                        ),\n                                                        hi: BytePos(\n                                                            2082,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('undefined' type=static),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        },\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                2084,\n                                                            ),\n                                                            hi: BytePos(\n                                                                2135,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('The value of `v` is expected to equal `undefined`' type=dynamic),\n                                                        raw: Some(\n                                                            \"'The value of `v` is expected to equal `undefined`'\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/expressions/function/use-strict-with-non-simple-param.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Assign(\n    AssignPat {\n        span: Span {\n            lo: BytePos(\n                572,\n            ),\n            hi: BytePos(\n                577,\n            ),\n            ctxt: #0,\n        },\n        left: Ident(\n            BindingIdent {\n                id: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            572,\n                        ),\n                        hi: BytePos(\n                            573,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('a' type=static),\n                    optional: false,\n                },\n                type_ann: None,\n            },\n        ),\n        right: Lit(\n            Num(\n                Number {\n                    span: Span {\n                        lo: BytePos(\n                            576,\n                        ),\n                        hi: BytePos(\n                            577,\n                        ),\n                        ctxt: #0,\n                    },\n                    value: 0.0,\n                    raw: Some(\n                        \"0\",\n                    ),\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/if/S12.5_A1.1_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A1.1_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A1.2_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A1.2_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A10_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A10_T2.js","error":null}
{"file_path":"test/language/statements/if/S12.5_A11.js","error":null}
{"file_path":"test/language/statements/if/S12.5_A12_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A12_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A12_T3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A12_T4.js","error":null}
{"file_path":"test/language/statements/if/S12.5_A1_T1.js","error":null}
{"file_path":"test/language/statements/if/S12.5_A1_T2.js","error":null}
{"file_path":"test/language/statements/if/S12.5_A2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A3.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/if/S12.5_A4.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/if/S12.5_A5.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/S12.5_A6_T1.js","error":null}
{"file_path":"test/language/statements/if/S12.5_A6_T2.js","error":null}
{"file_path":"test/language/statements/if/S12.5_A8.js","error":null}
{"file_path":"test/language/statements/if/cptn-else-false-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/cptn-else-false-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/cptn-else-true-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/cptn-else-true-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/cptn-empty-statement.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/cptn-no-else-false.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/cptn-no-else-true-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/cptn-no-else-true-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/empty-statement.js","error":null}
{"file_path":"test/language/statements/if/if-async-fun-else-async-fun.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-async-fun-else-stmt.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-async-fun-no-else.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-async-gen-else-async-gen.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-async-gen-else-stmt.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-async-gen-no-else.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-cls-else-cls.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        332,\n                    ),\n                    hi: BytePos(\n                        333,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('C' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        326,\n                    ),\n                    hi: BytePos(\n                        336,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/if/if-cls-else-stmt.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        332,\n                    ),\n                    hi: BytePos(\n                        333,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('C' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        326,\n                    ),\n                    hi: BytePos(\n                        336,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/if/if-cls-no-else.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        332,\n                    ),\n                    hi: BytePos(\n                        333,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('C' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        326,\n                    ),\n                    hi: BytePos(\n                        336,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/if/if-const-else-const.js","error":null}
{"file_path":"test/language/statements/if/if-const-else-stmt.js","error":null}
{"file_path":"test/language/statements/if/if-const-no-else.js","error":null}
{"file_path":"test/language/statements/if/if-decl-else-decl-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-decl-else-stmt-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-decl-no-else-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-fun-else-fun-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-fun-else-stmt-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-fun-no-else-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-gen-else-gen.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-gen-else-stmt.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-gen-no-else.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-let-else-let.js","error":null}
{"file_path":"test/language/statements/if/if-let-else-stmt.js","error":null}
{"file_path":"test/language/statements/if/if-let-no-else.js","error":null}
{"file_path":"test/language/statements/if/if-stmt-else-async-fun.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-stmt-else-async-gen.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-stmt-else-cls.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        340,\n                    ),\n                    hi: BytePos(\n                        341,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('C' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        334,\n                    ),\n                    hi: BytePos(\n                        344,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/if/if-stmt-else-const.js","error":null}
{"file_path":"test/language/statements/if/if-stmt-else-decl-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-stmt-else-fun-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-stmt-else-gen.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/if-stmt-else-let.js","error":null}
{"file_path":"test/language/statements/if/labelled-fn-stmt-first.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                801,\n            ),\n            hi: BytePos(\n                838,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    801,\n                ),\n                hi: BytePos(\n                    807,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label1' type=inline),\n            optional: false,\n        },\n        body: Labeled(\n            LabeledStmt {\n                span: Span {\n                    lo: BytePos(\n                        809,\n                    ),\n                    hi: BytePos(\n                        838,\n                    ),\n                    ctxt: #0,\n                },\n                label: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            809,\n                        ),\n                        hi: BytePos(\n                            815,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('label2' type=inline),\n                    optional: false,\n                },\n                body: Decl(\n                    Fn(\n                        FnDecl {\n                            ident: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        826,\n                                    ),\n                                    hi: BytePos(\n                                        833,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('test262' type=inline),\n                                optional: false,\n                            },\n                            declare: false,\n                            function: Function {\n                                params: [],\n                                decorators: [],\n                                span: Span {\n                                    lo: BytePos(\n                                        817,\n                                    ),\n                                    hi: BytePos(\n                                        838,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                836,\n                                            ),\n                                            hi: BytePos(\n                                                838,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [],\n                                    },\n                                ),\n                                is_generator: false,\n                                is_async: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        },\n                    ),\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/if/labelled-fn-stmt-lone.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                792,\n            ),\n            hi: BytePos(\n                829,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    792,\n                ),\n                hi: BytePos(\n                    798,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label1' type=inline),\n            optional: false,\n        },\n        body: Labeled(\n            LabeledStmt {\n                span: Span {\n                    lo: BytePos(\n                        800,\n                    ),\n                    hi: BytePos(\n                        829,\n                    ),\n                    ctxt: #0,\n                },\n                label: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            800,\n                        ),\n                        hi: BytePos(\n                            806,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('label2' type=inline),\n                    optional: false,\n                },\n                body: Decl(\n                    Fn(\n                        FnDecl {\n                            ident: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        817,\n                                    ),\n                                    hi: BytePos(\n                                        824,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('test262' type=inline),\n                                optional: false,\n                            },\n                            declare: false,\n                            function: Function {\n                                params: [],\n                                decorators: [],\n                                span: Span {\n                                    lo: BytePos(\n                                        808,\n                                    ),\n                                    hi: BytePos(\n                                        829,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                827,\n                                            ),\n                                            hi: BytePos(\n                                                829,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [],\n                                    },\n                                ),\n                                is_generator: false,\n                                is_async: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        },\n                    ),\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/if/labelled-fn-stmt-second.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                808,\n            ),\n            hi: BytePos(\n                845,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    808,\n                ),\n                hi: BytePos(\n                    814,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label1' type=inline),\n            optional: false,\n        },\n        body: Labeled(\n            LabeledStmt {\n                span: Span {\n                    lo: BytePos(\n                        816,\n                    ),\n                    hi: BytePos(\n                        845,\n                    ),\n                    ctxt: #0,\n                },\n                label: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            816,\n                        ),\n                        hi: BytePos(\n                            822,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('label2' type=inline),\n                    optional: false,\n                },\n                body: Decl(\n                    Fn(\n                        FnDecl {\n                            ident: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        833,\n                                    ),\n                                    hi: BytePos(\n                                        840,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('test262' type=inline),\n                                optional: false,\n                            },\n                            declare: false,\n                            function: Function {\n                                params: [],\n                                decorators: [],\n                                span: Span {\n                                    lo: BytePos(\n                                        824,\n                                    ),\n                                    hi: BytePos(\n                                        845,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                843,\n                                            ),\n                                            hi: BytePos(\n                                                845,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [],\n                                    },\n                                ),\n                                is_generator: false,\n                                is_async: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        },\n                    ),\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/if/let-array-with-newline.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/let-block-with-newline.js","error":null}
{"file_path":"test/language/statements/if/let-identifier-with-newline.js","error":null}
{"file_path":"test/language/statements/if/tco-else-body.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/if/tco-if-body.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/labeled/S12.12_A1_T1.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                399,\n            ),\n            hi: BytePos(\n                463,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    399,\n                ),\n                hi: BytePos(\n                    402,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('lbl' type=inline),\n            optional: false,\n        },\n        body: ForIn(\n            ForInStmt {\n                span: Span {\n                    lo: BytePos(\n                        404,\n                    ),\n                    hi: BytePos(\n                        463,\n                    ),\n                    ctxt: #0,\n                },\n                left: VarDecl(\n                    VarDecl {\n                        span: Span {\n                            lo: BytePos(\n                                408,\n                            ),\n                            hi: BytePos(\n                                413,\n                            ),\n                            ctxt: #0,\n                        },\n                        kind: \"var\",\n                        declare: false,\n                        decls: [\n                            VarDeclarator {\n                                span: Span {\n                                    lo: BytePos(\n                                        412,\n                                    ),\n                                    hi: BytePos(\n                                        413,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                name: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    412,\n                                                ),\n                                                hi: BytePos(\n                                                    413,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('i' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                init: None,\n                                definite: false,\n                            },\n                        ],\n                    },\n                ),\n                right: Ident(\n                    Ident {\n                        span: Span {\n                            lo: BytePos(\n                                417,\n                            ),\n                            hi: BytePos(\n                                423,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('object' type=static),\n                        optional: false,\n                    },\n                ),\n                body: Block(\n                    BlockStmt {\n                        span: Span {\n                            lo: BytePos(\n                                424,\n                            ),\n                            hi: BytePos(\n                                463,\n                            ),\n                            ctxt: #0,\n                        },\n                        stmts: [\n                            Expr(\n                                ExprStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            428,\n                                        ),\n                                        hi: BytePos(\n                                            448,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Assign(\n                                        AssignExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    428,\n                                                ),\n                                                hi: BytePos(\n                                                    447,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            op: \"+=\",\n                                            left: Expr(\n                                                Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                428,\n                                                            ),\n                                                            hi: BytePos(\n                                                                434,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('result' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            ),\n                                            right: Member(\n                                                MemberExpr {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            438,\n                                                        ),\n                                                        hi: BytePos(\n                                                            447,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    obj: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    438,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    444,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('object' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    prop: Computed(\n                                                        ComputedPropName {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    444,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    447,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            expr: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            445,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            446,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('i' type=static),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                },\n                            ),\n                            Break(\n                                BreakStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            451,\n                                        ),\n                                        hi: BytePos(\n                                            461,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    label: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    457,\n                                                ),\n                                                hi: BytePos(\n                                                    460,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('lbl' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                },\n                            ),\n                        ],\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/continue.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                696,\n            ),\n            hi: BytePos(\n                732,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    696,\n                ),\n                hi: BytePos(\n                    703,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('test262' type=inline),\n            optional: false,\n        },\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        705,\n                    ),\n                    hi: BytePos(\n                        732,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Continue(\n                        ContinueStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    711,\n                                ),\n                                hi: BytePos(\n                                    728,\n                                ),\n                                ctxt: #0,\n                            },\n                            label: Some(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            720,\n                                        ),\n                                        hi: BytePos(\n                                            727,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('test262' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/cptn-break.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/labeled/cptn-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/labeled/decl-async-function.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                521,\n            ),\n            hi: BytePos(\n                549,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    521,\n                ),\n                hi: BytePos(\n                    526,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: Decl(\n            Fn(\n                FnDecl {\n                    ident: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                543,\n                            ),\n                            hi: BytePos(\n                                544,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('f' type=inline),\n                        optional: false,\n                    },\n                    declare: false,\n                    function: Function {\n                        params: [],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                528,\n                            ),\n                            hi: BytePos(\n                                549,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        547,\n                                    ),\n                                    hi: BytePos(\n                                        549,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: true,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/decl-async-generator.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                522,\n            ),\n            hi: BytePos(\n                551,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    522,\n                ),\n                hi: BytePos(\n                    527,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: Decl(\n            Fn(\n                FnDecl {\n                    ident: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                545,\n                            ),\n                            hi: BytePos(\n                                546,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('g' type=static),\n                        optional: false,\n                    },\n                    declare: false,\n                    function: Function {\n                        params: [],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                529,\n                            ),\n                            hi: BytePos(\n                                551,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        549,\n                                    ),\n                                    hi: BytePos(\n                                        551,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: true,\n                        is_async: true,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/decl-cls.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                324,\n            ),\n            hi: BytePos(\n                341,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    324,\n                ),\n                hi: BytePos(\n                    329,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: Decl(\n            Class(\n                ClassDecl {\n                    ident: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                337,\n                            ),\n                            hi: BytePos(\n                                338,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('C' type=inline),\n                        optional: false,\n                    },\n                    declare: false,\n                    class: Class {\n                        span: Span {\n                            lo: BytePos(\n                                331,\n                            ),\n                            hi: BytePos(\n                                341,\n                            ),\n                            ctxt: #0,\n                        },\n                        decorators: [],\n                        body: [],\n                        super_class: None,\n                        is_abstract: false,\n                        type_params: None,\n                        super_type_params: None,\n                        implements: [],\n                    },\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/decl-const.js","error":null}
{"file_path":"test/language/statements/labeled/decl-fun-strict.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                379,\n            ),\n            hi: BytePos(\n                401,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    379,\n                ),\n                hi: BytePos(\n                    384,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: Decl(\n            Fn(\n                FnDecl {\n                    ident: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                395,\n                            ),\n                            hi: BytePos(\n                                396,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('g' type=static),\n                        optional: false,\n                    },\n                    declare: false,\n                    function: Function {\n                        params: [],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                386,\n                            ),\n                            hi: BytePos(\n                                401,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        399,\n                                    ),\n                                    hi: BytePos(\n                                        401,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/decl-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                351,\n            ),\n            hi: BytePos(\n                374,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    351,\n                ),\n                hi: BytePos(\n                    356,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: Decl(\n            Fn(\n                FnDecl {\n                    ident: Ident {\n                        span: Span {\n                            lo: BytePos(\n                                368,\n                            ),\n                            hi: BytePos(\n                                369,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('g' type=static),\n                        optional: false,\n                    },\n                    declare: false,\n                    function: Function {\n                        params: [],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                358,\n                            ),\n                            hi: BytePos(\n                                374,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        372,\n                                    ),\n                                    hi: BytePos(\n                                        374,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: true,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/decl-let.js","error":null}
{"file_path":"test/language/statements/labeled/let-array-with-newline.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                595,\n            ),\n            hi: BytePos(\n                614,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    595,\n                ),\n                hi: BytePos(\n                    596,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('L' type=inline),\n            optional: false,\n        },\n        body: Expr(\n            ExprStmt {\n                span: Span {\n                    lo: BytePos(\n                        598,\n                    ),\n                    hi: BytePos(\n                        614,\n                    ),\n                    ctxt: #0,\n                },\n                expr: Assign(\n                    AssignExpr {\n                        span: Span {\n                            lo: BytePos(\n                                598,\n                            ),\n                            hi: BytePos(\n                                613,\n                            ),\n                            ctxt: #0,\n                        },\n                        op: \"=\",\n                        left: Pat(\n                            Expr(\n                                Member(\n                                    MemberExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                598,\n                                            ),\n                                            hi: BytePos(\n                                                609,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        obj: Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        598,\n                                                    ),\n                                                    hi: BytePos(\n                                                        601,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('let' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                        prop: Computed(\n                                            ComputedPropName {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        606,\n                                                    ),\n                                                    hi: BytePos(\n                                                        609,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                expr: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                607,\n                                                            ),\n                                                            hi: BytePos(\n                                                                608,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('a' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    },\n                                ),\n                            ),\n                        ),\n                        right: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            612,\n                                        ),\n                                        hi: BytePos(\n                                            613,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 0.0,\n                                    raw: Some(\n                                        \"0\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/let-block-with-newline.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                540,\n            ),\n            hi: BytePos(\n                546,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    540,\n                ),\n                hi: BytePos(\n                    541,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('L' type=inline),\n            optional: false,\n        },\n        body: Expr(\n            ExprStmt {\n                span: Span {\n                    lo: BytePos(\n                        543,\n                    ),\n                    hi: BytePos(\n                        546,\n                    ),\n                    ctxt: #0,\n                },\n                expr: Ident(\n                    Ident {\n                        span: Span {\n                            lo: BytePos(\n                                543,\n                            ),\n                            hi: BytePos(\n                                546,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('let' type=static),\n                        optional: false,\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/let-identifier-with-newline.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                559,\n            ),\n            hi: BytePos(\n                565,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    559,\n                ),\n                hi: BytePos(\n                    560,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('L' type=inline),\n            optional: false,\n        },\n        body: Expr(\n            ExprStmt {\n                span: Span {\n                    lo: BytePos(\n                        562,\n                    ),\n                    hi: BytePos(\n                        565,\n                    ),\n                    ctxt: #0,\n                },\n                expr: Ident(\n                    Ident {\n                        span: Span {\n                            lo: BytePos(\n                                562,\n                            ),\n                            hi: BytePos(\n                                565,\n                            ),\n                            ctxt: #0,\n                        },\n                        sym: Atom('let' type=static),\n                        optional: false,\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/static-init-invalid-await.js","error":null}
{"file_path":"test/language/statements/labeled/tco.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                454,\n            ),\n            hi: BytePos(\n                479,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    454,\n                ),\n                hi: BytePos(\n                    461,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('test262' type=inline),\n            optional: false,\n        },\n        body: Return(\n            ReturnStmt {\n                span: Span {\n                    lo: BytePos(\n                        463,\n                    ),\n                    hi: BytePos(\n                        479,\n                    ),\n                    ctxt: #0,\n                },\n                arg: Some(\n                    Call(\n                        CallExpr {\n                            span: Span {\n                                lo: BytePos(\n                                    470,\n                                ),\n                                hi: BytePos(\n                                    478,\n                                ),\n                                ctxt: #0,\n                            },\n                            callee: Expr(\n                                Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                470,\n                                            ),\n                                            hi: BytePos(\n                                                471,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('f' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                            ),\n                            args: [\n                                ExprOrSpread {\n                                    spread: None,\n                                    expr: Bin(\n                                        BinExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    472,\n                                                ),\n                                                hi: BytePos(\n                                                    477,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            op: \"-\",\n                                            left: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            472,\n                                                        ),\n                                                        hi: BytePos(\n                                                            473,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('n' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                            right: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                476,\n                                                            ),\n                                                            hi: BytePos(\n                                                                477,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 1.0,\n                                                        raw: Some(\n                                                            \"1\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ),\n                                },\n                            ],\n                            type_args: None,\n                        },\n                    ),\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/labeled/value-await-module-escaped.js","error":null}
{"file_path":"test/language/statements/labeled/value-await-module.js","error":null}
{"file_path":"test/language/statements/labeled/value-await-non-module-escaped.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/labeled/value-await-non-module-escaped.js"}}
{"file_path":"test/language/statements/labeled/value-await-non-module.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/labeled/value-await-non-module.js"}}
{"file_path":"test/language/statements/labeled/value-yield-non-strict-escaped.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/labeled/value-yield-non-strict-escaped.js"}}
{"file_path":"test/language/statements/labeled/value-yield-non-strict.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/labeled/value-yield-non-strict.js"}}
{"file_path":"test/language/statements/labeled/value-yield-strict-escaped.js","error":null}
{"file_path":"test/language/statements/labeled/value-yield-strict.js","error":null}
{"file_path":"test/language/statements/let/block-local-closure-get-before-initialization.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/let/block-local-closure-set-before-initialization.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/let/block-local-use-before-initialization-in-declaration-statement.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/let/block-local-use-before-initialization-in-prior-statement.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/let/cptn-value.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/let/dstr/ary-init-iter-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1234,\n        ),\n        hi: BytePos(\n            1244,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1234,\n                ),\n                hi: BytePos(\n                    1237,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1235,\n                                    ),\n                                    hi: BytePos(\n                                        1236,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1240,\n                    ),\n                    hi: BytePos(\n                        1244,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-init-iter-get-err-array-prototype.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1218,\n        ),\n        hi: BytePos(\n            1239,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1218,\n                ),\n                hi: BytePos(\n                    1227,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1219,\n                                    ),\n                                    hi: BytePos(\n                                        1220,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1222,\n                                    ),\n                                    hi: BytePos(\n                                        1223,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1225,\n                                    ),\n                                    hi: BytePos(\n                                        1226,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1230,\n                    ),\n                    hi: BytePos(\n                        1239,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1231,\n                                            ),\n                                            hi: BytePos(\n                                                1232,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1234,\n                                            ),\n                                            hi: BytePos(\n                                                1235,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1237,\n                                            ),\n                                            hi: BytePos(\n                                                1238,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-init-iter-get-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1064,\n        ),\n        hi: BytePos(\n            1074,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1064,\n                ),\n                hi: BytePos(\n                    1067,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1065,\n                                    ),\n                                    hi: BytePos(\n                                        1066,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1070,\n                    ),\n                    hi: BytePos(\n                        1074,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-init-iter-no-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1236,\n        ),\n        hi: BytePos(\n            1246,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1236,\n                ),\n                hi: BytePos(\n                    1239,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1237,\n                                    ),\n                                    hi: BytePos(\n                                        1238,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1242,\n                    ),\n                    hi: BytePos(\n                        1246,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-name-iter-val.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1499,\n        ),\n        hi: BytePos(\n            1520,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1499,\n                ),\n                hi: BytePos(\n                    1508,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1500,\n                                    ),\n                                    hi: BytePos(\n                                        1501,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1503,\n                                    ),\n                                    hi: BytePos(\n                                        1504,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1506,\n                                    ),\n                                    hi: BytePos(\n                                        1507,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1511,\n                    ),\n                    hi: BytePos(\n                        1520,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1512,\n                                            ),\n                                            hi: BytePos(\n                                                1513,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1515,\n                                            ),\n                                            hi: BytePos(\n                                                1516,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1518,\n                                            ),\n                                            hi: BytePos(\n                                                1519,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-elem-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1265,\n        ),\n        hi: BytePos(\n            1293,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1265,\n                ),\n                hi: BytePos(\n                    1288,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1266,\n                                ),\n                                hi: BytePos(\n                                    1287,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1266,\n                                        ),\n                                        hi: BytePos(\n                                            1275,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1267,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1268,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1270,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1271,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1273,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1274,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1278,\n                                        ),\n                                        hi: BytePos(\n                                            1287,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1279,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1280,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 4.0,\n                                                            raw: Some(\n                                                                \"4\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1282,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1283,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 5.0,\n                                                            raw: Some(\n                                                                \"5\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1285,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1286,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 6.0,\n                                                            raw: Some(\n                                                                \"6\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1291,\n                    ),\n                    hi: BytePos(\n                        1293,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-elem-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1227,\n        ),\n        hi: BytePos(\n            1264,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1227,\n                ),\n                hi: BytePos(\n                    1250,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1228,\n                                ),\n                                hi: BytePos(\n                                    1249,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1228,\n                                        ),\n                                        hi: BytePos(\n                                            1237,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1229,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1230,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1232,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1233,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1235,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1236,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1240,\n                                        ),\n                                        hi: BytePos(\n                                            1249,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1241,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1242,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 4.0,\n                                                            raw: Some(\n                                                                \"4\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1244,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1245,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 5.0,\n                                                            raw: Some(\n                                                                \"5\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1247,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1248,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 6.0,\n                                                            raw: Some(\n                                                                \"6\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1253,\n                    ),\n                    hi: BytePos(\n                        1264,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1254,\n                                        ),\n                                        hi: BytePos(\n                                            1263,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1255,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1256,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 7.0,\n                                                            raw: Some(\n                                                                \"7\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1258,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1259,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 8.0,\n                                                            raw: Some(\n                                                                \"8\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1261,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1262,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 9.0,\n                                                            raw: Some(\n                                                                \"9\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-elision-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1369,\n        ),\n        hi: BytePos(\n            1385,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1369,\n                ),\n                hi: BytePos(\n                    1380,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1370,\n                                ),\n                                hi: BytePos(\n                                    1379,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1370,\n                                        ),\n                                        hi: BytePos(\n                                            1373,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1376,\n                                        ),\n                                        hi: BytePos(\n                                            1379,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1376,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1377,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('g' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1383,\n                    ),\n                    hi: BytePos(\n                        1385,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-elision-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1299,\n        ),\n        hi: BytePos(\n            1317,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1299,\n                ),\n                hi: BytePos(\n                    1310,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1300,\n                                ),\n                                hi: BytePos(\n                                    1309,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1300,\n                                        ),\n                                        hi: BytePos(\n                                            1303,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1306,\n                                        ),\n                                        hi: BytePos(\n                                            1309,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1306,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1307,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('g' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1313,\n                    ),\n                    hi: BytePos(\n                        1317,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1314,\n                                        ),\n                                        hi: BytePos(\n                                            1316,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-empty-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1363,\n        ),\n        hi: BytePos(\n            1420,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1363,\n                ),\n                hi: BytePos(\n                    1415,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1364,\n                                ),\n                                hi: BytePos(\n                                    1414,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1364,\n                                        ),\n                                        hi: BytePos(\n                                            1366,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1369,\n                                        ),\n                                        hi: BytePos(\n                                            1414,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Fn(\n                                            FnExpr {\n                                                ident: None,\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1369,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1412,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1380,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1412,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [\n                                                                Expr(\n                                                                    ExprStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1382,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1397,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        expr: Assign(\n                                                                            AssignExpr {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        1382,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        1396,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                op: \"+=\",\n                                                                                left: Expr(\n                                                                                    Ident(\n                                                                                        Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1382,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1391,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('initCount' type=dynamic),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                                right: Lit(\n                                                                                    Num(\n                                                                                        Number {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1395,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1396,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: 1.0,\n                                                                                            raw: Some(\n                                                                                                \"1\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                                Return(\n                                                                    ReturnStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1398,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1410,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        arg: Some(\n                                                                            Ident(\n                                                                                Ident {\n                                                                                    span: Span {\n                                                                                        lo: BytePos(\n                                                                                            1405,\n                                                                                        ),\n                                                                                        hi: BytePos(\n                                                                                            1409,\n                                                                                        ),\n                                                                                        ctxt: #0,\n                                                                                    },\n                                                                                    sym: Atom('iter' type=inline),\n                                                                                    optional: false,\n                                                                                },\n                                                                            ),\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1418,\n                    ),\n                    hi: BytePos(\n                        1420,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-empty-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1247,\n        ),\n        hi: BytePos(\n            1295,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1247,\n                ),\n                hi: BytePos(\n                    1286,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1248,\n                                ),\n                                hi: BytePos(\n                                    1285,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1248,\n                                        ),\n                                        hi: BytePos(\n                                            1250,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1253,\n                                        ),\n                                        hi: BytePos(\n                                            1285,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Fn(\n                                            FnExpr {\n                                                ident: None,\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1253,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1283,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1264,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1283,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [\n                                                                Expr(\n                                                                    ExprStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1266,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1281,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        expr: Assign(\n                                                                            AssignExpr {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        1266,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        1280,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                op: \"+=\",\n                                                                                left: Expr(\n                                                                                    Ident(\n                                                                                        Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1266,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1275,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('initCount' type=dynamic),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                                right: Lit(\n                                                                                    Num(\n                                                                                        Number {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1279,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1280,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: 1.0,\n                                                                                            raw: Some(\n                                                                                                \"1\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1289,\n                    ),\n                    hi: BytePos(\n                        1295,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1290,\n                                        ),\n                                        hi: BytePos(\n                                            1294,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1291,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1293,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 23.0,\n                                                            raw: Some(\n                                                                \"23\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-rest-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1289,\n        ),\n        hi: BytePos(\n            1311,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1289,\n                ),\n                hi: BytePos(\n                    1306,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1290,\n                                ),\n                                hi: BytePos(\n                                    1305,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1290,\n                                        ),\n                                        hi: BytePos(\n                                            1296,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Rest(\n                                                RestPat {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1291,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1295,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    dot3_token: Span {\n                                                        lo: BytePos(\n                                                            1291,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1294,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1294,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1295,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1299,\n                                        ),\n                                        hi: BytePos(\n                                            1305,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('values' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1309,\n                    ),\n                    hi: BytePos(\n                        1311,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-rest-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1270,\n        ),\n        hi: BytePos(\n            1324,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1270,\n                ),\n                hi: BytePos(\n                    1313,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1271,\n                                ),\n                                hi: BytePos(\n                                    1312,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1271,\n                                        ),\n                                        hi: BytePos(\n                                            1277,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Rest(\n                                                RestPat {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1272,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1276,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    dot3_token: Span {\n                                                        lo: BytePos(\n                                                            1272,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1275,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1275,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1276,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1280,\n                                        ),\n                                        hi: BytePos(\n                                            1312,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Fn(\n                                            FnExpr {\n                                                ident: None,\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1280,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1310,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1291,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1310,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [\n                                                                Expr(\n                                                                    ExprStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1293,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1308,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        expr: Assign(\n                                                                            AssignExpr {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        1293,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        1307,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                op: \"+=\",\n                                                                                left: Expr(\n                                                                                    Ident(\n                                                                                        Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1293,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1302,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('initCount' type=dynamic),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                                right: Lit(\n                                                                                    Num(\n                                                                                        Number {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1306,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1307,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: 1.0,\n                                                                                            raw: Some(\n                                                                                                \"1\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1316,\n                    ),\n                    hi: BytePos(\n                        1324,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1317,\n                                        ),\n                                        hi: BytePos(\n                                            1323,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('values' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-ary-val-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1347,\n        ),\n        hi: BytePos(\n            1361,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1347,\n                ),\n                hi: BytePos(\n                    1352,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Array(\n                        ArrayPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1348,\n                                ),\n                                hi: BytePos(\n                                    1351,\n                                ),\n                                ctxt: #0,\n                            },\n                            elems: [\n                                Some(\n                                    Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1349,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1350,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                ),\n                            ],\n                            optional: false,\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1355,\n                    ),\n                    hi: BytePos(\n                        1361,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1356,\n                                            ),\n                                            hi: BytePos(\n                                                1360,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1258,\n        ),\n        hi: BytePos(\n            1271,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1258,\n                ),\n                hi: BytePos(\n                    1266,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1259,\n                                ),\n                                hi: BytePos(\n                                    1265,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1259,\n                                            ),\n                                            hi: BytePos(\n                                                1260,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1263,\n                                            ),\n                                            hi: BytePos(\n                                                1265,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 23.0,\n                                        raw: Some(\n                                            \"23\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1269,\n                    ),\n                    hi: BytePos(\n                        1271,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1302,\n        ),\n        hi: BytePos(\n            1325,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1302,\n                ),\n                hi: BytePos(\n                    1320,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1303,\n                                ),\n                                hi: BytePos(\n                                    1319,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1303,\n                                            ),\n                                            hi: BytePos(\n                                                1308,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('arrow' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Arrow(\n                                ArrowExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1311,\n                                        ),\n                                        hi: BytePos(\n                                            1319,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    params: [],\n                                    body: BlockStmt(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1317,\n                                                ),\n                                                hi: BytePos(\n                                                    1319,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_async: false,\n                                    is_generator: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1323,\n                    ),\n                    hi: BytePos(\n                        1325,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1304,\n        ),\n        hi: BytePos(\n            1380,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1304,\n                ),\n                hi: BytePos(\n                    1375,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1305,\n                                ),\n                                hi: BytePos(\n                                    1319,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1305,\n                                            ),\n                                            hi: BytePos(\n                                                1308,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('cls' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Class(\n                                ClassExpr {\n                                    ident: None,\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1311,\n                                            ),\n                                            hi: BytePos(\n                                                1319,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1321,\n                                ),\n                                hi: BytePos(\n                                    1338,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1321,\n                                            ),\n                                            hi: BytePos(\n                                                1325,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xCls' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Class(\n                                ClassExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1334,\n                                                ),\n                                                hi: BytePos(\n                                                    1335,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('X' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1328,\n                                            ),\n                                            hi: BytePos(\n                                                1338,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1340,\n                                ),\n                                hi: BytePos(\n                                    1374,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1340,\n                                            ),\n                                            hi: BytePos(\n                                                1345,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xCls2' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Class(\n                                ClassExpr {\n                                    ident: None,\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1348,\n                                            ),\n                                            hi: BytePos(\n                                                1374,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [\n                                            Method(\n                                                ClassMethod {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1356,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1372,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1363,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1367,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('name' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1356,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1372,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1370,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1372,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                    kind: Method,\n                                                    is_static: true,\n                                                    accessibility: None,\n                                                    is_abstract: false,\n                                                    is_optional: false,\n                                                    is_override: false,\n                                                },\n                                            ),\n                                        ],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1378,\n                    ),\n                    hi: BytePos(\n                        1380,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1332,\n        ),\n        hi: BytePos(\n            1392,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1332,\n                ),\n                hi: BytePos(\n                    1387,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1333,\n                                ),\n                                hi: BytePos(\n                                    1357,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1333,\n                                            ),\n                                            hi: BytePos(\n                                                1338,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('cover' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Paren(\n                                ParenExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1341,\n                                        ),\n                                        hi: BytePos(\n                                            1357,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1342,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1356,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1354,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1356,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1359,\n                                ),\n                                hi: BytePos(\n                                    1386,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1359,\n                                            ),\n                                            hi: BytePos(\n                                                1365,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xCover' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Paren(\n                                ParenExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1368,\n                                        ),\n                                        hi: BytePos(\n                                            1386,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Seq(\n                                        SeqExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1369,\n                                                ),\n                                                hi: BytePos(\n                                                    1385,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            exprs: [\n                                                Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1369,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1370,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 0.0,\n                                                            raw: Some(\n                                                                \"0\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Fn(\n                                                    FnExpr {\n                                                        ident: None,\n                                                        function: Function {\n                                                            params: [],\n                                                            decorators: [],\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1372,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1385,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            body: Some(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1383,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1385,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [],\n                                                                },\n                                                            ),\n                                                            is_generator: false,\n                                                            is_async: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                    },\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1390,\n                    ),\n                    hi: BytePos(\n                        1392,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1301,\n        ),\n        hi: BytePos(\n            1350,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1301,\n                ),\n                hi: BytePos(\n                    1345,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1302,\n                                ),\n                                hi: BytePos(\n                                    1321,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1302,\n                                            ),\n                                            hi: BytePos(\n                                                1304,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('fn' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1307,\n                                            ),\n                                            hi: BytePos(\n                                                1321,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1319,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1321,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1323,\n                                ),\n                                hi: BytePos(\n                                    1344,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1323,\n                                            ),\n                                            hi: BytePos(\n                                                1326,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xFn' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Fn(\n                                FnExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1338,\n                                                ),\n                                                hi: BytePos(\n                                                    1339,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1329,\n                                            ),\n                                            hi: BytePos(\n                                                1344,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1342,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1344,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1348,\n                    ),\n                    hi: BytePos(\n                        1350,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1325,\n        ),\n        hi: BytePos(\n            1378,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1325,\n                ),\n                hi: BytePos(\n                    1373,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1326,\n                                ),\n                                hi: BytePos(\n                                    1347,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1326,\n                                            ),\n                                            hi: BytePos(\n                                                1329,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('gen' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1332,\n                                            ),\n                                            hi: BytePos(\n                                                1347,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1345,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1347,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: true,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1349,\n                                ),\n                                hi: BytePos(\n                                    1372,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1349,\n                                            ),\n                                            hi: BytePos(\n                                                1353,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xGen' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Fn(\n                                FnExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1366,\n                                                ),\n                                                hi: BytePos(\n                                                    1367,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1356,\n                                            ),\n                                            hi: BytePos(\n                                                1372,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1370,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1372,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: true,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1376,\n                    ),\n                    hi: BytePos(\n                        1378,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-hole.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1167,\n        ),\n        hi: BytePos(\n            1181,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1167,\n                ),\n                hi: BytePos(\n                    1175,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1168,\n                                ),\n                                hi: BytePos(\n                                    1174,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1168,\n                                            ),\n                                            hi: BytePos(\n                                                1169,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1172,\n                                            ),\n                                            hi: BytePos(\n                                                1174,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 23.0,\n                                        raw: Some(\n                                            \"23\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1178,\n                    ),\n                    hi: BytePos(\n                        1181,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    None,\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1162,\n        ),\n        hi: BytePos(\n            1245,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1162,\n                ),\n                hi: BytePos(\n                    1222,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1163,\n                                ),\n                                hi: BytePos(\n                                    1176,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1163,\n                                            ),\n                                            hi: BytePos(\n                                                1164,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1167,\n                                        ),\n                                        hi: BytePos(\n                                            1176,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1167,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1174,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1178,\n                                ),\n                                hi: BytePos(\n                                    1191,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1178,\n                                            ),\n                                            hi: BytePos(\n                                                1179,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1182,\n                                        ),\n                                        hi: BytePos(\n                                            1191,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1182,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1189,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1193,\n                                ),\n                                hi: BytePos(\n                                    1206,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1193,\n                                            ),\n                                            hi: BytePos(\n                                                1194,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1197,\n                                        ),\n                                        hi: BytePos(\n                                            1206,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1197,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1204,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1208,\n                                ),\n                                hi: BytePos(\n                                    1221,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1208,\n                                            ),\n                                            hi: BytePos(\n                                                1209,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('z' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1212,\n                                        ),\n                                        hi: BytePos(\n                                            1221,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1212,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1219,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1225,\n                    ),\n                    hi: BytePos(\n                        1245,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1226,\n                                            ),\n                                            hi: BytePos(\n                                                1230,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1232,\n                                            ),\n                                            hi: BytePos(\n                                                1233,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 0.0,\n                                        raw: Some(\n                                            \"0\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Bool(\n                                    Bool {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1235,\n                                            ),\n                                            hi: BytePos(\n                                                1240,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: false,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Str(\n                                    Str {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1242,\n                                            ),\n                                            hi: BytePos(\n                                                1244,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: Atom('' type=static),\n                                        raw: Some(\n                                            \"''\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1139,\n        ),\n        hi: BytePos(\n            1203,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1139,\n                ),\n                hi: BytePos(\n                    1189,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1140,\n                                ),\n                                hi: BytePos(\n                                    1188,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1140,\n                                            ),\n                                            hi: BytePos(\n                                                1141,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1144,\n                                        ),\n                                        hi: BytePos(\n                                            1188,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Paren(\n                                            ParenExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1144,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1186,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                expr: Fn(\n                                                    FnExpr {\n                                                        ident: None,\n                                                        function: Function {\n                                                            params: [],\n                                                            decorators: [],\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1145,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1185,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            body: Some(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1156,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1185,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [\n                                                                        Throw(\n                                                                            ThrowStmt {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        1158,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        1183,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                arg: New(\n                                                                                    NewExpr {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                1164,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                1182,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        callee: Ident(\n                                                                                            Ident {\n                                                                                                span: Span {\n                                                                                                    lo: BytePos(\n                                                                                                        1168,\n                                                                                                    ),\n                                                                                                    hi: BytePos(\n                                                                                                        1180,\n                                                                                                    ),\n                                                                                                    ctxt: #0,\n                                                                                                },\n                                                                                                sym: Atom('Test262Error' type=dynamic),\n                                                                                                optional: false,\n                                                                                            },\n                                                                                        ),\n                                                                                        args: Some(\n                                                                                            [],\n                                                                                        ),\n                                                                                        type_args: None,\n                                                                                    },\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    ],\n                                                                },\n                                                            ),\n                                                            is_generator: false,\n                                                            is_async: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1192,\n                    ),\n                    hi: BytePos(\n                        1203,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1193,\n                                        ),\n                                        hi: BytePos(\n                                            1202,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('undefined' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1188,\n        ),\n        hi: BytePos(\n            1210,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1188,\n                ),\n                hi: BytePos(\n                    1196,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1189,\n                                ),\n                                hi: BytePos(\n                                    1195,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1189,\n                                            ),\n                                            hi: BytePos(\n                                                1190,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1193,\n                                            ),\n                                            hi: BytePos(\n                                                1195,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 23.0,\n                                        raw: Some(\n                                            \"23\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1199,\n                    ),\n                    hi: BytePos(\n                        1210,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1200,\n                                        ),\n                                        hi: BytePos(\n                                            1209,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('undefined' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1349,\n        ),\n        hi: BytePos(\n            1383,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1349,\n                ),\n                hi: BytePos(\n                    1378,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1351,\n                                ),\n                                hi: BytePos(\n                                    1376,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1351,\n                                            ),\n                                            hi: BytePos(\n                                                1352,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1355,\n                                        ),\n                                        hi: BytePos(\n                                            1376,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('unresolvableReference' type=dynamic),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1381,\n                    ),\n                    hi: BytePos(\n                        1383,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-iter-complete.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1343,\n        ),\n        hi: BytePos(\n            1351,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1343,\n                ),\n                hi: BytePos(\n                    1346,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1344,\n                                    ),\n                                    hi: BytePos(\n                                        1345,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1349,\n                    ),\n                    hi: BytePos(\n                        1351,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-iter-done.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1093,\n        ),\n        hi: BytePos(\n            1104,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1093,\n                ),\n                hi: BytePos(\n                    1099,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1094,\n                                    ),\n                                    hi: BytePos(\n                                        1095,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('_' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1097,\n                                    ),\n                                    hi: BytePos(\n                                        1098,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1102,\n                    ),\n                    hi: BytePos(\n                        1104,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-iter-step-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1322,\n        ),\n        hi: BytePos(\n            1329,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1322,\n                ),\n                hi: BytePos(\n                    1325,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1323,\n                                    ),\n                                    hi: BytePos(\n                                        1324,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1328,\n                    ),\n                    hi: BytePos(\n                        1329,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('g' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1796,\n        ),\n        hi: BytePos(\n            1817,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1796,\n                ),\n                hi: BytePos(\n                    1805,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1797,\n                                    ),\n                                    hi: BytePos(\n                                        1798,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1800,\n                                    ),\n                                    hi: BytePos(\n                                        1801,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1803,\n                                    ),\n                                    hi: BytePos(\n                                        1804,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1808,\n                    ),\n                    hi: BytePos(\n                        1817,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1809,\n                                            ),\n                                            hi: BytePos(\n                                                1810,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1812,\n                                            ),\n                                            hi: BytePos(\n                                                1813,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1815,\n                                            ),\n                                            hi: BytePos(\n                                                1816,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-iter-val-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1686,\n        ),\n        hi: BytePos(\n            1693,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1686,\n                ),\n                hi: BytePos(\n                    1689,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1687,\n                                    ),\n                                    hi: BytePos(\n                                        1688,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1692,\n                    ),\n                    hi: BytePos(\n                        1693,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('g' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-id-iter-val.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1525,\n        ),\n        hi: BytePos(\n            1546,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1525,\n                ),\n                hi: BytePos(\n                    1534,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1526,\n                                    ),\n                                    hi: BytePos(\n                                        1527,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1529,\n                                    ),\n                                    hi: BytePos(\n                                        1530,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1532,\n                                    ),\n                                    hi: BytePos(\n                                        1533,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1537,\n                    ),\n                    hi: BytePos(\n                        1546,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1538,\n                                            ),\n                                            hi: BytePos(\n                                                1539,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1541,\n                                            ),\n                                            hi: BytePos(\n                                                1542,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1544,\n                                            ),\n                                            hi: BytePos(\n                                                1545,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-obj-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1264,\n        ),\n        hi: BytePos(\n            1308,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1264,\n                ),\n                hi: BytePos(\n                    1303,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1265,\n                                ),\n                                hi: BytePos(\n                                    1302,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1265,\n                                        ),\n                                        hi: BytePos(\n                                            1276,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1267,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1268,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1267,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1268,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1270,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1271,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1270,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1271,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1273,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1274,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1273,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1274,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1279,\n                                        ),\n                                        hi: BytePos(\n                                            1302,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1281,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1282,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1284,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1286,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 44.0,\n                                                                raw: Some(\n                                                                    \"44\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1288,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1289,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1291,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1293,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 55.0,\n                                                                raw: Some(\n                                                                    \"55\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1295,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1296,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1298,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1300,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 66.0,\n                                                                raw: Some(\n                                                                    \"66\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1306,\n                    ),\n                    hi: BytePos(\n                        1308,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-obj-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1263,\n        ),\n        hi: BytePos(\n            1330,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1263,\n                ),\n                hi: BytePos(\n                    1302,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1264,\n                                ),\n                                hi: BytePos(\n                                    1301,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1264,\n                                        ),\n                                        hi: BytePos(\n                                            1275,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1266,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1267,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1266,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1267,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1269,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1270,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1269,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1270,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1272,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1273,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1272,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1273,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1278,\n                                        ),\n                                        hi: BytePos(\n                                            1301,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1280,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1281,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1283,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1285,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 44.0,\n                                                                raw: Some(\n                                                                    \"44\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1287,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1288,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1290,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1292,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 55.0,\n                                                                raw: Some(\n                                                                    \"55\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1294,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1295,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1297,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1299,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 66.0,\n                                                                raw: Some(\n                                                                    \"66\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1305,\n                    ),\n                    hi: BytePos(\n                        1330,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1306,\n                                        ),\n                                        hi: BytePos(\n                                            1329,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1308,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1309,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1311,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1313,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 11.0,\n                                                                raw: Some(\n                                                                    \"11\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1315,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1316,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1318,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1320,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 22.0,\n                                                                raw: Some(\n                                                                    \"22\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1322,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1323,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1325,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1327,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 33.0,\n                                                                raw: Some(\n                                                                    \"33\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-obj-prop-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1269,\n        ),\n        hi: BytePos(\n            1325,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1269,\n                ),\n                hi: BytePos(\n                    1320,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1270,\n                                ),\n                                hi: BytePos(\n                                    1319,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1270,\n                                        ),\n                                        hi: BytePos(\n                                            1290,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1272,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1273,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('u' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1275,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1276,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('v' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1278,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1279,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('w' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1281,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1282,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1284,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1285,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1287,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1288,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1293,\n                                        ),\n                                        hi: BytePos(\n                                            1319,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1295,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1296,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1298,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1301,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 444.0,\n                                                                raw: Some(\n                                                                    \"444\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1303,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1304,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1306,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1309,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 555.0,\n                                                                raw: Some(\n                                                                    \"555\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1311,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1312,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1314,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1317,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 666.0,\n                                                                raw: Some(\n                                                                    \"666\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1323,\n                    ),\n                    hi: BytePos(\n                        1325,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-obj-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1268,\n        ),\n        hi: BytePos(\n            1350,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1268,\n                ),\n                hi: BytePos(\n                    1319,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1269,\n                                ),\n                                hi: BytePos(\n                                    1318,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1269,\n                                        ),\n                                        hi: BytePos(\n                                            1289,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1271,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1272,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('u' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1274,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1275,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('v' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1277,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1278,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('w' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1280,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1281,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1283,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1284,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1286,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1287,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1292,\n                                        ),\n                                        hi: BytePos(\n                                            1318,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1294,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1295,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1297,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1300,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 444.0,\n                                                                raw: Some(\n                                                                    \"444\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1302,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1303,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1305,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1308,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 555.0,\n                                                                raw: Some(\n                                                                    \"555\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1310,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1311,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1313,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1316,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 666.0,\n                                                                raw: Some(\n                                                                    \"666\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1322,\n                    ),\n                    hi: BytePos(\n                        1350,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1323,\n                                        ),\n                                        hi: BytePos(\n                                            1349,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1325,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1326,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1328,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1331,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 777.0,\n                                                                raw: Some(\n                                                                    \"777\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1333,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1334,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1336,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1339,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 888.0,\n                                                                raw: Some(\n                                                                    \"888\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1341,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1342,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1344,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1347,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 999.0,\n                                                                raw: Some(\n                                                                    \"999\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-obj-val-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1354,\n        ),\n        hi: BytePos(\n            1370,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1354,\n                ),\n                hi: BytePos(\n                    1361,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Object(\n                        ObjectPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1355,\n                                ),\n                                hi: BytePos(\n                                    1360,\n                                ),\n                                ctxt: #0,\n                            },\n                            props: [\n                                Assign(\n                                    AssignPatProp {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1357,\n                                            ),\n                                            hi: BytePos(\n                                                1358,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        key: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1357,\n                                                ),\n                                                hi: BytePos(\n                                                    1358,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        value: None,\n                                    },\n                                ),\n                            ],\n                            optional: false,\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1364,\n                    ),\n                    hi: BytePos(\n                        1370,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1365,\n                                            ),\n                                            hi: BytePos(\n                                                1369,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elem-obj-val-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1365,\n        ),\n        hi: BytePos(\n            1377,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1365,\n                ),\n                hi: BytePos(\n                    1372,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Object(\n                        ObjectPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1366,\n                                ),\n                                hi: BytePos(\n                                    1371,\n                                ),\n                                ctxt: #0,\n                            },\n                            props: [\n                                Assign(\n                                    AssignPatProp {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1368,\n                                            ),\n                                            hi: BytePos(\n                                                1369,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        key: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1368,\n                                                ),\n                                                hi: BytePos(\n                                                    1369,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        value: None,\n                                    },\n                                ),\n                            ],\n                            optional: false,\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1375,\n                    ),\n                    hi: BytePos(\n                        1377,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elision-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1242,\n        ),\n        hi: BytePos(\n            1252,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1242,\n                ),\n                hi: BytePos(\n                    1245,\n                ),\n                ctxt: #0,\n            },\n            elems: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1248,\n                    ),\n                    hi: BytePos(\n                        1252,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elision-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-elision.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1498,\n        ),\n        hi: BytePos(\n            1507,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1498,\n                ),\n                hi: BytePos(\n                    1501,\n                ),\n                ctxt: #0,\n            },\n            elems: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Call(\n            CallExpr {\n                span: Span {\n                    lo: BytePos(\n                        1504,\n                    ),\n                    hi: BytePos(\n                        1507,\n                    ),\n                    ctxt: #0,\n                },\n                callee: Expr(\n                    Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1504,\n                                ),\n                                hi: BytePos(\n                                    1505,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('g' type=static),\n                            optional: false,\n                        },\n                    ),\n                ),\n                args: [],\n                type_args: None,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-empty.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            972,\n        ),\n        hi: BytePos(\n            981,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    972,\n                ),\n                hi: BytePos(\n                    974,\n                ),\n                ctxt: #0,\n            },\n            elems: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        977,\n                    ),\n                    hi: BytePos(\n                        981,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-ary-elem.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1899,\n        ),\n        hi: BytePos(\n            1925,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1899,\n                ),\n                hi: BytePos(\n                    1913,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1900,\n                                ),\n                                hi: BytePos(\n                                    1912,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1900,\n                                ),\n                                hi: BytePos(\n                                    1903,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1903,\n                                        ),\n                                        hi: BytePos(\n                                            1912,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1904,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1905,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1907,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1908,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1910,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1911,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1916,\n                    ),\n                    hi: BytePos(\n                        1925,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1917,\n                                            ),\n                                            hi: BytePos(\n                                                1918,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1920,\n                                            ),\n                                            hi: BytePos(\n                                                1921,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 4.0,\n                                        raw: Some(\n                                            \"4\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1923,\n                                            ),\n                                            hi: BytePos(\n                                                1924,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 5.0,\n                                        raw: Some(\n                                            \"5\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-ary-elision.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1897,\n        ),\n        hi: BytePos(\n            1911,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1897,\n                ),\n                hi: BytePos(\n                    1905,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1898,\n                                ),\n                                hi: BytePos(\n                                    1904,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1898,\n                                ),\n                                hi: BytePos(\n                                    1901,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1901,\n                                        ),\n                                        hi: BytePos(\n                                            1904,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Call(\n            CallExpr {\n                span: Span {\n                    lo: BytePos(\n                        1908,\n                    ),\n                    hi: BytePos(\n                        1911,\n                    ),\n                    ctxt: #0,\n                },\n                callee: Expr(\n                    Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1908,\n                                ),\n                                hi: BytePos(\n                                    1909,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('g' type=static),\n                            optional: false,\n                        },\n                    ),\n                ),\n                args: [],\n                type_args: None,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-ary-empty.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1354,\n        ),\n        hi: BytePos(\n            1368,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1354,\n                ),\n                hi: BytePos(\n                    1361,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1355,\n                                ),\n                                hi: BytePos(\n                                    1360,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1355,\n                                ),\n                                hi: BytePos(\n                                    1358,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1358,\n                                        ),\n                                        hi: BytePos(\n                                            1360,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1364,\n                    ),\n                    hi: BytePos(\n                        1368,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-ary-rest.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1151,\n        ),\n        hi: BytePos(\n            1171,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1151,\n                ),\n                hi: BytePos(\n                    1162,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1152,\n                                ),\n                                hi: BytePos(\n                                    1161,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1152,\n                                ),\n                                hi: BytePos(\n                                    1155,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1155,\n                                        ),\n                                        hi: BytePos(\n                                            1161,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Rest(\n                                                RestPat {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1156,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1160,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    dot3_token: Span {\n                                                        lo: BytePos(\n                                                            1156,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1159,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1159,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1160,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1165,\n                    ),\n                    hi: BytePos(\n                        1171,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-id-direct.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1071,\n        ),\n        hi: BytePos(\n            1083,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1071,\n                ),\n                hi: BytePos(\n                    1077,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1072,\n                                ),\n                                hi: BytePos(\n                                    1076,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1072,\n                                ),\n                                hi: BytePos(\n                                    1075,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1075,\n                                            ),\n                                            hi: BytePos(\n                                                1076,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1080,\n                    ),\n                    hi: BytePos(\n                        1083,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1081,\n                                            ),\n                                            hi: BytePos(\n                                                1082,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-id-elision-next-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-id-elision.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1279,\n        ),\n        hi: BytePos(\n            1299,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1279,\n                ),\n                hi: BytePos(\n                    1290,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                None,\n                None,\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1285,\n                                ),\n                                hi: BytePos(\n                                    1289,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1285,\n                                ),\n                                hi: BytePos(\n                                    1288,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1288,\n                                            ),\n                                            hi: BytePos(\n                                                1289,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1293,\n                    ),\n                    hi: BytePos(\n                        1299,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-id-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1240,\n        ),\n        hi: BytePos(\n            1259,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1240,\n                ),\n                hi: BytePos(\n                    1250,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                None,\n                None,\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1245,\n                                ),\n                                hi: BytePos(\n                                    1249,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1245,\n                                ),\n                                hi: BytePos(\n                                    1248,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1248,\n                                            ),\n                                            hi: BytePos(\n                                                1249,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1253,\n                    ),\n                    hi: BytePos(\n                        1259,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1254,\n                                            ),\n                                            hi: BytePos(\n                                                1255,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1257,\n                                            ),\n                                            hi: BytePos(\n                                                1258,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-id-iter-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-id-iter-val-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1551,\n        ),\n        hi: BytePos(\n            1564,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1551,\n                ),\n                hi: BytePos(\n                    1557,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1552,\n                                ),\n                                hi: BytePos(\n                                    1556,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1552,\n                                ),\n                                hi: BytePos(\n                                    1555,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1555,\n                                            ),\n                                            hi: BytePos(\n                                                1556,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1560,\n                    ),\n                    hi: BytePos(\n                        1564,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1005,\n        ),\n        hi: BytePos(\n            1020,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1005,\n                ),\n                hi: BytePos(\n                    1011,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1006,\n                                ),\n                                hi: BytePos(\n                                    1010,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1006,\n                                ),\n                                hi: BytePos(\n                                    1009,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1009,\n                                            ),\n                                            hi: BytePos(\n                                                1010,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1014,\n                    ),\n                    hi: BytePos(\n                        1020,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-init-ary.js","error":null}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-init-id.js","error":null}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-init-obj.js","error":null}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-not-final-ary.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1097,\n        ),\n        hi: BytePos(\n            1120,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1097,\n                ),\n                hi: BytePos(\n                    1108,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1098,\n                                ),\n                                hi: BytePos(\n                                    1104,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1098,\n                                ),\n                                hi: BytePos(\n                                    1101,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1101,\n                                        ),\n                                        hi: BytePos(\n                                            1104,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1102,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1103,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1106,\n                                    ),\n                                    hi: BytePos(\n                                        1107,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1111,\n                    ),\n                    hi: BytePos(\n                        1120,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1112,\n                                            ),\n                                            hi: BytePos(\n                                                1113,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1115,\n                                            ),\n                                            hi: BytePos(\n                                                1116,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1118,\n                                            ),\n                                            hi: BytePos(\n                                                1119,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-not-final-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1085,\n        ),\n        hi: BytePos(\n            1106,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1085,\n                ),\n                hi: BytePos(\n                    1094,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1086,\n                                ),\n                                hi: BytePos(\n                                    1090,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1086,\n                                ),\n                                hi: BytePos(\n                                    1089,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1089,\n                                            ),\n                                            hi: BytePos(\n                                                1090,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1092,\n                                    ),\n                                    hi: BytePos(\n                                        1093,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1097,\n                    ),\n                    hi: BytePos(\n                        1106,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1098,\n                                            ),\n                                            hi: BytePos(\n                                                1099,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1101,\n                                            ),\n                                            hi: BytePos(\n                                                1102,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1104,\n                                            ),\n                                            hi: BytePos(\n                                                1105,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-not-final-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1098,\n        ),\n        hi: BytePos(\n            1123,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1098,\n                ),\n                hi: BytePos(\n                    1111,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1099,\n                                ),\n                                hi: BytePos(\n                                    1107,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1099,\n                                ),\n                                hi: BytePos(\n                                    1102,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1102,\n                                        ),\n                                        hi: BytePos(\n                                            1107,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1104,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1105,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1104,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1105,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1109,\n                                    ),\n                                    hi: BytePos(\n                                        1110,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1114,\n                    ),\n                    hi: BytePos(\n                        1123,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1115,\n                                            ),\n                                            hi: BytePos(\n                                                1116,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1118,\n                                            ),\n                                            hi: BytePos(\n                                                1119,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1121,\n                                            ),\n                                            hi: BytePos(\n                                                1122,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-obj-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1136,\n        ),\n        hi: BytePos(\n            1163,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1136,\n                ),\n                hi: BytePos(\n                    1151,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1137,\n                                ),\n                                hi: BytePos(\n                                    1150,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1137,\n                                ),\n                                hi: BytePos(\n                                    1140,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1140,\n                                        ),\n                                        hi: BytePos(\n                                            1150,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1142,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1148,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1142,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1148,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('length' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1154,\n                    ),\n                    hi: BytePos(\n                        1163,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1155,\n                                            ),\n                                            hi: BytePos(\n                                                1156,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1158,\n                                            ),\n                                            hi: BytePos(\n                                                1159,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1161,\n                                            ),\n                                            hi: BytePos(\n                                                1162,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/ary-ptrn-rest-obj-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1163,\n        ),\n        hi: BytePos(\n            1217,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1163,\n                ),\n                hi: BytePos(\n                    1205,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1164,\n                                ),\n                                hi: BytePos(\n                                    1204,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1164,\n                                ),\n                                hi: BytePos(\n                                    1167,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1167,\n                                        ),\n                                        hi: BytePos(\n                                            1204,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1169,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1170,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 0.0,\n                                                        raw: Some(\n                                                            \"0\",\n                                                        ),\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1172,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1173,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('v' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1175,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1176,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 1.0,\n                                                        raw: Some(\n                                                            \"1\",\n                                                        ),\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1178,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1179,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1181,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1182,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 2.0,\n                                                        raw: Some(\n                                                            \"2\",\n                                                        ),\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1184,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1185,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1187,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1188,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 3.0,\n                                                        raw: Some(\n                                                            \"3\",\n                                                        ),\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1190,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1191,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1193,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1199,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('length' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1201,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1202,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1208,\n                    ),\n                    hi: BytePos(\n                        1217,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1209,\n                                            ),\n                                            hi: BytePos(\n                                                1210,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 7.0,\n                                        raw: Some(\n                                            \"7\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1212,\n                                            ),\n                                            hi: BytePos(\n                                                1213,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 8.0,\n                                        raw: Some(\n                                            \"8\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1215,\n                                            ),\n                                            hi: BytePos(\n                                                1216,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 9.0,\n                                        raw: Some(\n                                            \"9\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-init-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            928,\n        ),\n        hi: BytePos(\n            937,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    928,\n                ),\n                hi: BytePos(\n                    930,\n                ),\n                ctxt: #0,\n            },\n            props: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Lit(\n            Null(\n                Null {\n                    span: Span {\n                        lo: BytePos(\n                            933,\n                        ),\n                        hi: BytePos(\n                            937,\n                        ),\n                        ctxt: #0,\n                    },\n                },\n            ),\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-init-undefined.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            938,\n        ),\n        hi: BytePos(\n            952,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    938,\n                ),\n                hi: BytePos(\n                    940,\n                ),\n                ctxt: #0,\n            },\n            props: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        943,\n                    ),\n                    hi: BytePos(\n                        952,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('undefined' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-empty.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            998,\n        ),\n        hi: BytePos(\n            1006,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    998,\n                ),\n                hi: BytePos(\n                    1000,\n                ),\n                ctxt: #0,\n            },\n            props: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1003,\n                    ),\n                    hi: BytePos(\n                        1006,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('obj' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-get-value-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1145,\n        ),\n        hi: BytePos(\n            1176,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1145,\n                ),\n                hi: BytePos(\n                    1157,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1147,\n                            ),\n                            hi: BytePos(\n                                1155,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1147,\n                                ),\n                                hi: BytePos(\n                                    1155,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('poisoned' type=dynamic),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1160,\n                    ),\n                    hi: BytePos(\n                        1176,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('poisonedProperty' type=dynamic),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-arrow.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1245,\n        ),\n        hi: BytePos(\n            1270,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1245,\n                ),\n                hi: BytePos(\n                    1265,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1247,\n                            ),\n                            hi: BytePos(\n                                1263,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1247,\n                                ),\n                                hi: BytePos(\n                                    1252,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('arrow' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Arrow(\n                                ArrowExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1255,\n                                        ),\n                                        hi: BytePos(\n                                            1263,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    params: [],\n                                    body: BlockStmt(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1261,\n                                                ),\n                                                hi: BytePos(\n                                                    1263,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_async: false,\n                                    is_generator: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1268,\n                    ),\n                    hi: BytePos(\n                        1270,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1249,\n        ),\n        hi: BytePos(\n            1327,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1249,\n                ),\n                hi: BytePos(\n                    1322,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1251,\n                            ),\n                            hi: BytePos(\n                                1265,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1251,\n                                ),\n                                hi: BytePos(\n                                    1254,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('cls' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Class(\n                                ClassExpr {\n                                    ident: None,\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1257,\n                                            ),\n                                            hi: BytePos(\n                                                1265,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1267,\n                            ),\n                            hi: BytePos(\n                                1284,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1267,\n                                ),\n                                hi: BytePos(\n                                    1271,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xCls' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Class(\n                                ClassExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1280,\n                                                ),\n                                                hi: BytePos(\n                                                    1281,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('X' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1274,\n                                            ),\n                                            hi: BytePos(\n                                                1284,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1286,\n                            ),\n                            hi: BytePos(\n                                1320,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1286,\n                                ),\n                                hi: BytePos(\n                                    1291,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xCls2' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Class(\n                                ClassExpr {\n                                    ident: None,\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1294,\n                                            ),\n                                            hi: BytePos(\n                                                1320,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [\n                                            Method(\n                                                ClassMethod {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1302,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1318,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1309,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1313,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('name' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1302,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1318,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1316,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1318,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                    kind: Method,\n                                                    is_static: true,\n                                                    accessibility: None,\n                                                    is_abstract: false,\n                                                    is_optional: false,\n                                                    is_override: false,\n                                                },\n                                            ),\n                                        ],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1325,\n                    ),\n                    hi: BytePos(\n                        1327,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1275,\n        ),\n        hi: BytePos(\n            1338,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1275,\n                ),\n                hi: BytePos(\n                    1333,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1277,\n                            ),\n                            hi: BytePos(\n                                1301,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1277,\n                                ),\n                                hi: BytePos(\n                                    1282,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('cover' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Paren(\n                                ParenExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1285,\n                                        ),\n                                        hi: BytePos(\n                                            1301,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1286,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1300,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1298,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1300,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1303,\n                            ),\n                            hi: BytePos(\n                                1330,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1303,\n                                ),\n                                hi: BytePos(\n                                    1309,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xCover' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Paren(\n                                ParenExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1312,\n                                        ),\n                                        hi: BytePos(\n                                            1330,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Seq(\n                                        SeqExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1313,\n                                                ),\n                                                hi: BytePos(\n                                                    1329,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            exprs: [\n                                                Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1313,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1314,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 0.0,\n                                                            raw: Some(\n                                                                \"0\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Fn(\n                                                    FnExpr {\n                                                        ident: None,\n                                                        function: Function {\n                                                            params: [],\n                                                            decorators: [],\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1316,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1329,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            body: Some(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1327,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1329,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [],\n                                                                },\n                                                            ),\n                                                            is_generator: false,\n                                                            is_async: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                    },\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1336,\n                    ),\n                    hi: BytePos(\n                        1338,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1246,\n        ),\n        hi: BytePos(\n            1297,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1246,\n                ),\n                hi: BytePos(\n                    1292,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1248,\n                            ),\n                            hi: BytePos(\n                                1267,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1248,\n                                ),\n                                hi: BytePos(\n                                    1250,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('fn' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1253,\n                                            ),\n                                            hi: BytePos(\n                                                1267,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1265,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1267,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1269,\n                            ),\n                            hi: BytePos(\n                                1290,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1269,\n                                ),\n                                hi: BytePos(\n                                    1272,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xFn' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Fn(\n                                FnExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1284,\n                                                ),\n                                                hi: BytePos(\n                                                    1285,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1275,\n                                            ),\n                                            hi: BytePos(\n                                                1290,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1288,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1290,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1295,\n                    ),\n                    hi: BytePos(\n                        1297,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1270,\n        ),\n        hi: BytePos(\n            1325,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1270,\n                ),\n                hi: BytePos(\n                    1320,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1272,\n                            ),\n                            hi: BytePos(\n                                1293,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1272,\n                                ),\n                                hi: BytePos(\n                                    1275,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('gen' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1278,\n                                            ),\n                                            hi: BytePos(\n                                                1293,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1291,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1293,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: true,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1295,\n                            ),\n                            hi: BytePos(\n                                1318,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1295,\n                                ),\n                                hi: BytePos(\n                                    1299,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xGen' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Fn(\n                                FnExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1312,\n                                                ),\n                                                hi: BytePos(\n                                                    1313,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1302,\n                                            ),\n                                            hi: BytePos(\n                                                1318,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1316,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1318,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: true,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1323,\n                    ),\n                    hi: BytePos(\n                        1325,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1052,\n        ),\n        hi: BytePos(\n            1151,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1052,\n                ),\n                hi: BytePos(\n                    1114,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1054,\n                            ),\n                            hi: BytePos(\n                                1067,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1054,\n                                ),\n                                hi: BytePos(\n                                    1055,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1058,\n                                        ),\n                                        hi: BytePos(\n                                            1067,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1058,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1065,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1069,\n                            ),\n                            hi: BytePos(\n                                1082,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1069,\n                                ),\n                                hi: BytePos(\n                                    1070,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1073,\n                                        ),\n                                        hi: BytePos(\n                                            1082,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1073,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1080,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1084,\n                            ),\n                            hi: BytePos(\n                                1097,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1084,\n                                ),\n                                hi: BytePos(\n                                    1085,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1088,\n                                        ),\n                                        hi: BytePos(\n                                            1097,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1088,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1095,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1099,\n                            ),\n                            hi: BytePos(\n                                1112,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1099,\n                                ),\n                                hi: BytePos(\n                                    1100,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('z' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1103,\n                                        ),\n                                        hi: BytePos(\n                                            1112,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1103,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1110,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1117,\n                    ),\n                    hi: BytePos(\n                        1151,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1119,\n                                            ),\n                                            hi: BytePos(\n                                                1120,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1122,\n                                                ),\n                                                hi: BytePos(\n                                                    1126,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1128,\n                                            ),\n                                            hi: BytePos(\n                                                1129,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1131,\n                                                ),\n                                                hi: BytePos(\n                                                    1132,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 0.0,\n                                            raw: Some(\n                                                \"0\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1134,\n                                            ),\n                                            hi: BytePos(\n                                                1135,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Bool(\n                                        Bool {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1137,\n                                                ),\n                                                hi: BytePos(\n                                                    1142,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: false,\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1144,\n                                            ),\n                                            hi: BytePos(\n                                                1145,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('z' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Str(\n                                        Str {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1147,\n                                                ),\n                                                hi: BytePos(\n                                                    1149,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: Atom('' type=static),\n                                            raw: Some(\n                                                \"''\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1173,\n        ),\n        hi: BytePos(\n            1195,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1173,\n                ),\n                hi: BytePos(\n                    1190,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1175,\n                            ),\n                            hi: BytePos(\n                                1188,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1175,\n                                ),\n                                hi: BytePos(\n                                    1176,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1179,\n                                        ),\n                                        hi: BytePos(\n                                            1188,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1179,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1186,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('thrower' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1193,\n                    ),\n                    hi: BytePos(\n                        1195,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1341,\n        ),\n        hi: BytePos(\n            1375,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1341,\n                ),\n                hi: BytePos(\n                    1370,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1343,\n                            ),\n                            hi: BytePos(\n                                1368,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1343,\n                                ),\n                                hi: BytePos(\n                                    1344,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        value: Some(\n                            Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1347,\n                                        ),\n                                        hi: BytePos(\n                                            1368,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('unresolvableReference' type=dynamic),\n                                    optional: false,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1373,\n                    ),\n                    hi: BytePos(\n                        1375,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-id-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            939,\n        ),\n        hi: BytePos(\n            957,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    939,\n                ),\n                hi: BytePos(\n                    945,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                941,\n                            ),\n                            hi: BytePos(\n                                942,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    941,\n                                ),\n                                hi: BytePos(\n                                    942,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        948,\n                    ),\n                    hi: BytePos(\n                        957,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                950,\n                                            ),\n                                            hi: BytePos(\n                                                951,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    953,\n                                                ),\n                                                hi: BytePos(\n                                                    955,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-list-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1178,\n        ),\n        hi: BytePos(\n            1220,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1178,\n                ),\n                hi: BytePos(\n                    1215,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1180,\n                            ),\n                            hi: BytePos(\n                                1181,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1180,\n                                ),\n                                hi: BytePos(\n                                    1181,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('a' type=static),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1183,\n                            ),\n                            hi: BytePos(\n                                1196,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1183,\n                                ),\n                                hi: BytePos(\n                                    1184,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('b' type=static),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1187,\n                                        ),\n                                        hi: BytePos(\n                                            1196,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1187,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1194,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('thrower' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1198,\n                            ),\n                            hi: BytePos(\n                                1213,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1198,\n                                ),\n                                hi: BytePos(\n                                    1199,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('c' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Update(\n                                UpdateExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1202,\n                                        ),\n                                        hi: BytePos(\n                                            1213,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"++\",\n                                    prefix: true,\n                                    arg: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1204,\n                                                ),\n                                                hi: BytePos(\n                                                    1213,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('initCount' type=dynamic),\n                                            optional: false,\n                                        },\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1218,\n                    ),\n                    hi: BytePos(\n                        1220,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-ary-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1180,\n        ),\n        hi: BytePos(\n            1213,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1180,\n                ),\n                hi: BytePos(\n                    1208,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1182,\n                                    ),\n                                    hi: BytePos(\n                                        1183,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1185,\n                                    ),\n                                    hi: BytePos(\n                                        1206,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1185,\n                                            ),\n                                            hi: BytePos(\n                                                1194,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1186,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1187,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1189,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1190,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1192,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1193,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1197,\n                                            ),\n                                            hi: BytePos(\n                                                1206,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1198,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1199,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1201,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1202,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1204,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1205,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1211,\n                    ),\n                    hi: BytePos(\n                        1213,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-ary-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            945,\n        ),\n        hi: BytePos(\n            970,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    945,\n                ),\n                hi: BytePos(\n                    956,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        947,\n                                    ),\n                                    hi: BytePos(\n                                        948,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        950,\n                                    ),\n                                    hi: BytePos(\n                                        953,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            951,\n                                                        ),\n                                                        hi: BytePos(\n                                                            952,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        959,\n                    ),\n                    hi: BytePos(\n                        970,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                961,\n                                            ),\n                                            hi: BytePos(\n                                                962,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                964,\n                                            ),\n                                            hi: BytePos(\n                                                968,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        965,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        967,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 45.0,\n                                                                raw: Some(\n                                                                    \"45\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-ary-value-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1103,\n        ),\n        hi: BytePos(\n            1145,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1103,\n                ),\n                hi: BytePos(\n                    1131,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1105,\n                                    ),\n                                    hi: BytePos(\n                                        1106,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1108,\n                                    ),\n                                    hi: BytePos(\n                                        1129,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1108,\n                                            ),\n                                            hi: BytePos(\n                                                1117,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1109,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1110,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1112,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1113,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1115,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1116,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1120,\n                                            ),\n                                            hi: BytePos(\n                                                1129,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1121,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1122,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1124,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1125,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1127,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1128,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1134,\n                    ),\n                    hi: BytePos(\n                        1145,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1136,\n                                            ),\n                                            hi: BytePos(\n                                                1137,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1139,\n                                                ),\n                                                hi: BytePos(\n                                                    1143,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-ary.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1052,\n        ),\n        hi: BytePos(\n            1106,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1052,\n                ),\n                hi: BytePos(\n                    1080,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1054,\n                                    ),\n                                    hi: BytePos(\n                                        1055,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1057,\n                                    ),\n                                    hi: BytePos(\n                                        1078,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1057,\n                                            ),\n                                            hi: BytePos(\n                                                1066,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1058,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1059,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1061,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1062,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1064,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1065,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1069,\n                                            ),\n                                            hi: BytePos(\n                                                1078,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1070,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1071,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1073,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1074,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1076,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1077,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1083,\n                    ),\n                    hi: BytePos(\n                        1106,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1085,\n                                            ),\n                                            hi: BytePos(\n                                                1086,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1088,\n                                            ),\n                                            hi: BytePos(\n                                                1104,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1089,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1090,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 7.0,\n                                                                raw: Some(\n                                                                    \"7\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1092,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1101,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('undefined' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-eval-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1045,\n        ),\n        hi: BytePos(\n            1068,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1045,\n                ),\n                hi: BytePos(\n                    1063,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Computed(\n                            ComputedPropName {\n                                span: Span {\n                                    lo: BytePos(\n                                        1047,\n                                    ),\n                                    hi: BytePos(\n                                        1058,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                expr: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1048,\n                                            ),\n                                            hi: BytePos(\n                                                1057,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1048,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1055,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('thrower' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                        value: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1060,\n                                        ),\n                                        hi: BytePos(\n                                            1061,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1066,\n                    ),\n                    hi: BytePos(\n                        1068,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-id-get-value-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1157,\n        ),\n        hi: BytePos(\n            1209,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1157,\n                ),\n                hi: BytePos(\n                    1190,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1159,\n                                    ),\n                                    hi: BytePos(\n                                        1167,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('poisoned' type=dynamic),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1169,\n                                    ),\n                                    hi: BytePos(\n                                        1188,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1169,\n                                                ),\n                                                hi: BytePos(\n                                                    1170,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Update(\n                                    UpdateExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1173,\n                                            ),\n                                            hi: BytePos(\n                                                1188,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        op: \"++\",\n                                        prefix: true,\n                                        arg: Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1175,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1188,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('initEvalCount' type=dynamic),\n                                                optional: false,\n                                            },\n                                        ),\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1193,\n                    ),\n                    hi: BytePos(\n                        1209,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('poisonedProperty' type=dynamic),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1038,\n        ),\n        hi: BytePos(\n            1149,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1038,\n                ),\n                hi: BytePos(\n                    1112,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1040,\n                                    ),\n                                    hi: BytePos(\n                                        1041,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('s' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1043,\n                                    ),\n                                    hi: BytePos(\n                                        1056,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1043,\n                                                ),\n                                                hi: BytePos(\n                                                    1044,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('t' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1047,\n                                            ),\n                                            hi: BytePos(\n                                                1056,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1047,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1054,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1058,\n                                    ),\n                                    hi: BytePos(\n                                        1059,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('u' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1061,\n                                    ),\n                                    hi: BytePos(\n                                        1074,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1061,\n                                                ),\n                                                hi: BytePos(\n                                                    1062,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('v' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1065,\n                                            ),\n                                            hi: BytePos(\n                                                1074,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1065,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1072,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1076,\n                                    ),\n                                    hi: BytePos(\n                                        1077,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1079,\n                                    ),\n                                    hi: BytePos(\n                                        1092,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1079,\n                                                ),\n                                                hi: BytePos(\n                                                    1080,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1083,\n                                            ),\n                                            hi: BytePos(\n                                                1092,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1083,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1090,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1094,\n                                    ),\n                                    hi: BytePos(\n                                        1095,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1097,\n                                    ),\n                                    hi: BytePos(\n                                        1110,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1097,\n                                                ),\n                                                hi: BytePos(\n                                                    1098,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('z' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1101,\n                                            ),\n                                            hi: BytePos(\n                                                1110,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1101,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1108,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1115,\n                    ),\n                    hi: BytePos(\n                        1149,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1117,\n                                            ),\n                                            hi: BytePos(\n                                                1118,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('s' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1120,\n                                                ),\n                                                hi: BytePos(\n                                                    1124,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1126,\n                                            ),\n                                            hi: BytePos(\n                                                1127,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('u' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1129,\n                                                ),\n                                                hi: BytePos(\n                                                    1130,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 0.0,\n                                            raw: Some(\n                                                \"0\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1132,\n                                            ),\n                                            hi: BytePos(\n                                                1133,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Bool(\n                                        Bool {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1135,\n                                                ),\n                                                hi: BytePos(\n                                                    1140,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: false,\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1142,\n                                            ),\n                                            hi: BytePos(\n                                                1143,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Str(\n                                        Str {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1145,\n                                                ),\n                                                hi: BytePos(\n                                                    1147,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: Atom('' type=static),\n                                            raw: Some(\n                                                \"''\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1171,\n        ),\n        hi: BytePos(\n            1196,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1171,\n                ),\n                hi: BytePos(\n                    1191,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1173,\n                                    ),\n                                    hi: BytePos(\n                                        1174,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1176,\n                                    ),\n                                    hi: BytePos(\n                                        1189,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1176,\n                                                ),\n                                                hi: BytePos(\n                                                    1177,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('y' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1180,\n                                            ),\n                                            hi: BytePos(\n                                                1189,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1180,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1187,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('thrower' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1194,\n                    ),\n                    hi: BytePos(\n                        1196,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1340,\n        ),\n        hi: BytePos(\n            1377,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1340,\n                ),\n                hi: BytePos(\n                    1372,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1342,\n                                    ),\n                                    hi: BytePos(\n                                        1343,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1345,\n                                    ),\n                                    hi: BytePos(\n                                        1370,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1345,\n                                                ),\n                                                hi: BytePos(\n                                                    1346,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('y' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1349,\n                                            ),\n                                            hi: BytePos(\n                                                1370,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('unresolvableReference' type=dynamic),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1375,\n                    ),\n                    hi: BytePos(\n                        1377,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            954,\n        ),\n        hi: BytePos(\n            973,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    954,\n                ),\n                hi: BytePos(\n                    967,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        956,\n                                    ),\n                                    hi: BytePos(\n                                        957,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        959,\n                                    ),\n                                    hi: BytePos(\n                                        965,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    959,\n                                                ),\n                                                hi: BytePos(\n                                                    960,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('y' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    963,\n                                                ),\n                                                hi: BytePos(\n                                                    965,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 33.0,\n                                            raw: Some(\n                                                \"33\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        970,\n                    ),\n                    hi: BytePos(\n                        973,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-id-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            944,\n        ),\n        hi: BytePos(\n            965,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    944,\n                ),\n                hi: BytePos(\n                    953,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        946,\n                                    ),\n                                    hi: BytePos(\n                                        947,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            949,\n                                        ),\n                                        hi: BytePos(\n                                            950,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        956,\n                    ),\n                    hi: BytePos(\n                        965,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                958,\n                                            ),\n                                            hi: BytePos(\n                                                959,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    961,\n                                                ),\n                                                hi: BytePos(\n                                                    963,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            935,\n        ),\n        hi: BytePos(\n            955,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    935,\n                ),\n                hi: BytePos(\n                    943,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        937,\n                                    ),\n                                    hi: BytePos(\n                                        938,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            940,\n                                        ),\n                                        hi: BytePos(\n                                            941,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        946,\n                    ),\n                    hi: BytePos(\n                        955,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                948,\n                                            ),\n                                            hi: BytePos(\n                                                949,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    951,\n                                                ),\n                                                hi: BytePos(\n                                                    953,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-obj-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1181,\n        ),\n        hi: BytePos(\n            1241,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1181,\n                ),\n                hi: BytePos(\n                    1222,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1183,\n                                    ),\n                                    hi: BytePos(\n                                        1184,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1186,\n                                    ),\n                                    hi: BytePos(\n                                        1220,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1186,\n                                            ),\n                                            hi: BytePos(\n                                                1197,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1188,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1189,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1188,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1189,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1191,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1192,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1191,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1192,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1194,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1195,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1194,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1195,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1200,\n                                            ),\n                                            hi: BytePos(\n                                                1220,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1202,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1203,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1205,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1206,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1208,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1209,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1211,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1212,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1214,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1215,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1217,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1218,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1225,\n                    ),\n                    hi: BytePos(\n                        1241,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1227,\n                                            ),\n                                            hi: BytePos(\n                                                1228,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1230,\n                                            ),\n                                            hi: BytePos(\n                                                1239,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('undefined' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-obj-value-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1104,\n        ),\n        hi: BytePos(\n            1159,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1104,\n                ),\n                hi: BytePos(\n                    1145,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1106,\n                                    ),\n                                    hi: BytePos(\n                                        1107,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1109,\n                                    ),\n                                    hi: BytePos(\n                                        1143,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1109,\n                                            ),\n                                            hi: BytePos(\n                                                1120,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1111,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1112,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1111,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1112,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1114,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1115,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1114,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1115,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1117,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1118,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1117,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1118,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1123,\n                                            ),\n                                            hi: BytePos(\n                                                1143,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1125,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1126,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1128,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1129,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1131,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1132,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1134,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1135,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1137,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1138,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1140,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1141,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1148,\n                    ),\n                    hi: BytePos(\n                        1159,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1150,\n                                            ),\n                                            hi: BytePos(\n                                                1151,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1153,\n                                                ),\n                                                hi: BytePos(\n                                                    1157,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-obj-value-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1105,\n        ),\n        hi: BytePos(\n            1141,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1105,\n                ),\n                hi: BytePos(\n                    1135,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1107,\n                                    ),\n                                    hi: BytePos(\n                                        1108,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1110,\n                                    ),\n                                    hi: BytePos(\n                                        1133,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1110,\n                                            ),\n                                            hi: BytePos(\n                                                1121,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1112,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1113,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1112,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1113,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1115,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1116,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1115,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1116,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1118,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1119,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1118,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1119,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1124,\n                                            ),\n                                            hi: BytePos(\n                                                1133,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('undefined' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1138,\n                    ),\n                    hi: BytePos(\n                        1141,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-prop-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1053,\n        ),\n        hi: BytePos(\n            1126,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1053,\n                ),\n                hi: BytePos(\n                    1094,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1055,\n                                    ),\n                                    hi: BytePos(\n                                        1056,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1058,\n                                    ),\n                                    hi: BytePos(\n                                        1092,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1058,\n                                            ),\n                                            hi: BytePos(\n                                                1069,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1060,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1061,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1060,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1061,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1063,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1064,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1063,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1064,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1066,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1067,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1066,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1067,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1072,\n                                            ),\n                                            hi: BytePos(\n                                                1092,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1074,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1075,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1077,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1078,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1080,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1081,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1083,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1084,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1086,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1087,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1089,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1090,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1097,\n                    ),\n                    hi: BytePos(\n                        1126,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1099,\n                                            ),\n                                            hi: BytePos(\n                                                1100,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1102,\n                                            ),\n                                            hi: BytePos(\n                                                1124,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1104,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1105,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1107,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1116,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('undefined' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1118,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1119,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1121,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1122,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 7.0,\n                                                                    raw: Some(\n                                                                        \"7\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-rest-getter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            829,\n        ),\n        hi: BytePos(\n            872,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    829,\n                ),\n                hi: BytePos(\n                    835,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                830,\n                            ),\n                            hi: BytePos(\n                                834,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                830,\n                            ),\n                            hi: BytePos(\n                                833,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            833,\n                                        ),\n                                        hi: BytePos(\n                                            834,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        838,\n                    ),\n                    hi: BytePos(\n                        872,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        Getter(\n                            GetterProp {\n                                span: Span {\n                                    lo: BytePos(\n                                        840,\n                                    ),\n                                    hi: BytePos(\n                                        870,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                844,\n                                            ),\n                                            hi: BytePos(\n                                                845,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('v' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                type_ann: None,\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                848,\n                                            ),\n                                            hi: BytePos(\n                                                870,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [\n                                            Expr(\n                                                ExprStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            850,\n                                                        ),\n                                                        hi: BytePos(\n                                                            858,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    expr: Update(\n                                                        UpdateExpr {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    850,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    857,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            op: \"++\",\n                                                            prefix: false,\n                                                            arg: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            850,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            855,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('count' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            Return(\n                                                ReturnStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            859,\n                                                        ),\n                                                        hi: BytePos(\n                                                            868,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Some(\n                                                        Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            866,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            867,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 2.0,\n                                                                    raw: Some(\n                                                                        \"2\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-rest-skip-non-enumerable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            901,\n        ),\n        hi: BytePos(\n            914,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    901,\n                ),\n                hi: BytePos(\n                    910,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                902,\n                            ),\n                            hi: BytePos(\n                                909,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                902,\n                            ),\n                            hi: BytePos(\n                                905,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            905,\n                                        ),\n                                        hi: BytePos(\n                                            909,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('rest' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        913,\n                    ),\n                    hi: BytePos(\n                        914,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('o' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/dstr/obj-ptrn-rest-val-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            792,\n        ),\n        hi: BytePos(\n            834,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    792,\n                ),\n                hi: BytePos(\n                    807,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                793,\n                            ),\n                            hi: BytePos(\n                                794,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    793,\n                                ),\n                                hi: BytePos(\n                                    794,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('a' type=static),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                796,\n                            ),\n                            hi: BytePos(\n                                797,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    796,\n                                ),\n                                hi: BytePos(\n                                    797,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('b' type=static),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                799,\n                            ),\n                            hi: BytePos(\n                                806,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                799,\n                            ),\n                            hi: BytePos(\n                                802,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            802,\n                                        ),\n                                        hi: BytePos(\n                                            806,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('rest' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        810,\n                    ),\n                    hi: BytePos(\n                        834,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                811,\n                                            ),\n                                            hi: BytePos(\n                                                812,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    814,\n                                                ),\n                                                hi: BytePos(\n                                                    815,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 1.0,\n                                            raw: Some(\n                                                \"1\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                817,\n                                            ),\n                                            hi: BytePos(\n                                                818,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    820,\n                                                ),\n                                                hi: BytePos(\n                                                    821,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 2.0,\n                                            raw: Some(\n                                                \"2\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                823,\n                                            ),\n                                            hi: BytePos(\n                                                824,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('a' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    826,\n                                                ),\n                                                hi: BytePos(\n                                                    827,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 5.0,\n                                            raw: Some(\n                                                \"5\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                829,\n                                            ),\n                                            hi: BytePos(\n                                                830,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('b' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    832,\n                                                ),\n                                                hi: BytePos(\n                                                    833,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 3.0,\n                                            raw: Some(\n                                                \"3\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/let/fn-name-arrow.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/let/fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Class(\n    ClassExpr {\n        ident: Some(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        641,\n                    ),\n                    hi: BytePos(\n                        642,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('x' type=static),\n                optional: false,\n            },\n        ),\n        class: Class {\n            span: Span {\n                lo: BytePos(\n                    635,\n                ),\n                hi: BytePos(\n                    645,\n                ),\n                ctxt: #0,\n            },\n            decorators: [],\n            body: [],\n            super_class: None,\n            is_abstract: false,\n            type_params: None,\n            super_type_params: None,\n            implements: [],\n        },\n    },\n)"}}
{"file_path":"test/language/statements/let/fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                639,\n            ),\n            hi: BytePos(\n                655,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                639,\n                            ),\n                            hi: BytePos(\n                                640,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                642,\n                            ),\n                            hi: BytePos(\n                                655,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        653,\n                                    ),\n                                    hi: BytePos(\n                                        655,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/statements/let/fn-name-fn.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/let/fn-name-gen.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/let/function-local-closure-get-before-initialization.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/statements/let/function-local-closure-set-before-initialization.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/statements/let/function-local-use-before-initialization-in-declaration-statement.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/let/function-local-use-before-initialization-in-prior-statement.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/let/global-closure-get-before-initialization.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/let/global-closure-set-before-initialization.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/let/global-use-before-initialization-in-declaration-statement.js","error":{"category":"run","message":"unsupported operator '+' for: Undefined"}}
{"file_path":"test/language/statements/let/global-use-before-initialization-in-prior-statement.js","error":null}
{"file_path":"test/language/statements/let/redeclaration-error-from-within-strict-mode-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/let/static-init-await-binding-invalid.js","error":null}
{"file_path":"test/language/statements/let/static-init-await-binding-valid.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/let/static-init-await-binding-valid.js"}}
{"file_path":"test/language/statements/let/syntax/escaped-let.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/let/syntax/escaped-let.js"}}
{"file_path":"test/language/statements/let/syntax/identifier-let-allowed-as-lefthandside-expression-strict.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/let/syntax/identifier-let-disallowed-as-boundname.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/let/syntax/let-closure-inside-condition.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                249,\n            ),\n            hi: BytePos(\n                289,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Call(\n                CallExpr {\n                    span: Span {\n                        lo: BytePos(\n                            249,\n                        ),\n                        hi: BytePos(\n                            282,\n                        ),\n                        ctxt: #0,\n                    },\n                    callee: Expr(\n                        Member(\n                            MemberExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        249,\n                                    ),\n                                    hi: BytePos(\n                                        255,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                obj: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                249,\n                                            ),\n                                            hi: BytePos(\n                                                250,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('a' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                prop: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                251,\n                                            ),\n                                            hi: BytePos(\n                                                255,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('push' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    args: [\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                256,\n                                            ),\n                                            hi: BytePos(\n                                                281,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        268,\n                                                    ),\n                                                    hi: BytePos(\n                                                        281,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [\n                                                    Return(\n                                                        ReturnStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    270,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    279,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            arg: Some(\n                                                                Ident(\n                                                                    Ident {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                277,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                278,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        sym: Atom('i' type=static),\n                                                                        optional: false,\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ],\n                    type_args: None,\n                },\n            ),\n            Bin(\n                BinExpr {\n                    span: Span {\n                        lo: BytePos(\n                            284,\n                        ),\n                        hi: BytePos(\n                            289,\n                        ),\n                        ctxt: #0,\n                    },\n                    op: \"<\",\n                    left: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    284,\n                                ),\n                                hi: BytePos(\n                                    285,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('i' type=static),\n                            optional: false,\n                        },\n                    ),\n                    right: Lit(\n                        Num(\n                            Number {\n                                span: Span {\n                                    lo: BytePos(\n                                        288,\n                                    ),\n                                    hi: BytePos(\n                                        289,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                value: 5.0,\n                                raw: Some(\n                                    \"5\",\n                                ),\n                            },\n                        ),\n                    ),\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/statements/let/syntax/let-closure-inside-initialization.js","error":{"category":"run","message":"could not use as object: v67"}}
{"file_path":"test/language/statements/let/syntax/let-closure-inside-next-expression.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                262,\n            ),\n            hi: BytePos(\n                300,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Call(\n                CallExpr {\n                    span: Span {\n                        lo: BytePos(\n                            262,\n                        ),\n                        hi: BytePos(\n                            295,\n                        ),\n                        ctxt: #0,\n                    },\n                    callee: Expr(\n                        Member(\n                            MemberExpr {\n                                span: Span {\n                                    lo: BytePos(\n                                        262,\n                                    ),\n                                    hi: BytePos(\n                                        268,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                obj: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                262,\n                                            ),\n                                            hi: BytePos(\n                                                263,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('a' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                prop: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                264,\n                                            ),\n                                            hi: BytePos(\n                                                268,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('push' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                    args: [\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                269,\n                                            ),\n                                            hi: BytePos(\n                                                294,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        281,\n                                                    ),\n                                                    hi: BytePos(\n                                                        294,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [\n                                                    Return(\n                                                        ReturnStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    283,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    292,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            arg: Some(\n                                                                Ident(\n                                                                    Ident {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                290,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                291,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        sym: Atom('i' type=static),\n                                                                        optional: false,\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        },\n                                                    ),\n                                                ],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ],\n                    type_args: None,\n                },\n            ),\n            Update(\n                UpdateExpr {\n                    span: Span {\n                        lo: BytePos(\n                            297,\n                        ),\n                        hi: BytePos(\n                            300,\n                        ),\n                        ctxt: #0,\n                    },\n                    op: \"++\",\n                    prefix: true,\n                    arg: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    299,\n                                ),\n                                hi: BytePos(\n                                    300,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('i' type=static),\n                            optional: false,\n                        },\n                    ),\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/statements/let/syntax/let-iteration-variable-is-freshly-allocated-for-each-iteration-multi-let-binding.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                341,\n            ),\n            hi: BytePos(\n                349,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Update(\n                UpdateExpr {\n                    span: Span {\n                        lo: BytePos(\n                            341,\n                        ),\n                        hi: BytePos(\n                            344,\n                        ),\n                        ctxt: #0,\n                    },\n                    op: \"++\",\n                    prefix: true,\n                    arg: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    343,\n                                ),\n                                hi: BytePos(\n                                    344,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('i' type=static),\n                            optional: false,\n                        },\n                    ),\n                },\n            ),\n            Update(\n                UpdateExpr {\n                    span: Span {\n                        lo: BytePos(\n                            346,\n                        ),\n                        hi: BytePos(\n                            349,\n                        ),\n                        ctxt: #0,\n                    },\n                    op: \"++\",\n                    prefix: true,\n                    arg: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    348,\n                                ),\n                                hi: BytePos(\n                                    349,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('j' type=inline),\n                            optional: false,\n                        },\n                    ),\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/statements/let/syntax/let-iteration-variable-is-freshly-allocated-for-each-iteration-single-let-binding.js","error":{"category":"run","message":"could not use as object: v64"}}
{"file_path":"test/language/statements/let/syntax/let-let-declaration-split-across-two-lines.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/let/syntax/let-let-declaration-with-initializer-split-across-two-lines.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/let/syntax/let-newline-await-in-normal-function.js","error":null}
{"file_path":"test/language/statements/let/syntax/let-newline-yield-in-generator-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/let/syntax/let-newline-yield-in-normal-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/let/syntax/let-outer-inner-let-bindings.js","error":{"category":"run","message":"could not use as object: v39"}}
{"file_path":"test/language/statements/let/syntax/let.js","error":{"category":"run","message":"could not use as object: v30"}}
{"file_path":"test/language/statements/let/syntax/with-initialisers-in-statement-positions-case-expression-statement-list.js","error":null}
{"file_path":"test/language/statements/let/syntax/with-initialisers-in-statement-positions-default-statement-list.js","error":null}
{"file_path":"test/language/statements/let/syntax/with-initialisers-in-statement-positions-do-statement-while-expression.js","error":null}
{"file_path":"test/language/statements/let/syntax/with-initialisers-in-statement-positions-for-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/with-initialisers-in-statement-positions-if-expression-statement-else-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/with-initialisers-in-statement-positions-if-expression-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/with-initialisers-in-statement-positions-label-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/with-initialisers-in-statement-positions-while-expression-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/without-initialisers-in-statement-positions-case-expression-statement-list.js","error":null}
{"file_path":"test/language/statements/let/syntax/without-initialisers-in-statement-positions-default-statement-list.js","error":null}
{"file_path":"test/language/statements/let/syntax/without-initialisers-in-statement-positions-do-statement-while-expression.js","error":null}
{"file_path":"test/language/statements/let/syntax/without-initialisers-in-statement-positions-for-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/without-initialisers-in-statement-positions-if-expression-statement-else-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/without-initialisers-in-statement-positions-if-expression-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/without-initialisers-in-statement-positions-label-statement.js","error":null}
{"file_path":"test/language/statements/let/syntax/without-initialisers-in-statement-positions-while-expression-statement.js","error":null}
{"file_path":"test/language/statements/return/12.9-1.js","error":{"category":"run","message":"could not use as object: v27"}}
{"file_path":"test/language/statements/return/S12.9_A1_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T10.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T4.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T5.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T6.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T7.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T8.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A1_T9.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/return/S12.9_A3.js","error":null}
{"file_path":"test/language/statements/return/S12.9_A4.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/statements/return/S12.9_A5.js","error":null}
{"file_path":"test/language/statements/return/line-terminators.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/statements/return/tco.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/S12.11_A1_T1.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: \"void\""}}
{"file_path":"test/language/statements/switch/S12.11_A1_T2.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: \"void\""}}
{"file_path":"test/language/statements/switch/S12.11_A1_T3.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: \"void\""}}
{"file_path":"test/language/statements/switch/S12.11_A1_T4.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: \"void\""}}
{"file_path":"test/language/statements/switch/S12.11_A2_T1.js","error":null}
{"file_path":"test/language/statements/switch/S12.11_A3_T1.js","error":null}
{"file_path":"test/language/statements/switch/S12.11_A3_T2.js","error":null}
{"file_path":"test/language/statements/switch/S12.11_A3_T3.js","error":null}
{"file_path":"test/language/statements/switch/S12.11_A3_T4.js","error":null}
{"file_path":"test/language/statements/switch/S12.11_A3_T5.js","error":null}
{"file_path":"test/language/statements/switch/S12.11_A4_T1.js","error":null}
{"file_path":"test/language/statements/switch/cptn-a-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-a-fall-thru-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-a-fall-thru-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-b-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-b-fall-thru-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-b-fall-thru-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-b-final.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-dflt-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-dflt-b-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-dflt-b-fall-thru-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-dflt-b-fall-thru-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-dflt-b-final.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-dflt-fall-thru-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-dflt-fall-thru-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-dflt-final.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-no-dflt-match-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-no-dflt-match-fall-thru-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-no-dflt-match-fall-thru-nrml.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-no-dflt-match-final.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/cptn-no-dflt-no-match.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/scope-lex-async-function.js","error":null}
{"file_path":"test/language/statements/switch/scope-lex-async-generator.js","error":null}
{"file_path":"test/language/statements/switch/scope-lex-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        853,\n                    ),\n                    hi: BytePos(\n                        854,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('x' type=static),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        847,\n                    ),\n                    hi: BytePos(\n                        857,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/scope-lex-close-case.js","error":{"category":"run","message":"could not use as object: v59"}}
{"file_path":"test/language/statements/switch/scope-lex-close-dflt.js","error":{"category":"run","message":"could not use as object: v49"}}
{"file_path":"test/language/statements/switch/scope-lex-const.js","error":null}
{"file_path":"test/language/statements/switch/scope-lex-generator.js","error":null}
{"file_path":"test/language/statements/switch/scope-lex-let.js","error":null}
{"file_path":"test/language/statements/switch/scope-lex-open-case.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                867,\n            ),\n            hi: BytePos(\n                909,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Assign(\n                AssignExpr {\n                    span: Span {\n                        lo: BytePos(\n                            867,\n                        ),\n                        hi: BytePos(\n                            903,\n                        ),\n                        ctxt: #0,\n                    },\n                    op: \"=\",\n                    left: Pat(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            867,\n                                        ),\n                                        hi: BytePos(\n                                            876,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('probeExpr' type=dynamic),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    right: Fn(\n                        FnExpr {\n                            ident: None,\n                            function: Function {\n                                params: [],\n                                decorators: [],\n                                span: Span {\n                                    lo: BytePos(\n                                        879,\n                                    ),\n                                    hi: BytePos(\n                                        903,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                890,\n                                            ),\n                                            hi: BytePos(\n                                                903,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [\n                                            Return(\n                                                ReturnStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            892,\n                                                        ),\n                                                        hi: BytePos(\n                                                            901,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Some(\n                                                        Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        899,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        900,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                                is_generator: false,\n                                is_async: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        },\n                    ),\n                },\n            ),\n            Lit(\n                Null(\n                    Null {\n                        span: Span {\n                            lo: BytePos(\n                                905,\n                            ),\n                            hi: BytePos(\n                                909,\n                            ),\n                            ctxt: #0,\n                        },\n                    },\n                ),\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/statements/switch/scope-lex-open-dflt.js","error":{"category":"run","message":"could not use as object: v55"}}
{"file_path":"test/language/statements/switch/scope-var-none-case.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                897,\n            ),\n            hi: BytePos(\n                959,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Call(\n                CallExpr {\n                    span: Span {\n                        lo: BytePos(\n                            897,\n                        ),\n                        hi: BytePos(\n                            915,\n                        ),\n                        ctxt: #0,\n                    },\n                    callee: Expr(\n                        Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        897,\n                                    ),\n                                    hi: BytePos(\n                                        901,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('eval' type=static),\n                                optional: false,\n                            },\n                        ),\n                    ),\n                    args: [\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Str(\n                                    Str {\n                                        span: Span {\n                                            lo: BytePos(\n                                                902,\n                                            ),\n                                            hi: BytePos(\n                                                914,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: Atom('var x = 1;' type=dynamic),\n                                        raw: Some(\n                                            \"'var x = 1;'\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ],\n                    type_args: None,\n                },\n            ),\n            Assign(\n                AssignExpr {\n                    span: Span {\n                        lo: BytePos(\n                            917,\n                        ),\n                        hi: BytePos(\n                            953,\n                        ),\n                        ctxt: #0,\n                    },\n                    op: \"=\",\n                    left: Pat(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            917,\n                                        ),\n                                        hi: BytePos(\n                                            926,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('probeExpr' type=dynamic),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    right: Fn(\n                        FnExpr {\n                            ident: None,\n                            function: Function {\n                                params: [],\n                                decorators: [],\n                                span: Span {\n                                    lo: BytePos(\n                                        929,\n                                    ),\n                                    hi: BytePos(\n                                        953,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                940,\n                                            ),\n                                            hi: BytePos(\n                                                953,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [\n                                            Return(\n                                                ReturnStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            942,\n                                                        ),\n                                                        hi: BytePos(\n                                                            951,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Some(\n                                                        Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        949,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        950,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                                is_generator: false,\n                                is_async: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        },\n                    ),\n                },\n            ),\n            Lit(\n                Null(\n                    Null {\n                        span: Span {\n                            lo: BytePos(\n                                955,\n                            ),\n                            hi: BytePos(\n                                959,\n                            ),\n                            ctxt: #0,\n                        },\n                    },\n                ),\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/statements/switch/scope-var-none-dflt.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                885,\n            ),\n            hi: BytePos(\n                941,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Call(\n                CallExpr {\n                    span: Span {\n                        lo: BytePos(\n                            885,\n                        ),\n                        hi: BytePos(\n                            903,\n                        ),\n                        ctxt: #0,\n                    },\n                    callee: Expr(\n                        Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        885,\n                                    ),\n                                    hi: BytePos(\n                                        889,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('eval' type=static),\n                                optional: false,\n                            },\n                        ),\n                    ),\n                    args: [\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Str(\n                                    Str {\n                                        span: Span {\n                                            lo: BytePos(\n                                                890,\n                                            ),\n                                            hi: BytePos(\n                                                902,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: Atom('var x = 1;' type=dynamic),\n                                        raw: Some(\n                                            \"'var x = 1;'\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ],\n                    type_args: None,\n                },\n            ),\n            Assign(\n                AssignExpr {\n                    span: Span {\n                        lo: BytePos(\n                            905,\n                        ),\n                        hi: BytePos(\n                            941,\n                        ),\n                        ctxt: #0,\n                    },\n                    op: \"=\",\n                    left: Pat(\n                        Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            905,\n                                        ),\n                                        hi: BytePos(\n                                            914,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('probeExpr' type=dynamic),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    ),\n                    right: Fn(\n                        FnExpr {\n                            ident: None,\n                            function: Function {\n                                params: [],\n                                decorators: [],\n                                span: Span {\n                                    lo: BytePos(\n                                        917,\n                                    ),\n                                    hi: BytePos(\n                                        941,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                928,\n                                            ),\n                                            hi: BytePos(\n                                                941,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [\n                                            Return(\n                                                ReturnStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            930,\n                                                        ),\n                                                        hi: BytePos(\n                                                            939,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Some(\n                                                        Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        937,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        938,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                                is_generator: false,\n                                is_async: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        },\n                    ),\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-async-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-async-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        701,\n                    ),\n                    hi: BytePos(\n                        702,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        695,\n                    ),\n                    hi: BytePos(\n                        705,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-async-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-async-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        704,\n                    ),\n                    hi: BytePos(\n                        705,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        698,\n                    ),\n                    hi: BytePos(\n                        708,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        670,\n                    ),\n                    hi: BytePos(\n                        671,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        664,\n                    ),\n                    hi: BytePos(\n                        674,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        672,\n                    ),\n                    hi: BytePos(\n                        673,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        666,\n                    ),\n                    hi: BytePos(\n                        676,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        625,\n                    ),\n                    hi: BytePos(\n                        626,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        619,\n                    ),\n                    hi: BytePos(\n                        629,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-const.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        633,\n                    ),\n                    hi: BytePos(\n                        634,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        627,\n                    ),\n                    hi: BytePos(\n                        637,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-function.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        653,\n                    ),\n                    hi: BytePos(\n                        654,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        647,\n                    ),\n                    hi: BytePos(\n                        657,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        656,\n                    ),\n                    hi: BytePos(\n                        657,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        650,\n                    ),\n                    hi: BytePos(\n                        660,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-let.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        629,\n                    ),\n                    hi: BytePos(\n                        630,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        623,\n                    ),\n                    hi: BytePos(\n                        633,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-var.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        669,\n                    ),\n                    hi: BytePos(\n                        670,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        663,\n                    ),\n                    hi: BytePos(\n                        673,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-async-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-async-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        657,\n                    ),\n                    hi: BytePos(\n                        658,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        651,\n                    ),\n                    hi: BytePos(\n                        661,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-async-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-async-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        656,\n                    ),\n                    hi: BytePos(\n                        657,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        650,\n                    ),\n                    hi: BytePos(\n                        660,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-async-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-async-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        682,\n                    ),\n                    hi: BytePos(\n                        683,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        676,\n                    ),\n                    hi: BytePos(\n                        686,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-async-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-async-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        647,\n                    ),\n                    hi: BytePos(\n                        648,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        641,\n                    ),\n                    hi: BytePos(\n                        651,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-async-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-async-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        675,\n                    ),\n                    hi: BytePos(\n                        676,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        669,\n                    ),\n                    hi: BytePos(\n                        679,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-generator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-var.js","error":null}
{"file_path":"test/language/statements/switch/tco-case-body-dflt.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/tco-case-body.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/switch/tco-dftl-body.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/throw/S12.13_A1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A2_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A2_T2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A2_T3.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A2_T4.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A2_T5.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A2_T6.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A2_T7.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A3_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A3_T2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A3_T3.js","error":{"category":"panic","message":"unsupported binary op: \">>\""}}
{"file_path":"test/language/statements/throw/S12.13_A3_T4.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/throw/S12.13_A3_T5.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/throw/S12.13_A3_T6.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-10.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-11.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-12.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-13.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-14.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-15.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-16.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/12.14-4.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-6.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-7.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-8.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/12.14-9.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A1.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A10_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A10_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A10_T3.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A10_T4.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A10_T5.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A11_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A11_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A11_T3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A11_T4.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A12_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A12_T2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A12_T3.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A12_T4.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A13_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A13_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A13_T3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A14.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: With(\n    WithStmt {\n        span: Span {\n            lo: BytePos(\n                905,\n            ),\n            hi: BytePos(\n                937,\n            ),\n            ctxt: #0,\n        },\n        obj: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        910,\n                    ),\n                    hi: BytePos(\n                        915,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('myObj' type=inline),\n                optional: false,\n            },\n        ),\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        916,\n                    ),\n                    hi: BytePos(\n                        937,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Throw(\n                        ThrowStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    922,\n                                ),\n                                hi: BytePos(\n                                    933,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Lit(\n                                Str(\n                                    Str {\n                                        span: Span {\n                                            lo: BytePos(\n                                                928,\n                                            ),\n                                            hi: BytePos(\n                                                932,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: Atom('ex' type=static),\n                                        raw: Some(\n                                            \"\\\"ex\\\"\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/try/S12.14_A15.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A16_T1.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T10.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T11.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Invalid(\n    Invalid {\n        span: Span {\n            lo: BytePos(\n                460,\n            ),\n            hi: BytePos(\n                465,\n            ),\n            ctxt: #0,\n        },\n    },\n)"}}
{"file_path":"test/language/statements/try/S12.14_A16_T12.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Invalid(\n    Invalid {\n        span: Span {\n            lo: BytePos(\n                451,\n            ),\n            hi: BytePos(\n                456,\n            ),\n            ctxt: #0,\n        },\n    },\n)"}}
{"file_path":"test/language/statements/try/S12.14_A16_T13.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T14.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T15.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T2.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Invalid(\n    Invalid {\n        span: Span {\n            lo: BytePos(\n                408,\n            ),\n            hi: BytePos(\n                413,\n            ),\n            ctxt: #0,\n        },\n    },\n)"}}
{"file_path":"test/language/statements/try/S12.14_A16_T3.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Invalid(\n    Invalid {\n        span: Span {\n            lo: BytePos(\n                410,\n            ),\n            hi: BytePos(\n                417,\n            ),\n            ctxt: #0,\n        },\n    },\n)"}}
{"file_path":"test/language/statements/try/S12.14_A16_T5.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T6.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T7.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T8.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A16_T9.js","error":null}
{"file_path":"test/language/statements/try/S12.14_A17.js","error":{"category":"run","message":"could not use as object: v11"}}
{"file_path":"test/language/statements/try/S12.14_A18_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A18_T2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A18_T3.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A18_T4.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A18_T5.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A18_T6.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A18_T7.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A19_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A19_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A4.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/statements/try/S12.14_A4.js: 17,6 - 17,14: `delete` operator can only be applied to an object member (e.g. `delete obj[key]`, `delete obj.property`) [VM code at mcjs_vm/src/bytecode_compiler.rs:1711]\n  /home/sebastiano/src/test262/test/language/statements/try/S12.14_A4.js: 17,2 - 19,3: in if statement [VM code at mcjs_vm/src/bytecode_compiler.rs:1122]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/statements/try/S12.14_A4.js"}}
{"file_path":"test/language/statements/try/S12.14_A5.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A6.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A7_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A7_T2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A7_T3.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A8.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A9_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A9_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/S12.14_A9_T3.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A9_T4.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/S12.14_A9_T5.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/catch-parameter-boundnames-restriction-arguments-eval-throws.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/catch-parameter-boundnames-restriction-arguments-negative-early.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/catch-parameter-boundnames-restriction-eval-eval-throws.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/catch-parameter-boundnames-restriction-eval-negative-early.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/completion-values-fn-finally-abrupt.js","error":{"category":"run","message":"could not use as object: v50"}}
{"file_path":"test/language/statements/try/completion-values-fn-finally-normal.js","error":{"category":"run","message":"could not use as object: v33"}}
{"file_path":"test/language/statements/try/completion-values-fn-finally-return.js","error":{"category":"run","message":"could not use as object: v33"}}
{"file_path":"test/language/statements/try/completion-values.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-catch-empty-break.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-catch-empty-continue.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-catch-finally-empty-break.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-catch-finally-empty-continue.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-catch.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-finally-empty-break.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-finally-empty-continue.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-finally-from-catch.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-finally-skip-catch.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-finally-wo-catch.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/cptn-try.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/dstr/ary-init-iter-close.js","error":{"category":"run","message":"could not use as object: v23"}}
{"file_path":"test/language/statements/try/dstr/ary-init-iter-get-err-array-prototype.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/ary-init-iter-get-err.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/ary-init-iter-no-close.js","error":{"category":"run","message":"could not use as object: v23"}}
{"file_path":"test/language/statements/try/dstr/ary-name-iter-val.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-elem-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-elem-iter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-elision-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-elision-iter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-empty-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-empty-iter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-rest-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-rest-iter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-ary-val-null.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-exhausted.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-class.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-cover.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-fn.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-gen.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-hole.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-skipped.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-throws.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-undef.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-init-unresolvable.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-iter-complete.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-iter-done.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-iter-step-err.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-iter-val-err.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-id-iter-val.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-obj-id-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-obj-id.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-obj-prop-id-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-obj-prop-id.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-obj-val-null.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elem-obj-val-undef.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elision-exhausted.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elision-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-elision.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-empty.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-ary-elem.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-ary-elision.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-ary-empty.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-ary-rest.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-id-direct.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-id-elision-next-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-id-elision.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-id-exhausted.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-id-iter-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-id-iter-val-err.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-id.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-init-ary.js","error":null}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-init-id.js","error":null}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-init-obj.js","error":null}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-not-final-ary.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-not-final-id.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-not-final-obj.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-obj-id.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/ary-ptrn-rest-obj-prop-id.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-init-null.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/obj-init-undefined.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-empty.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-get-value-err.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-arrow.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-class.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-cover.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-fn.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-gen.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-init-skipped.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-init-throws.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-init-unresolvable.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-id-trailing-comma.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-list-err.js","error":{"category":"run","message":"could not use as object: v27"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-ary-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-ary-trailing-comma.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-ary-value-null.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-ary.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-eval-err.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-id-get-value-err.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-id-init-skipped.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-id-init-throws.js","error":{"category":"run","message":"could not use as object: v24"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-id-init-unresolvable.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-id-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-id-trailing-comma.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-id.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-obj-init.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-obj-value-null.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-obj-value-undef.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-prop-obj.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-rest-getter.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/statements/try/dstr/obj-ptrn-rest-getter.js: 23,8 - 23,42: unsupported node: Prop(Getter(GetterProp { span: Span { lo: BytePos(681), hi: BytePos(711), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(685), hi: BytePos(686), ctxt: #0 }, sym: Atom('v' type=inline), optional: false }), type_ann: None, body: Some(BlockStmt { span: Span { lo: BytePos(689), hi: BytePos(711), ctxt: #0 }, stmts: [Expr(ExprStmt { span: Span { lo: BytePos(691), hi: BytePos(699), ctxt: #0 }, expr: Update(UpdateExpr { span: Span { lo: BytePos(691), hi: BytePos(698), ctxt: #0 }, op: \"++\", prefix: false, arg: Ident(Ident { span: Span { lo: BytePos(691), hi: BytePos(696), ctxt: #0 }, sym: Atom('count' type=inline), optional: false }) }) }), Return(ReturnStmt { span: Span { lo: BytePos(700), hi: BytePos(709), ctxt: #0 }, arg: Some(Lit(Num(Number { span: Span { lo: BytePos(707), hi: BytePos(708), ctxt: #0 }, value: 2.0, raw: Some(\"2\") }))) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/statements/try/dstr/obj-ptrn-rest-getter.js"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-rest-skip-non-enumerable.js","error":{"category":"run","message":"could not use as object: v30"}}
{"file_path":"test/language/statements/try/dstr/obj-ptrn-rest-val-obj.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/early-catch-duplicates.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/early-catch-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/early-catch-lex.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/optional-catch-binding-finally.js","error":null}
{"file_path":"test/language/statements/try/optional-catch-binding-lexical.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/optional-catch-binding-parens.js","error":null}
{"file_path":"test/language/statements/try/optional-catch-binding-throws.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/try/optional-catch-binding.js","error":null}
{"file_path":"test/language/statements/try/scope-catch-block-lex-close.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/scope-catch-block-lex-open.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/scope-catch-block-var-none.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/scope-catch-param-lex-close.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/scope-catch-param-lex-open.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/scope-catch-param-var-none.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/static-init-await-binding-invalid.js","error":null}
{"file_path":"test/language/statements/try/static-init-await-binding-valid.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/try/static-init-await-binding-valid.js"}}
{"file_path":"test/language/statements/try/tco-catch-finally.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/try/tco-catch.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/try/tco-finally.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-10-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-11.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-16-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-17-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-18-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/variable/12.2.1-19-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/variable/12.2.1-1gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-2-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/variable/12.2.1-20-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-21-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-22-s.js","error":{"category":"run","message":"could not use as object: v25"}}
{"file_path":"test/language/statements/variable/12.2.1-3-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/variable/12.2.1-4-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/variable/12.2.1-4gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-5-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-6-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/12.2.1-7-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/variable/12.2.1-8-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/variable/12.2.1-9-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/S12.2_A1.js","error":{"category":"panic","message":"unsupported binary op: \"&\""}}
{"file_path":"test/language/statements/variable/S12.2_A10.js","error":null}
{"file_path":"test/language/statements/variable/S12.2_A11.js","error":{"category":"run","message":"could not use as object: v14"}}
{"file_path":"test/language/statements/variable/S12.2_A12.js","error":null}
{"file_path":"test/language/statements/variable/S12.2_A2.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/statements/variable/S12.2_A2.js: 18,4 - 18,22: `delete` operator can only be applied to an object member (e.g. `delete obj[key]`, `delete obj.property`) [VM code at mcjs_vm/src/bytecode_compiler.rs:1711]\n  /home/sebastiano/src/test262/test/language/statements/variable/S12.2_A2.js: 18,0 - 20,1: in if statement [VM code at mcjs_vm/src/bytecode_compiler.rs:1122]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/statements/variable/S12.2_A2.js"}}
{"file_path":"test/language/statements/variable/S12.2_A3.js","error":null}
{"file_path":"test/language/statements/variable/S12.2_A4.js","error":null}
{"file_path":"test/language/statements/variable/S12.2_A5.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/statements/variable/S12.2_A6_T1.js","error":null}
{"file_path":"test/language/statements/variable/S12.2_A6_T2.js","error":null}
{"file_path":"test/language/statements/variable/S12.2_A7.js","error":null}
{"file_path":"test/language/statements/variable/S12.2_A8_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/S12.2_A8_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/S12.2_A8_T3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/S12.2_A8_T4.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/S12.2_A8_T5.js","error":null}
{"file_path":"test/language/statements/variable/S12.2_A8_T6.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/S12.2_A8_T7.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/S12.2_A8_T8.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/S12.2_A9.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/statements/variable/S14_A1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-non-strict.js","error":null}
{"file_path":"test/language/statements/variable/arguments-fn-strict-list-final-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-strict-list-final.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-strict-list-first-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-strict-list-first.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-strict-list-middle-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-strict-list-middle.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-strict-list-repeated.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-strict-single-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-fn-strict-single.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-non-strict.js","error":null}
{"file_path":"test/language/statements/variable/arguments-strict-list-final-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-strict-list-final.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-strict-list-first-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-strict-list-first.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-strict-list-middle-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-strict-list-middle.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-strict-list-repeated.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-strict-single-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/arguments-strict-single.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/binding-resolution.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: With(\n    WithStmt {\n        span: Span {\n            lo: BytePos(\n                571,\n            ),\n            hi: BytePos(\n                625,\n            ),\n            ctxt: #0,\n        },\n        obj: Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        577,\n                    ),\n                    hi: BytePos(\n                        580,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('obj' type=inline),\n                optional: false,\n            },\n        ),\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        582,\n                    ),\n                    hi: BytePos(\n                        625,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Decl(\n                        Var(\n                            VarDecl {\n                                span: Span {\n                                    lo: BytePos(\n                                        586,\n                                    ),\n                                    hi: BytePos(\n                                        623,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                kind: \"var\",\n                                declare: false,\n                                decls: [\n                                    VarDeclarator {\n                                        span: Span {\n                                            lo: BytePos(\n                                                590,\n                                            ),\n                                            hi: BytePos(\n                                                622,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        name: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            590,\n                                                        ),\n                                                        hi: BytePos(\n                                                            599,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('test262id' type=dynamic),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        init: Some(\n                                            Unary(\n                                                UnaryExpr {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            602,\n                                                        ),\n                                                        hi: BytePos(\n                                                            622,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    op: \"delete\",\n                                                    arg: Member(\n                                                        MemberExpr {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    609,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    622,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            obj: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            609,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            612,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('obj' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                            prop: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            613,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            622,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('test262id' type=dynamic),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        definite: false,\n                                    },\n                                ],\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/variable/cptn-value.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/dstr/ary-init-iter-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1162,\n        ),\n        hi: BytePos(\n            1172,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1162,\n                ),\n                hi: BytePos(\n                    1165,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1163,\n                                    ),\n                                    hi: BytePos(\n                                        1164,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1168,\n                    ),\n                    hi: BytePos(\n                        1172,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-init-iter-get-err-array-prototype.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1146,\n        ),\n        hi: BytePos(\n            1167,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1146,\n                ),\n                hi: BytePos(\n                    1155,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1147,\n                                    ),\n                                    hi: BytePos(\n                                        1148,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1150,\n                                    ),\n                                    hi: BytePos(\n                                        1151,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1153,\n                                    ),\n                                    hi: BytePos(\n                                        1154,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1158,\n                    ),\n                    hi: BytePos(\n                        1167,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1159,\n                                            ),\n                                            hi: BytePos(\n                                                1160,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1162,\n                                            ),\n                                            hi: BytePos(\n                                                1163,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1165,\n                                            ),\n                                            hi: BytePos(\n                                                1166,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-init-iter-get-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            992,\n        ),\n        hi: BytePos(\n            1002,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    992,\n                ),\n                hi: BytePos(\n                    995,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        993,\n                                    ),\n                                    hi: BytePos(\n                                        994,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        998,\n                    ),\n                    hi: BytePos(\n                        1002,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-init-iter-no-close.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1164,\n        ),\n        hi: BytePos(\n            1174,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1164,\n                ),\n                hi: BytePos(\n                    1167,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1165,\n                                    ),\n                                    hi: BytePos(\n                                        1166,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1170,\n                    ),\n                    hi: BytePos(\n                        1174,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-name-iter-val.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1427,\n        ),\n        hi: BytePos(\n            1448,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1427,\n                ),\n                hi: BytePos(\n                    1436,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1428,\n                                    ),\n                                    hi: BytePos(\n                                        1429,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1431,\n                                    ),\n                                    hi: BytePos(\n                                        1432,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1434,\n                                    ),\n                                    hi: BytePos(\n                                        1435,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1439,\n                    ),\n                    hi: BytePos(\n                        1448,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1440,\n                                            ),\n                                            hi: BytePos(\n                                                1441,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1443,\n                                            ),\n                                            hi: BytePos(\n                                                1444,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1446,\n                                            ),\n                                            hi: BytePos(\n                                                1447,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-elem-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1193,\n        ),\n        hi: BytePos(\n            1221,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1193,\n                ),\n                hi: BytePos(\n                    1216,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1194,\n                                ),\n                                hi: BytePos(\n                                    1215,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1194,\n                                        ),\n                                        hi: BytePos(\n                                            1203,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1195,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1196,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1198,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1199,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1201,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1202,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1206,\n                                        ),\n                                        hi: BytePos(\n                                            1215,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1207,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1208,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 4.0,\n                                                            raw: Some(\n                                                                \"4\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1210,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1211,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 5.0,\n                                                            raw: Some(\n                                                                \"5\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1213,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1214,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 6.0,\n                                                            raw: Some(\n                                                                \"6\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1219,\n                    ),\n                    hi: BytePos(\n                        1221,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-elem-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1155,\n        ),\n        hi: BytePos(\n            1192,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1155,\n                ),\n                hi: BytePos(\n                    1178,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1156,\n                                ),\n                                hi: BytePos(\n                                    1177,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1156,\n                                        ),\n                                        hi: BytePos(\n                                            1165,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1157,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1158,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1160,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1161,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1163,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1164,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1168,\n                                        ),\n                                        hi: BytePos(\n                                            1177,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1169,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1170,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 4.0,\n                                                            raw: Some(\n                                                                \"4\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1172,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1173,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 5.0,\n                                                            raw: Some(\n                                                                \"5\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1175,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1176,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 6.0,\n                                                            raw: Some(\n                                                                \"6\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1181,\n                    ),\n                    hi: BytePos(\n                        1192,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1182,\n                                        ),\n                                        hi: BytePos(\n                                            1191,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1183,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1184,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 7.0,\n                                                            raw: Some(\n                                                                \"7\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1186,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1187,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 8.0,\n                                                            raw: Some(\n                                                                \"8\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1189,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1190,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 9.0,\n                                                            raw: Some(\n                                                                \"9\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-elision-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1297,\n        ),\n        hi: BytePos(\n            1313,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1297,\n                ),\n                hi: BytePos(\n                    1308,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1298,\n                                ),\n                                hi: BytePos(\n                                    1307,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1298,\n                                        ),\n                                        hi: BytePos(\n                                            1301,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1304,\n                                        ),\n                                        hi: BytePos(\n                                            1307,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1304,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1305,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('g' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1311,\n                    ),\n                    hi: BytePos(\n                        1313,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-elision-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1227,\n        ),\n        hi: BytePos(\n            1245,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1227,\n                ),\n                hi: BytePos(\n                    1238,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1228,\n                                ),\n                                hi: BytePos(\n                                    1237,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1228,\n                                        ),\n                                        hi: BytePos(\n                                            1231,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1234,\n                                        ),\n                                        hi: BytePos(\n                                            1237,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1234,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1235,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('g' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1241,\n                    ),\n                    hi: BytePos(\n                        1245,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1242,\n                                        ),\n                                        hi: BytePos(\n                                            1244,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-empty-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1291,\n        ),\n        hi: BytePos(\n            1348,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1291,\n                ),\n                hi: BytePos(\n                    1343,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1292,\n                                ),\n                                hi: BytePos(\n                                    1342,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1292,\n                                        ),\n                                        hi: BytePos(\n                                            1294,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1297,\n                                        ),\n                                        hi: BytePos(\n                                            1342,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Fn(\n                                            FnExpr {\n                                                ident: None,\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1297,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1340,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1308,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1340,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [\n                                                                Expr(\n                                                                    ExprStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1310,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1325,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        expr: Assign(\n                                                                            AssignExpr {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        1310,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        1324,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                op: \"+=\",\n                                                                                left: Expr(\n                                                                                    Ident(\n                                                                                        Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1310,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1319,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('initCount' type=dynamic),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                                right: Lit(\n                                                                                    Num(\n                                                                                        Number {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1323,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1324,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: 1.0,\n                                                                                            raw: Some(\n                                                                                                \"1\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                                Return(\n                                                                    ReturnStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1326,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1338,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        arg: Some(\n                                                                            Ident(\n                                                                                Ident {\n                                                                                    span: Span {\n                                                                                        lo: BytePos(\n                                                                                            1333,\n                                                                                        ),\n                                                                                        hi: BytePos(\n                                                                                            1337,\n                                                                                        ),\n                                                                                        ctxt: #0,\n                                                                                    },\n                                                                                    sym: Atom('iter' type=inline),\n                                                                                    optional: false,\n                                                                                },\n                                                                            ),\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1346,\n                    ),\n                    hi: BytePos(\n                        1348,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-empty-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1175,\n        ),\n        hi: BytePos(\n            1223,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1175,\n                ),\n                hi: BytePos(\n                    1214,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1176,\n                                ),\n                                hi: BytePos(\n                                    1213,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1176,\n                                        ),\n                                        hi: BytePos(\n                                            1178,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1181,\n                                        ),\n                                        hi: BytePos(\n                                            1213,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Fn(\n                                            FnExpr {\n                                                ident: None,\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1181,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1211,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1192,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1211,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [\n                                                                Expr(\n                                                                    ExprStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1194,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1209,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        expr: Assign(\n                                                                            AssignExpr {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        1194,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        1208,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                op: \"+=\",\n                                                                                left: Expr(\n                                                                                    Ident(\n                                                                                        Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1194,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1203,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('initCount' type=dynamic),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                                right: Lit(\n                                                                                    Num(\n                                                                                        Number {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1207,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1208,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: 1.0,\n                                                                                            raw: Some(\n                                                                                                \"1\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1217,\n                    ),\n                    hi: BytePos(\n                        1223,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Array(\n                                ArrayLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1218,\n                                        ),\n                                        hi: BytePos(\n                                            1222,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1219,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1221,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 23.0,\n                                                            raw: Some(\n                                                                \"23\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-rest-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1217,\n        ),\n        hi: BytePos(\n            1239,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1217,\n                ),\n                hi: BytePos(\n                    1234,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1218,\n                                ),\n                                hi: BytePos(\n                                    1233,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1218,\n                                        ),\n                                        hi: BytePos(\n                                            1224,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Rest(\n                                                RestPat {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1219,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1223,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    dot3_token: Span {\n                                                        lo: BytePos(\n                                                            1219,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1222,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1222,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1223,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1227,\n                                        ),\n                                        hi: BytePos(\n                                            1233,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('values' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1237,\n                    ),\n                    hi: BytePos(\n                        1239,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-rest-iter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1198,\n        ),\n        hi: BytePos(\n            1252,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1198,\n                ),\n                hi: BytePos(\n                    1241,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1199,\n                                ),\n                                hi: BytePos(\n                                    1240,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1199,\n                                        ),\n                                        hi: BytePos(\n                                            1205,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Rest(\n                                                RestPat {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1200,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1204,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    dot3_token: Span {\n                                                        lo: BytePos(\n                                                            1200,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1203,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1203,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1204,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1208,\n                                        ),\n                                        hi: BytePos(\n                                            1240,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Fn(\n                                            FnExpr {\n                                                ident: None,\n                                                function: Function {\n                                                    params: [],\n                                                    decorators: [],\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1208,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1238,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    body: Some(\n                                                        BlockStmt {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1219,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1238,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            stmts: [\n                                                                Expr(\n                                                                    ExprStmt {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                1221,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                1236,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        expr: Assign(\n                                                                            AssignExpr {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        1221,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        1235,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                op: \"+=\",\n                                                                                left: Expr(\n                                                                                    Ident(\n                                                                                        Ident {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1221,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1230,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            sym: Atom('initCount' type=dynamic),\n                                                                                            optional: false,\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                                right: Lit(\n                                                                                    Num(\n                                                                                        Number {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    1234,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    1235,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: 1.0,\n                                                                                            raw: Some(\n                                                                                                \"1\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ],\n                                                        },\n                                                    ),\n                                                    is_generator: false,\n                                                    is_async: false,\n                                                    type_params: None,\n                                                    return_type: None,\n                                                },\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1244,\n                    ),\n                    hi: BytePos(\n                        1252,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1245,\n                                        ),\n                                        hi: BytePos(\n                                            1251,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('values' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-ary-val-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1275,\n        ),\n        hi: BytePos(\n            1289,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1275,\n                ),\n                hi: BytePos(\n                    1280,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Array(\n                        ArrayPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1276,\n                                ),\n                                hi: BytePos(\n                                    1279,\n                                ),\n                                ctxt: #0,\n                            },\n                            elems: [\n                                Some(\n                                    Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1277,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1278,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('x' type=static),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                ),\n                            ],\n                            optional: false,\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1283,\n                    ),\n                    hi: BytePos(\n                        1289,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1284,\n                                            ),\n                                            hi: BytePos(\n                                                1288,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1186,\n        ),\n        hi: BytePos(\n            1199,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1186,\n                ),\n                hi: BytePos(\n                    1194,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1187,\n                                ),\n                                hi: BytePos(\n                                    1193,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1187,\n                                            ),\n                                            hi: BytePos(\n                                                1188,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1191,\n                                            ),\n                                            hi: BytePos(\n                                                1193,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 23.0,\n                                        raw: Some(\n                                            \"23\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1197,\n                    ),\n                    hi: BytePos(\n                        1199,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1230,\n        ),\n        hi: BytePos(\n            1253,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1230,\n                ),\n                hi: BytePos(\n                    1248,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1231,\n                                ),\n                                hi: BytePos(\n                                    1247,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1231,\n                                            ),\n                                            hi: BytePos(\n                                                1236,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('arrow' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Arrow(\n                                ArrowExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1239,\n                                        ),\n                                        hi: BytePos(\n                                            1247,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    params: [],\n                                    body: BlockStmt(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1245,\n                                                ),\n                                                hi: BytePos(\n                                                    1247,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_async: false,\n                                    is_generator: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1251,\n                    ),\n                    hi: BytePos(\n                        1253,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1232,\n        ),\n        hi: BytePos(\n            1308,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1232,\n                ),\n                hi: BytePos(\n                    1303,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1233,\n                                ),\n                                hi: BytePos(\n                                    1247,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1233,\n                                            ),\n                                            hi: BytePos(\n                                                1236,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('cls' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Class(\n                                ClassExpr {\n                                    ident: None,\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1239,\n                                            ),\n                                            hi: BytePos(\n                                                1247,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1249,\n                                ),\n                                hi: BytePos(\n                                    1266,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1249,\n                                            ),\n                                            hi: BytePos(\n                                                1253,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xCls' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Class(\n                                ClassExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1262,\n                                                ),\n                                                hi: BytePos(\n                                                    1263,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('X' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1256,\n                                            ),\n                                            hi: BytePos(\n                                                1266,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1268,\n                                ),\n                                hi: BytePos(\n                                    1302,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1268,\n                                            ),\n                                            hi: BytePos(\n                                                1273,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xCls2' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Class(\n                                ClassExpr {\n                                    ident: None,\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1276,\n                                            ),\n                                            hi: BytePos(\n                                                1302,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [\n                                            Method(\n                                                ClassMethod {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1284,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1300,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1291,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1295,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('name' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1284,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1300,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1298,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1300,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                    kind: Method,\n                                                    is_static: true,\n                                                    accessibility: None,\n                                                    is_abstract: false,\n                                                    is_optional: false,\n                                                    is_override: false,\n                                                },\n                                            ),\n                                        ],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1306,\n                    ),\n                    hi: BytePos(\n                        1308,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1260,\n        ),\n        hi: BytePos(\n            1320,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1260,\n                ),\n                hi: BytePos(\n                    1315,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1261,\n                                ),\n                                hi: BytePos(\n                                    1285,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1261,\n                                            ),\n                                            hi: BytePos(\n                                                1266,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('cover' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Paren(\n                                ParenExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1269,\n                                        ),\n                                        hi: BytePos(\n                                            1285,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1270,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1284,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1282,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1284,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1287,\n                                ),\n                                hi: BytePos(\n                                    1314,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1287,\n                                            ),\n                                            hi: BytePos(\n                                                1293,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xCover' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Paren(\n                                ParenExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1296,\n                                        ),\n                                        hi: BytePos(\n                                            1314,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Seq(\n                                        SeqExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1297,\n                                                ),\n                                                hi: BytePos(\n                                                    1313,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            exprs: [\n                                                Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1297,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1298,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 0.0,\n                                                            raw: Some(\n                                                                \"0\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Fn(\n                                                    FnExpr {\n                                                        ident: None,\n                                                        function: Function {\n                                                            params: [],\n                                                            decorators: [],\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1300,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1313,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            body: Some(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1311,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1313,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [],\n                                                                },\n                                                            ),\n                                                            is_generator: false,\n                                                            is_async: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                    },\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1318,\n                    ),\n                    hi: BytePos(\n                        1320,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1229,\n        ),\n        hi: BytePos(\n            1278,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1229,\n                ),\n                hi: BytePos(\n                    1273,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1230,\n                                ),\n                                hi: BytePos(\n                                    1249,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1230,\n                                            ),\n                                            hi: BytePos(\n                                                1232,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('fn' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1235,\n                                            ),\n                                            hi: BytePos(\n                                                1249,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1247,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1249,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1251,\n                                ),\n                                hi: BytePos(\n                                    1272,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1251,\n                                            ),\n                                            hi: BytePos(\n                                                1254,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xFn' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Fn(\n                                FnExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1266,\n                                                ),\n                                                hi: BytePos(\n                                                    1267,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1257,\n                                            ),\n                                            hi: BytePos(\n                                                1272,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1270,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1272,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1276,\n                    ),\n                    hi: BytePos(\n                        1278,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1253,\n        ),\n        hi: BytePos(\n            1306,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1253,\n                ),\n                hi: BytePos(\n                    1301,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1254,\n                                ),\n                                hi: BytePos(\n                                    1275,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1254,\n                                            ),\n                                            hi: BytePos(\n                                                1257,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('gen' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1260,\n                                            ),\n                                            hi: BytePos(\n                                                1275,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1273,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1275,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: true,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1277,\n                                ),\n                                hi: BytePos(\n                                    1300,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1277,\n                                            ),\n                                            hi: BytePos(\n                                                1281,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('xGen' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Fn(\n                                FnExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1294,\n                                                ),\n                                                hi: BytePos(\n                                                    1295,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1284,\n                                            ),\n                                            hi: BytePos(\n                                                1300,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1298,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1300,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: true,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1304,\n                    ),\n                    hi: BytePos(\n                        1306,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-hole.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1095,\n        ),\n        hi: BytePos(\n            1109,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1095,\n                ),\n                hi: BytePos(\n                    1103,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1096,\n                                ),\n                                hi: BytePos(\n                                    1102,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1096,\n                                            ),\n                                            hi: BytePos(\n                                                1097,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1100,\n                                            ),\n                                            hi: BytePos(\n                                                1102,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 23.0,\n                                        raw: Some(\n                                            \"23\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1106,\n                    ),\n                    hi: BytePos(\n                        1109,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    None,\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1090,\n        ),\n        hi: BytePos(\n            1173,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1090,\n                ),\n                hi: BytePos(\n                    1150,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1091,\n                                ),\n                                hi: BytePos(\n                                    1104,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1091,\n                                            ),\n                                            hi: BytePos(\n                                                1092,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1095,\n                                        ),\n                                        hi: BytePos(\n                                            1104,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1095,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1102,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1106,\n                                ),\n                                hi: BytePos(\n                                    1119,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1106,\n                                            ),\n                                            hi: BytePos(\n                                                1107,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1110,\n                                        ),\n                                        hi: BytePos(\n                                            1119,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1110,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1117,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1121,\n                                ),\n                                hi: BytePos(\n                                    1134,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1121,\n                                            ),\n                                            hi: BytePos(\n                                                1122,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1125,\n                                        ),\n                                        hi: BytePos(\n                                            1134,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1125,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1132,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1136,\n                                ),\n                                hi: BytePos(\n                                    1149,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1136,\n                                            ),\n                                            hi: BytePos(\n                                                1137,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('z' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1140,\n                                        ),\n                                        hi: BytePos(\n                                            1149,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1140,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1147,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1153,\n                    ),\n                    hi: BytePos(\n                        1173,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1154,\n                                            ),\n                                            hi: BytePos(\n                                                1158,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1160,\n                                            ),\n                                            hi: BytePos(\n                                                1161,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 0.0,\n                                        raw: Some(\n                                            \"0\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Bool(\n                                    Bool {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1163,\n                                            ),\n                                            hi: BytePos(\n                                                1168,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: false,\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Str(\n                                    Str {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1170,\n                                            ),\n                                            hi: BytePos(\n                                                1172,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: Atom('' type=static),\n                                        raw: Some(\n                                            \"''\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1067,\n        ),\n        hi: BytePos(\n            1131,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1067,\n                ),\n                hi: BytePos(\n                    1117,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1068,\n                                ),\n                                hi: BytePos(\n                                    1116,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1068,\n                                            ),\n                                            hi: BytePos(\n                                                1069,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1072,\n                                        ),\n                                        hi: BytePos(\n                                            1116,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Paren(\n                                            ParenExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1072,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1114,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                expr: Fn(\n                                                    FnExpr {\n                                                        ident: None,\n                                                        function: Function {\n                                                            params: [],\n                                                            decorators: [],\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1073,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1113,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            body: Some(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1084,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1113,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [\n                                                                        Throw(\n                                                                            ThrowStmt {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        1086,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        1111,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                arg: New(\n                                                                                    NewExpr {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                1092,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                1110,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        callee: Ident(\n                                                                                            Ident {\n                                                                                                span: Span {\n                                                                                                    lo: BytePos(\n                                                                                                        1096,\n                                                                                                    ),\n                                                                                                    hi: BytePos(\n                                                                                                        1108,\n                                                                                                    ),\n                                                                                                    ctxt: #0,\n                                                                                                },\n                                                                                                sym: Atom('Test262Error' type=dynamic),\n                                                                                                optional: false,\n                                                                                            },\n                                                                                        ),\n                                                                                        args: Some(\n                                                                                            [],\n                                                                                        ),\n                                                                                        type_args: None,\n                                                                                    },\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    ],\n                                                                },\n                                                            ),\n                                                            is_generator: false,\n                                                            is_async: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1120,\n                    ),\n                    hi: BytePos(\n                        1131,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1121,\n                                        ),\n                                        hi: BytePos(\n                                            1130,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('undefined' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1116,\n        ),\n        hi: BytePos(\n            1138,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1116,\n                ),\n                hi: BytePos(\n                    1124,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1117,\n                                ),\n                                hi: BytePos(\n                                    1123,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1117,\n                                            ),\n                                            hi: BytePos(\n                                                1118,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1121,\n                                            ),\n                                            hi: BytePos(\n                                                1123,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 23.0,\n                                        raw: Some(\n                                            \"23\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1127,\n                    ),\n                    hi: BytePos(\n                        1138,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1128,\n                                        ),\n                                        hi: BytePos(\n                                            1137,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('undefined' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1277,\n        ),\n        hi: BytePos(\n            1311,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1277,\n                ),\n                hi: BytePos(\n                    1306,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1279,\n                                ),\n                                hi: BytePos(\n                                    1304,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1279,\n                                            ),\n                                            hi: BytePos(\n                                                1280,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1283,\n                                        ),\n                                        hi: BytePos(\n                                            1304,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('unresolvableReference' type=dynamic),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1309,\n                    ),\n                    hi: BytePos(\n                        1311,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-complete.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1271,\n        ),\n        hi: BytePos(\n            1279,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1271,\n                ),\n                hi: BytePos(\n                    1274,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1272,\n                                    ),\n                                    hi: BytePos(\n                                        1273,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1277,\n                    ),\n                    hi: BytePos(\n                        1279,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-done.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1021,\n        ),\n        hi: BytePos(\n            1032,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1021,\n                ),\n                hi: BytePos(\n                    1027,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1022,\n                                    ),\n                                    hi: BytePos(\n                                        1023,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('_' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1025,\n                                    ),\n                                    hi: BytePos(\n                                        1026,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1030,\n                    ),\n                    hi: BytePos(\n                        1032,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-step-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1250,\n        ),\n        hi: BytePos(\n            1257,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1250,\n                ),\n                hi: BytePos(\n                    1253,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1251,\n                                    ),\n                                    hi: BytePos(\n                                        1252,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1256,\n                    ),\n                    hi: BytePos(\n                        1257,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('g' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1724,\n        ),\n        hi: BytePos(\n            1745,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1724,\n                ),\n                hi: BytePos(\n                    1733,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1725,\n                                    ),\n                                    hi: BytePos(\n                                        1726,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1728,\n                                    ),\n                                    hi: BytePos(\n                                        1729,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1731,\n                                    ),\n                                    hi: BytePos(\n                                        1732,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1736,\n                    ),\n                    hi: BytePos(\n                        1745,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1737,\n                                            ),\n                                            hi: BytePos(\n                                                1738,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1740,\n                                            ),\n                                            hi: BytePos(\n                                                1741,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1743,\n                                            ),\n                                            hi: BytePos(\n                                                1744,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-val-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1614,\n        ),\n        hi: BytePos(\n            1621,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1614,\n                ),\n                hi: BytePos(\n                    1617,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1615,\n                                    ),\n                                    hi: BytePos(\n                                        1616,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1620,\n                    ),\n                    hi: BytePos(\n                        1621,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('g' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-val.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1453,\n        ),\n        hi: BytePos(\n            1474,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1453,\n                ),\n                hi: BytePos(\n                    1462,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1454,\n                                    ),\n                                    hi: BytePos(\n                                        1455,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1457,\n                                    ),\n                                    hi: BytePos(\n                                        1458,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1460,\n                                    ),\n                                    hi: BytePos(\n                                        1461,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('z' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1465,\n                    ),\n                    hi: BytePos(\n                        1474,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1466,\n                                            ),\n                                            hi: BytePos(\n                                                1467,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1469,\n                                            ),\n                                            hi: BytePos(\n                                                1470,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1472,\n                                            ),\n                                            hi: BytePos(\n                                                1473,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-static-init-await-invalid.js","error":null}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-id-static-init-await-valid.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/variable/dstr/ary-ptrn-elem-id-static-init-await-valid.js"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-obj-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1192,\n        ),\n        hi: BytePos(\n            1236,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1192,\n                ),\n                hi: BytePos(\n                    1231,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1193,\n                                ),\n                                hi: BytePos(\n                                    1230,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1193,\n                                        ),\n                                        hi: BytePos(\n                                            1204,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1195,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1196,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1195,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1196,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1198,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1199,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1198,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1199,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1201,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1202,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1201,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1202,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1207,\n                                        ),\n                                        hi: BytePos(\n                                            1230,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1209,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1210,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1212,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1214,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 44.0,\n                                                                raw: Some(\n                                                                    \"44\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1216,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1217,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1219,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1221,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 55.0,\n                                                                raw: Some(\n                                                                    \"55\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1223,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1224,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1226,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1228,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 66.0,\n                                                                raw: Some(\n                                                                    \"66\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1234,\n                    ),\n                    hi: BytePos(\n                        1236,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-obj-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1191,\n        ),\n        hi: BytePos(\n            1258,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1191,\n                ),\n                hi: BytePos(\n                    1230,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1192,\n                                ),\n                                hi: BytePos(\n                                    1229,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1192,\n                                        ),\n                                        hi: BytePos(\n                                            1203,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1194,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1195,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1194,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1195,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1197,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1198,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1197,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1198,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1200,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1201,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1200,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1201,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('z' type=inline),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1206,\n                                        ),\n                                        hi: BytePos(\n                                            1229,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1208,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1209,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1211,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1213,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 44.0,\n                                                                raw: Some(\n                                                                    \"44\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1215,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1216,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1218,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1220,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 55.0,\n                                                                raw: Some(\n                                                                    \"55\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1222,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1223,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1225,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1227,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 66.0,\n                                                                raw: Some(\n                                                                    \"66\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1233,\n                    ),\n                    hi: BytePos(\n                        1258,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1234,\n                                        ),\n                                        hi: BytePos(\n                                            1257,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1236,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1237,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1239,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1241,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 11.0,\n                                                                raw: Some(\n                                                                    \"11\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1243,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1244,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1246,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1248,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 22.0,\n                                                                raw: Some(\n                                                                    \"22\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1250,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1251,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1253,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1255,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 33.0,\n                                                                raw: Some(\n                                                                    \"33\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-obj-prop-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1197,\n        ),\n        hi: BytePos(\n            1253,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1197,\n                ),\n                hi: BytePos(\n                    1248,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1198,\n                                ),\n                                hi: BytePos(\n                                    1247,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1198,\n                                        ),\n                                        hi: BytePos(\n                                            1218,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1200,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1201,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('u' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1203,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1204,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('v' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1206,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1207,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('w' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1209,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1210,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1212,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1213,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1215,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1216,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1221,\n                                        ),\n                                        hi: BytePos(\n                                            1247,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1223,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1224,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1226,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1229,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 444.0,\n                                                                raw: Some(\n                                                                    \"444\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1231,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1232,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1234,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1237,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 555.0,\n                                                                raw: Some(\n                                                                    \"555\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1239,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1240,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1242,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1245,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 666.0,\n                                                                raw: Some(\n                                                                    \"666\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1251,\n                    ),\n                    hi: BytePos(\n                        1253,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-obj-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1196,\n        ),\n        hi: BytePos(\n            1278,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1196,\n                ),\n                hi: BytePos(\n                    1247,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1197,\n                                ),\n                                hi: BytePos(\n                                    1246,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1197,\n                                        ),\n                                        hi: BytePos(\n                                            1217,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1199,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1200,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('u' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1202,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1203,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('v' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1205,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1206,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('w' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1208,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1209,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1211,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1212,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1214,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1215,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1220,\n                                        ),\n                                        hi: BytePos(\n                                            1246,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1222,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1223,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1225,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1228,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 444.0,\n                                                                raw: Some(\n                                                                    \"444\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1230,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1231,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1233,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1236,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 555.0,\n                                                                raw: Some(\n                                                                    \"555\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1238,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1239,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1241,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1244,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 666.0,\n                                                                raw: Some(\n                                                                    \"666\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1250,\n                    ),\n                    hi: BytePos(\n                        1278,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Object(\n                                ObjectLit {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1251,\n                                        ),\n                                        hi: BytePos(\n                                            1277,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1253,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1254,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('u' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1256,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1259,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 777.0,\n                                                                raw: Some(\n                                                                    \"777\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1261,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1262,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1264,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1267,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 888.0,\n                                                                raw: Some(\n                                                                    \"888\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                        Prop(\n                                            KeyValue(\n                                                KeyValueProp {\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1269,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1270,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    value: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1272,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1275,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 999.0,\n                                                                raw: Some(\n                                                                    \"999\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-obj-val-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1282,\n        ),\n        hi: BytePos(\n            1298,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1282,\n                ),\n                hi: BytePos(\n                    1289,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Object(\n                        ObjectPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1283,\n                                ),\n                                hi: BytePos(\n                                    1288,\n                                ),\n                                ctxt: #0,\n                            },\n                            props: [\n                                Assign(\n                                    AssignPatProp {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1285,\n                                            ),\n                                            hi: BytePos(\n                                                1286,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        key: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1285,\n                                                ),\n                                                hi: BytePos(\n                                                    1286,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        value: None,\n                                    },\n                                ),\n                            ],\n                            optional: false,\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1292,\n                    ),\n                    hi: BytePos(\n                        1298,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Null(\n                                    Null {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1293,\n                                            ),\n                                            hi: BytePos(\n                                                1297,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elem-obj-val-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1293,\n        ),\n        hi: BytePos(\n            1305,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1293,\n                ),\n                hi: BytePos(\n                    1300,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Object(\n                        ObjectPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1294,\n                                ),\n                                hi: BytePos(\n                                    1299,\n                                ),\n                                ctxt: #0,\n                            },\n                            props: [\n                                Assign(\n                                    AssignPatProp {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1296,\n                                            ),\n                                            hi: BytePos(\n                                                1297,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        key: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1296,\n                                                ),\n                                                hi: BytePos(\n                                                    1297,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        value: None,\n                                    },\n                                ),\n                            ],\n                            optional: false,\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1303,\n                    ),\n                    hi: BytePos(\n                        1305,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elision-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1170,\n        ),\n        hi: BytePos(\n            1180,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1170,\n                ),\n                hi: BytePos(\n                    1173,\n                ),\n                ctxt: #0,\n            },\n            elems: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1176,\n                    ),\n                    hi: BytePos(\n                        1180,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elision-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-elision.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1426,\n        ),\n        hi: BytePos(\n            1435,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1426,\n                ),\n                hi: BytePos(\n                    1429,\n                ),\n                ctxt: #0,\n            },\n            elems: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Call(\n            CallExpr {\n                span: Span {\n                    lo: BytePos(\n                        1432,\n                    ),\n                    hi: BytePos(\n                        1435,\n                    ),\n                    ctxt: #0,\n                },\n                callee: Expr(\n                    Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1432,\n                                ),\n                                hi: BytePos(\n                                    1433,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('g' type=static),\n                            optional: false,\n                        },\n                    ),\n                ),\n                args: [],\n                type_args: None,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-empty.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            900,\n        ),\n        hi: BytePos(\n            909,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    900,\n                ),\n                hi: BytePos(\n                    902,\n                ),\n                ctxt: #0,\n            },\n            elems: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        905,\n                    ),\n                    hi: BytePos(\n                        909,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-ary-elem.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1827,\n        ),\n        hi: BytePos(\n            1853,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1827,\n                ),\n                hi: BytePos(\n                    1841,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1828,\n                                ),\n                                hi: BytePos(\n                                    1840,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1828,\n                                ),\n                                hi: BytePos(\n                                    1831,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1831,\n                                        ),\n                                        hi: BytePos(\n                                            1840,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1832,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1833,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1835,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1836,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1838,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1839,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1844,\n                    ),\n                    hi: BytePos(\n                        1853,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1845,\n                                            ),\n                                            hi: BytePos(\n                                                1846,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1848,\n                                            ),\n                                            hi: BytePos(\n                                                1849,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 4.0,\n                                        raw: Some(\n                                            \"4\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1851,\n                                            ),\n                                            hi: BytePos(\n                                                1852,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 5.0,\n                                        raw: Some(\n                                            \"5\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-ary-elision.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1825,\n        ),\n        hi: BytePos(\n            1839,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1825,\n                ),\n                hi: BytePos(\n                    1833,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1826,\n                                ),\n                                hi: BytePos(\n                                    1832,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1826,\n                                ),\n                                hi: BytePos(\n                                    1829,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1829,\n                                        ),\n                                        hi: BytePos(\n                                            1832,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Call(\n            CallExpr {\n                span: Span {\n                    lo: BytePos(\n                        1836,\n                    ),\n                    hi: BytePos(\n                        1839,\n                    ),\n                    ctxt: #0,\n                },\n                callee: Expr(\n                    Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1836,\n                                ),\n                                hi: BytePos(\n                                    1837,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('g' type=static),\n                            optional: false,\n                        },\n                    ),\n                ),\n                args: [],\n                type_args: None,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-ary-empty.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1282,\n        ),\n        hi: BytePos(\n            1296,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1282,\n                ),\n                hi: BytePos(\n                    1289,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1283,\n                                ),\n                                hi: BytePos(\n                                    1288,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1283,\n                                ),\n                                hi: BytePos(\n                                    1286,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1286,\n                                        ),\n                                        hi: BytePos(\n                                            1288,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1292,\n                    ),\n                    hi: BytePos(\n                        1296,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-ary-rest.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1079,\n        ),\n        hi: BytePos(\n            1099,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1079,\n                ),\n                hi: BytePos(\n                    1090,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1080,\n                                ),\n                                hi: BytePos(\n                                    1089,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1080,\n                                ),\n                                hi: BytePos(\n                                    1083,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1083,\n                                        ),\n                                        hi: BytePos(\n                                            1089,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Rest(\n                                                RestPat {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1084,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1088,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    dot3_token: Span {\n                                                        lo: BytePos(\n                                                            1084,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1087,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1087,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1088,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1093,\n                    ),\n                    hi: BytePos(\n                        1099,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-id-direct.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            999,\n        ),\n        hi: BytePos(\n            1011,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    999,\n                ),\n                hi: BytePos(\n                    1005,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1000,\n                                ),\n                                hi: BytePos(\n                                    1004,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1000,\n                                ),\n                                hi: BytePos(\n                                    1003,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1003,\n                                            ),\n                                            hi: BytePos(\n                                                1004,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1008,\n                    ),\n                    hi: BytePos(\n                        1011,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1009,\n                                            ),\n                                            hi: BytePos(\n                                                1010,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-id-elision-next-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-id-elision.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1207,\n        ),\n        hi: BytePos(\n            1227,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1207,\n                ),\n                hi: BytePos(\n                    1218,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                None,\n                None,\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1213,\n                                ),\n                                hi: BytePos(\n                                    1217,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1213,\n                                ),\n                                hi: BytePos(\n                                    1216,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1216,\n                                            ),\n                                            hi: BytePos(\n                                                1217,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1221,\n                    ),\n                    hi: BytePos(\n                        1227,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-id-exhausted.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1168,\n        ),\n        hi: BytePos(\n            1187,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1168,\n                ),\n                hi: BytePos(\n                    1178,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                None,\n                None,\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1173,\n                                ),\n                                hi: BytePos(\n                                    1177,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1173,\n                                ),\n                                hi: BytePos(\n                                    1176,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1176,\n                                            ),\n                                            hi: BytePos(\n                                                1177,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1181,\n                    ),\n                    hi: BytePos(\n                        1187,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1182,\n                                            ),\n                                            hi: BytePos(\n                                                1183,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1185,\n                                            ),\n                                            hi: BytePos(\n                                                1186,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-id-iter-step-err.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-id-iter-val-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1479,\n        ),\n        hi: BytePos(\n            1492,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1479,\n                ),\n                hi: BytePos(\n                    1485,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1480,\n                                ),\n                                hi: BytePos(\n                                    1484,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1480,\n                                ),\n                                hi: BytePos(\n                                    1483,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1483,\n                                            ),\n                                            hi: BytePos(\n                                                1484,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1488,\n                    ),\n                    hi: BytePos(\n                        1492,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('iter' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            933,\n        ),\n        hi: BytePos(\n            948,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    933,\n                ),\n                hi: BytePos(\n                    939,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    934,\n                                ),\n                                hi: BytePos(\n                                    938,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    934,\n                                ),\n                                hi: BytePos(\n                                    937,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                937,\n                                            ),\n                                            hi: BytePos(\n                                                938,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        942,\n                    ),\n                    hi: BytePos(\n                        948,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('values' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-init-ary.js","error":null}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-init-id.js","error":null}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-init-obj.js","error":null}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-not-final-ary.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1025,\n        ),\n        hi: BytePos(\n            1048,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1025,\n                ),\n                hi: BytePos(\n                    1036,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1026,\n                                ),\n                                hi: BytePos(\n                                    1032,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1026,\n                                ),\n                                hi: BytePos(\n                                    1029,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Array(\n                                ArrayPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1029,\n                                        ),\n                                        hi: BytePos(\n                                            1032,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    elems: [\n                                        Some(\n                                            Ident(\n                                                BindingIdent {\n                                                    id: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1030,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1031,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    type_ann: None,\n                                                },\n                                            ),\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1034,\n                                    ),\n                                    hi: BytePos(\n                                        1035,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1039,\n                    ),\n                    hi: BytePos(\n                        1048,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1040,\n                                            ),\n                                            hi: BytePos(\n                                                1041,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1043,\n                                            ),\n                                            hi: BytePos(\n                                                1044,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1046,\n                                            ),\n                                            hi: BytePos(\n                                                1047,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-not-final-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1013,\n        ),\n        hi: BytePos(\n            1034,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1013,\n                ),\n                hi: BytePos(\n                    1022,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1014,\n                                ),\n                                hi: BytePos(\n                                    1018,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1014,\n                                ),\n                                hi: BytePos(\n                                    1017,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1017,\n                                            ),\n                                            hi: BytePos(\n                                                1018,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1020,\n                                    ),\n                                    hi: BytePos(\n                                        1021,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1025,\n                    ),\n                    hi: BytePos(\n                        1034,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1026,\n                                            ),\n                                            hi: BytePos(\n                                                1027,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1029,\n                                            ),\n                                            hi: BytePos(\n                                                1030,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1032,\n                                            ),\n                                            hi: BytePos(\n                                                1033,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-not-final-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1026,\n        ),\n        hi: BytePos(\n            1051,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1026,\n                ),\n                hi: BytePos(\n                    1039,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1027,\n                                ),\n                                hi: BytePos(\n                                    1035,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1027,\n                                ),\n                                hi: BytePos(\n                                    1030,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1030,\n                                        ),\n                                        hi: BytePos(\n                                            1035,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1032,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1033,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1032,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1033,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n                Some(\n                    Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1037,\n                                    ),\n                                    hi: BytePos(\n                                        1038,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1042,\n                    ),\n                    hi: BytePos(\n                        1051,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1043,\n                                            ),\n                                            hi: BytePos(\n                                                1044,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1046,\n                                            ),\n                                            hi: BytePos(\n                                                1047,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1049,\n                                            ),\n                                            hi: BytePos(\n                                                1050,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-obj-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1064,\n        ),\n        hi: BytePos(\n            1091,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1064,\n                ),\n                hi: BytePos(\n                    1079,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1065,\n                                ),\n                                hi: BytePos(\n                                    1078,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1065,\n                                ),\n                                hi: BytePos(\n                                    1068,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1068,\n                                        ),\n                                        hi: BytePos(\n                                            1078,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        Assign(\n                                            AssignPatProp {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1070,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1076,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                key: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1070,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1076,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('length' type=static),\n                                                    optional: false,\n                                                },\n                                                value: None,\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1082,\n                    ),\n                    hi: BytePos(\n                        1091,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1083,\n                                            ),\n                                            hi: BytePos(\n                                                1084,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 1.0,\n                                        raw: Some(\n                                            \"1\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1086,\n                                            ),\n                                            hi: BytePos(\n                                                1087,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 2.0,\n                                        raw: Some(\n                                            \"2\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1089,\n                                            ),\n                                            hi: BytePos(\n                                                1090,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 3.0,\n                                        raw: Some(\n                                            \"3\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/ary-ptrn-rest-obj-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1091,\n        ),\n        hi: BytePos(\n            1145,\n        ),\n        ctxt: #0,\n    },\n    name: Array(\n        ArrayPat {\n            span: Span {\n                lo: BytePos(\n                    1091,\n                ),\n                hi: BytePos(\n                    1133,\n                ),\n                ctxt: #0,\n            },\n            elems: [\n                Some(\n                    Rest(\n                        RestPat {\n                            span: Span {\n                                lo: BytePos(\n                                    1092,\n                                ),\n                                hi: BytePos(\n                                    1132,\n                                ),\n                                ctxt: #0,\n                            },\n                            dot3_token: Span {\n                                lo: BytePos(\n                                    1092,\n                                ),\n                                hi: BytePos(\n                                    1095,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: Object(\n                                ObjectPat {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1095,\n                                        ),\n                                        hi: BytePos(\n                                            1132,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    props: [\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1097,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1098,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 0.0,\n                                                        raw: Some(\n                                                            \"0\",\n                                                        ),\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1100,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1101,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('v' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1103,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1104,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 1.0,\n                                                        raw: Some(\n                                                            \"1\",\n                                                        ),\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1106,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1107,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('w' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1109,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1110,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 2.0,\n                                                        raw: Some(\n                                                            \"2\",\n                                                        ),\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1112,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1113,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1115,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1116,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 3.0,\n                                                        raw: Some(\n                                                            \"3\",\n                                                        ),\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1118,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1119,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        KeyValue(\n                                            KeyValuePatProp {\n                                                key: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1121,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1127,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('length' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                value: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1129,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1130,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ],\n                                    optional: false,\n                                    type_ann: None,\n                                },\n                            ),\n                            type_ann: None,\n                        },\n                    ),\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Array(\n            ArrayLit {\n                span: Span {\n                    lo: BytePos(\n                        1136,\n                    ),\n                    hi: BytePos(\n                        1145,\n                    ),\n                    ctxt: #0,\n                },\n                elems: [\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1137,\n                                            ),\n                                            hi: BytePos(\n                                                1138,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 7.0,\n                                        raw: Some(\n                                            \"7\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1140,\n                                            ),\n                                            hi: BytePos(\n                                                1141,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 8.0,\n                                        raw: Some(\n                                            \"8\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                    Some(\n                        ExprOrSpread {\n                            spread: None,\n                            expr: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1143,\n                                            ),\n                                            hi: BytePos(\n                                                1144,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 9.0,\n                                        raw: Some(\n                                            \"9\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-init-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            856,\n        ),\n        hi: BytePos(\n            865,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    856,\n                ),\n                hi: BytePos(\n                    858,\n                ),\n                ctxt: #0,\n            },\n            props: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Lit(\n            Null(\n                Null {\n                    span: Span {\n                        lo: BytePos(\n                            861,\n                        ),\n                        hi: BytePos(\n                            865,\n                        ),\n                        ctxt: #0,\n                    },\n                },\n            ),\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-init-undefined.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            866,\n        ),\n        hi: BytePos(\n            880,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    866,\n                ),\n                hi: BytePos(\n                    868,\n                ),\n                ctxt: #0,\n            },\n            props: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        871,\n                    ),\n                    hi: BytePos(\n                        880,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('undefined' type=static),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-elem-id-static-init-await-invalid.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        691,\n                    ),\n                    hi: BytePos(\n                        692,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('C' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        685,\n                    ),\n                    hi: BytePos(\n                        733,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [\n                    StaticBlock(\n                        StaticBlock {\n                            span: Span {\n                                lo: BytePos(\n                                    697,\n                                ),\n                                hi: BytePos(\n                                    731,\n                                ),\n                                ctxt: #0,\n                            },\n                            body: BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        704,\n                                    ),\n                                    hi: BytePos(\n                                        731,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [\n                                    Decl(\n                                        Var(\n                                            VarDecl {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        710,\n                                                    ),\n                                                    hi: BytePos(\n                                                        727,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                kind: \"var\",\n                                                declare: false,\n                                                decls: [\n                                                    VarDeclarator {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                714,\n                                                            ),\n                                                            hi: BytePos(\n                                                                726,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        name: Object(\n                                                            ObjectPat {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        714,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        721,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                props: [\n                                                                    Assign(\n                                                                        AssignPatProp {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    715,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    720,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            key: Ident {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        715,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        720,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                sym: Atom('await' type=static),\n                                                                                optional: false,\n                                                                            },\n                                                                            value: None,\n                                                                        },\n                                                                    ),\n                                                                ],\n                                                                optional: false,\n                                                                type_ann: None,\n                                                            },\n                                                        ),\n                                                        init: Some(\n                                                            Object(\n                                                                ObjectLit {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            724,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            726,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    props: [],\n                                                                },\n                                                            ),\n                                                        ),\n                                                        definite: false,\n                                                    },\n                                                ],\n                                            },\n                                        ),\n                                    ),\n                                ],\n                            },\n                        },\n                    ),\n                ],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-elem-id-static-init-await-valid.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        497,\n                    ),\n                    hi: BytePos(\n                        498,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('C' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        491,\n                    ),\n                    hi: BytePos(\n                        552,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [\n                    StaticBlock(\n                        StaticBlock {\n                            span: Span {\n                                lo: BytePos(\n                                    503,\n                                ),\n                                hi: BytePos(\n                                    550,\n                                ),\n                                ctxt: #0,\n                            },\n                            body: BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        510,\n                                    ),\n                                    hi: BytePos(\n                                        550,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [\n                                    Expr(\n                                        ExprStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    516,\n                                                ),\n                                                hi: BytePos(\n                                                    546,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            expr: Paren(\n                                                ParenExpr {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            516,\n                                                        ),\n                                                        hi: BytePos(\n                                                            545,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    expr: Arrow(\n                                                        ArrowExpr {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    517,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    544,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            params: [],\n                                                            body: BlockStmt(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            523,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            544,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [\n                                                                        Decl(\n                                                                            Var(\n                                                                                VarDecl {\n                                                                                    span: Span {\n                                                                                        lo: BytePos(\n                                                                                            525,\n                                                                                        ),\n                                                                                        hi: BytePos(\n                                                                                            542,\n                                                                                        ),\n                                                                                        ctxt: #0,\n                                                                                    },\n                                                                                    kind: \"var\",\n                                                                                    declare: false,\n                                                                                    decls: [\n                                                                                        VarDeclarator {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    529,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    541,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            name: Object(\n                                                                                                ObjectPat {\n                                                                                                    span: Span {\n                                                                                                        lo: BytePos(\n                                                                                                            529,\n                                                                                                        ),\n                                                                                                        hi: BytePos(\n                                                                                                            536,\n                                                                                                        ),\n                                                                                                        ctxt: #0,\n                                                                                                    },\n                                                                                                    props: [\n                                                                                                        Assign(\n                                                                                                            AssignPatProp {\n                                                                                                                span: Span {\n                                                                                                                    lo: BytePos(\n                                                                                                                        530,\n                                                                                                                    ),\n                                                                                                                    hi: BytePos(\n                                                                                                                        535,\n                                                                                                                    ),\n                                                                                                                    ctxt: #0,\n                                                                                                                },\n                                                                                                                key: Ident {\n                                                                                                                    span: Span {\n                                                                                                                        lo: BytePos(\n                                                                                                                            530,\n                                                                                                                        ),\n                                                                                                                        hi: BytePos(\n                                                                                                                            535,\n                                                                                                                        ),\n                                                                                                                        ctxt: #0,\n                                                                                                                    },\n                                                                                                                    sym: Atom('await' type=static),\n                                                                                                                    optional: false,\n                                                                                                                },\n                                                                                                                value: None,\n                                                                                                            },\n                                                                                                        ),\n                                                                                                    ],\n                                                                                                    optional: false,\n                                                                                                    type_ann: None,\n                                                                                                },\n                                                                                            ),\n                                                                                            init: Some(\n                                                                                                Object(\n                                                                                                    ObjectLit {\n                                                                                                        span: Span {\n                                                                                                            lo: BytePos(\n                                                                                                                539,\n                                                                                                            ),\n                                                                                                            hi: BytePos(\n                                                                                                                541,\n                                                                                                            ),\n                                                                                                            ctxt: #0,\n                                                                                                        },\n                                                                                                        props: [],\n                                                                                                    },\n                                                                                                ),\n                                                                                            ),\n                                                                                            definite: false,\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                            ),\n                                                                        ),\n                                                                    ],\n                                                                },\n                                                            ),\n                                                            is_async: false,\n                                                            is_generator: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                ],\n                            },\n                        },\n                    ),\n                ],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-empty.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            926,\n        ),\n        hi: BytePos(\n            934,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    926,\n                ),\n                hi: BytePos(\n                    928,\n                ),\n                ctxt: #0,\n            },\n            props: [],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        931,\n                    ),\n                    hi: BytePos(\n                        934,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('obj' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-get-value-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1073,\n        ),\n        hi: BytePos(\n            1104,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1073,\n                ),\n                hi: BytePos(\n                    1085,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1075,\n                            ),\n                            hi: BytePos(\n                                1083,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1075,\n                                ),\n                                hi: BytePos(\n                                    1083,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('poisoned' type=dynamic),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1088,\n                    ),\n                    hi: BytePos(\n                        1104,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('poisonedProperty' type=dynamic),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-arrow.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1173,\n        ),\n        hi: BytePos(\n            1198,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1173,\n                ),\n                hi: BytePos(\n                    1193,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1175,\n                            ),\n                            hi: BytePos(\n                                1191,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1175,\n                                ),\n                                hi: BytePos(\n                                    1180,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('arrow' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Arrow(\n                                ArrowExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1183,\n                                        ),\n                                        hi: BytePos(\n                                            1191,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    params: [],\n                                    body: BlockStmt(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1189,\n                                                ),\n                                                hi: BytePos(\n                                                    1191,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [],\n                                        },\n                                    ),\n                                    is_async: false,\n                                    is_generator: false,\n                                    type_params: None,\n                                    return_type: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1196,\n                    ),\n                    hi: BytePos(\n                        1198,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1177,\n        ),\n        hi: BytePos(\n            1255,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1177,\n                ),\n                hi: BytePos(\n                    1250,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1179,\n                            ),\n                            hi: BytePos(\n                                1193,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1179,\n                                ),\n                                hi: BytePos(\n                                    1182,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('cls' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Class(\n                                ClassExpr {\n                                    ident: None,\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1185,\n                                            ),\n                                            hi: BytePos(\n                                                1193,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1195,\n                            ),\n                            hi: BytePos(\n                                1212,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1195,\n                                ),\n                                hi: BytePos(\n                                    1199,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xCls' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Class(\n                                ClassExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1208,\n                                                ),\n                                                hi: BytePos(\n                                                    1209,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('X' type=inline),\n                                            optional: false,\n                                        },\n                                    ),\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1202,\n                                            ),\n                                            hi: BytePos(\n                                                1212,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1214,\n                            ),\n                            hi: BytePos(\n                                1248,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1214,\n                                ),\n                                hi: BytePos(\n                                    1219,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xCls2' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Class(\n                                ClassExpr {\n                                    ident: None,\n                                    class: Class {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1222,\n                                            ),\n                                            hi: BytePos(\n                                                1248,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        decorators: [],\n                                        body: [\n                                            Method(\n                                                ClassMethod {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1230,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1246,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1237,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1241,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('name' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                    function: Function {\n                                                        params: [],\n                                                        decorators: [],\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1230,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1246,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        body: Some(\n                                                            BlockStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1244,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1246,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                stmts: [],\n                                                            },\n                                                        ),\n                                                        is_generator: false,\n                                                        is_async: false,\n                                                        type_params: None,\n                                                        return_type: None,\n                                                    },\n                                                    kind: Method,\n                                                    is_static: true,\n                                                    accessibility: None,\n                                                    is_abstract: false,\n                                                    is_optional: false,\n                                                    is_override: false,\n                                                },\n                                            ),\n                                        ],\n                                        super_class: None,\n                                        is_abstract: false,\n                                        type_params: None,\n                                        super_type_params: None,\n                                        implements: [],\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1253,\n                    ),\n                    hi: BytePos(\n                        1255,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1203,\n        ),\n        hi: BytePos(\n            1266,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1203,\n                ),\n                hi: BytePos(\n                    1261,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1205,\n                            ),\n                            hi: BytePos(\n                                1229,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1205,\n                                ),\n                                hi: BytePos(\n                                    1210,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('cover' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Paren(\n                                ParenExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1213,\n                                        ),\n                                        hi: BytePos(\n                                            1229,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Fn(\n                                        FnExpr {\n                                            ident: None,\n                                            function: Function {\n                                                params: [],\n                                                decorators: [],\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1214,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1228,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                body: Some(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1226,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1228,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [],\n                                                    },\n                                                ),\n                                                is_generator: false,\n                                                is_async: false,\n                                                type_params: None,\n                                                return_type: None,\n                                            },\n                                        },\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1231,\n                            ),\n                            hi: BytePos(\n                                1258,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1231,\n                                ),\n                                hi: BytePos(\n                                    1237,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xCover' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Paren(\n                                ParenExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1240,\n                                        ),\n                                        hi: BytePos(\n                                            1258,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    expr: Seq(\n                                        SeqExpr {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1241,\n                                                ),\n                                                hi: BytePos(\n                                                    1257,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            exprs: [\n                                                Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1241,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1242,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 0.0,\n                                                            raw: Some(\n                                                                \"0\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                Fn(\n                                                    FnExpr {\n                                                        ident: None,\n                                                        function: Function {\n                                                            params: [],\n                                                            decorators: [],\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1244,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1257,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            body: Some(\n                                                                BlockStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1255,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1257,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    stmts: [],\n                                                                },\n                                                            ),\n                                                            is_generator: false,\n                                                            is_async: false,\n                                                            type_params: None,\n                                                            return_type: None,\n                                                        },\n                                                    },\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1264,\n                    ),\n                    hi: BytePos(\n                        1266,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-fn.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1174,\n        ),\n        hi: BytePos(\n            1225,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1174,\n                ),\n                hi: BytePos(\n                    1220,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1176,\n                            ),\n                            hi: BytePos(\n                                1195,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1176,\n                                ),\n                                hi: BytePos(\n                                    1178,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('fn' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1181,\n                                            ),\n                                            hi: BytePos(\n                                                1195,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1193,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1195,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1197,\n                            ),\n                            hi: BytePos(\n                                1218,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1197,\n                                ),\n                                hi: BytePos(\n                                    1200,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xFn' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Fn(\n                                FnExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1212,\n                                                ),\n                                                hi: BytePos(\n                                                    1213,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1203,\n                                            ),\n                                            hi: BytePos(\n                                                1218,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1216,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1218,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: false,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1223,\n                    ),\n                    hi: BytePos(\n                        1225,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-gen.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1198,\n        ),\n        hi: BytePos(\n            1253,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1198,\n                ),\n                hi: BytePos(\n                    1248,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1200,\n                            ),\n                            hi: BytePos(\n                                1221,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1200,\n                                ),\n                                hi: BytePos(\n                                    1203,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('gen' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Fn(\n                                FnExpr {\n                                    ident: None,\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1206,\n                                            ),\n                                            hi: BytePos(\n                                                1221,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1219,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1221,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: true,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1223,\n                            ),\n                            hi: BytePos(\n                                1246,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1223,\n                                ),\n                                hi: BytePos(\n                                    1227,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('xGen' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Fn(\n                                FnExpr {\n                                    ident: Some(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1240,\n                                                ),\n                                                hi: BytePos(\n                                                    1241,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                    ),\n                                    function: Function {\n                                        params: [],\n                                        decorators: [],\n                                        span: Span {\n                                            lo: BytePos(\n                                                1230,\n                                            ),\n                                            hi: BytePos(\n                                                1246,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        body: Some(\n                                            BlockStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1244,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1246,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                stmts: [],\n                                            },\n                                        ),\n                                        is_generator: true,\n                                        is_async: false,\n                                        type_params: None,\n                                        return_type: None,\n                                    },\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1251,\n                    ),\n                    hi: BytePos(\n                        1253,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            980,\n        ),\n        hi: BytePos(\n            1079,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    980,\n                ),\n                hi: BytePos(\n                    1042,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                982,\n                            ),\n                            hi: BytePos(\n                                995,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    982,\n                                ),\n                                hi: BytePos(\n                                    983,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('w' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            986,\n                                        ),\n                                        hi: BytePos(\n                                            995,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        986,\n                                                    ),\n                                                    hi: BytePos(\n                                                        993,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                997,\n                            ),\n                            hi: BytePos(\n                                1010,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    997,\n                                ),\n                                hi: BytePos(\n                                    998,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1001,\n                                        ),\n                                        hi: BytePos(\n                                            1010,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1001,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1008,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1012,\n                            ),\n                            hi: BytePos(\n                                1025,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1012,\n                                ),\n                                hi: BytePos(\n                                    1013,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('y' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1016,\n                                        ),\n                                        hi: BytePos(\n                                            1025,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1016,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1023,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1027,\n                            ),\n                            hi: BytePos(\n                                1040,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1027,\n                                ),\n                                hi: BytePos(\n                                    1028,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('z' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1031,\n                                        ),\n                                        hi: BytePos(\n                                            1040,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1031,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1038,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('counter' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1045,\n                    ),\n                    hi: BytePos(\n                        1079,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1047,\n                                            ),\n                                            hi: BytePos(\n                                                1048,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1050,\n                                                ),\n                                                hi: BytePos(\n                                                    1054,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1056,\n                                            ),\n                                            hi: BytePos(\n                                                1057,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1059,\n                                                ),\n                                                hi: BytePos(\n                                                    1060,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 0.0,\n                                            raw: Some(\n                                                \"0\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1062,\n                                            ),\n                                            hi: BytePos(\n                                                1063,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Bool(\n                                        Bool {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1065,\n                                                ),\n                                                hi: BytePos(\n                                                    1070,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: false,\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1072,\n                                            ),\n                                            hi: BytePos(\n                                                1073,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('z' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Str(\n                                        Str {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1075,\n                                                ),\n                                                hi: BytePos(\n                                                    1077,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: Atom('' type=static),\n                                            raw: Some(\n                                                \"''\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1101,\n        ),\n        hi: BytePos(\n            1123,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1101,\n                ),\n                hi: BytePos(\n                    1118,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1103,\n                            ),\n                            hi: BytePos(\n                                1116,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1103,\n                                ),\n                                hi: BytePos(\n                                    1104,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1107,\n                                        ),\n                                        hi: BytePos(\n                                            1116,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1107,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1114,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('thrower' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1121,\n                    ),\n                    hi: BytePos(\n                        1123,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1269,\n        ),\n        hi: BytePos(\n            1303,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1269,\n                ),\n                hi: BytePos(\n                    1298,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1271,\n                            ),\n                            hi: BytePos(\n                                1296,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1271,\n                                ),\n                                hi: BytePos(\n                                    1272,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        value: Some(\n                            Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1275,\n                                        ),\n                                        hi: BytePos(\n                                            1296,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('unresolvableReference' type=dynamic),\n                                    optional: false,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1301,\n                    ),\n                    hi: BytePos(\n                        1303,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-id-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            867,\n        ),\n        hi: BytePos(\n            885,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    867,\n                ),\n                hi: BytePos(\n                    873,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                869,\n                            ),\n                            hi: BytePos(\n                                870,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    869,\n                                ),\n                                hi: BytePos(\n                                    870,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('x' type=static),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        876,\n                    ),\n                    hi: BytePos(\n                        885,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                878,\n                                            ),\n                                            hi: BytePos(\n                                                879,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    881,\n                                                ),\n                                                hi: BytePos(\n                                                    883,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-list-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1106,\n        ),\n        hi: BytePos(\n            1148,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1106,\n                ),\n                hi: BytePos(\n                    1143,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1108,\n                            ),\n                            hi: BytePos(\n                                1109,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1108,\n                                ),\n                                hi: BytePos(\n                                    1109,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('a' type=static),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1111,\n                            ),\n                            hi: BytePos(\n                                1124,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1111,\n                                ),\n                                hi: BytePos(\n                                    1112,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('b' type=static),\n                            optional: false,\n                        },\n                        value: Some(\n                            Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1115,\n                                        ),\n                                        hi: BytePos(\n                                            1124,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1115,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1122,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('thrower' type=inline),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [],\n                                    type_args: None,\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                1126,\n                            ),\n                            hi: BytePos(\n                                1141,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    1126,\n                                ),\n                                hi: BytePos(\n                                    1127,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('c' type=inline),\n                            optional: false,\n                        },\n                        value: Some(\n                            Update(\n                                UpdateExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            1130,\n                                        ),\n                                        hi: BytePos(\n                                            1141,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    op: \"++\",\n                                    prefix: true,\n                                    arg: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1132,\n                                                ),\n                                                hi: BytePos(\n                                                    1141,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('initCount' type=dynamic),\n                                            optional: false,\n                                        },\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1146,\n                    ),\n                    hi: BytePos(\n                        1148,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-ary-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1108,\n        ),\n        hi: BytePos(\n            1141,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1108,\n                ),\n                hi: BytePos(\n                    1136,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1110,\n                                    ),\n                                    hi: BytePos(\n                                        1111,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1113,\n                                    ),\n                                    hi: BytePos(\n                                        1134,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1113,\n                                            ),\n                                            hi: BytePos(\n                                                1122,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1114,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1115,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1117,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1118,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1120,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1121,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1125,\n                                            ),\n                                            hi: BytePos(\n                                                1134,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1126,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1127,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1129,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1130,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1132,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1133,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1139,\n                    ),\n                    hi: BytePos(\n                        1141,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-ary-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            873,\n        ),\n        hi: BytePos(\n            898,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    873,\n                ),\n                hi: BytePos(\n                    884,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        875,\n                                    ),\n                                    hi: BytePos(\n                                        876,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Array(\n                            ArrayPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        878,\n                                    ),\n                                    hi: BytePos(\n                                        881,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                elems: [\n                                    Some(\n                                        Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            879,\n                                                        ),\n                                                        hi: BytePos(\n                                                            880,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('y' type=inline),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                    ),\n                                ],\n                                optional: false,\n                                type_ann: None,\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        887,\n                    ),\n                    hi: BytePos(\n                        898,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                889,\n                                            ),\n                                            hi: BytePos(\n                                                890,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                892,\n                                            ),\n                                            hi: BytePos(\n                                                896,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        893,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        895,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 45.0,\n                                                                raw: Some(\n                                                                    \"45\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-ary-value-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1031,\n        ),\n        hi: BytePos(\n            1073,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1031,\n                ),\n                hi: BytePos(\n                    1059,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1033,\n                                    ),\n                                    hi: BytePos(\n                                        1034,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1036,\n                                    ),\n                                    hi: BytePos(\n                                        1057,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1036,\n                                            ),\n                                            hi: BytePos(\n                                                1045,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1037,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1038,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1040,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1041,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1043,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1044,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1048,\n                                            ),\n                                            hi: BytePos(\n                                                1057,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1049,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1050,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1052,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1053,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1055,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1056,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1062,\n                    ),\n                    hi: BytePos(\n                        1073,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1064,\n                                            ),\n                                            hi: BytePos(\n                                                1065,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1067,\n                                                ),\n                                                hi: BytePos(\n                                                    1071,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-ary.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            980,\n        ),\n        hi: BytePos(\n            1034,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    980,\n                ),\n                hi: BytePos(\n                    1008,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        982,\n                                    ),\n                                    hi: BytePos(\n                                        983,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        985,\n                                    ),\n                                    hi: BytePos(\n                                        1006,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Array(\n                                    ArrayPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                985,\n                                            ),\n                                            hi: BytePos(\n                                                994,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    986,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    987,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    989,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    990,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('y' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                            Some(\n                                                Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    992,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    993,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('z' type=inline),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                997,\n                                            ),\n                                            hi: BytePos(\n                                                1006,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        998,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        999,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 4.0,\n                                                                raw: Some(\n                                                                    \"4\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1001,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1002,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 5.0,\n                                                                raw: Some(\n                                                                    \"5\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1004,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1005,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 6.0,\n                                                                raw: Some(\n                                                                    \"6\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1011,\n                    ),\n                    hi: BytePos(\n                        1034,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1013,\n                                            ),\n                                            hi: BytePos(\n                                                1014,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Array(\n                                    ArrayLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1016,\n                                            ),\n                                            hi: BytePos(\n                                                1032,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        elems: [\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Lit(\n                                                        Num(\n                                                            Number {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1017,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1018,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: 7.0,\n                                                                raw: Some(\n                                                                    \"7\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                            Some(\n                                                ExprOrSpread {\n                                                    spread: None,\n                                                    expr: Ident(\n                                                        Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    1020,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    1029,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('undefined' type=static),\n                                                            optional: false,\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-eval-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            973,\n        ),\n        hi: BytePos(\n            996,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    973,\n                ),\n                hi: BytePos(\n                    991,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Computed(\n                            ComputedPropName {\n                                span: Span {\n                                    lo: BytePos(\n                                        975,\n                                    ),\n                                    hi: BytePos(\n                                        986,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                expr: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                976,\n                                            ),\n                                            hi: BytePos(\n                                                985,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            976,\n                                                        ),\n                                                        hi: BytePos(\n                                                            983,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('thrower' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                        value: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            988,\n                                        ),\n                                        hi: BytePos(\n                                            989,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        994,\n                    ),\n                    hi: BytePos(\n                        996,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-id-get-value-err.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1085,\n        ),\n        hi: BytePos(\n            1137,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1085,\n                ),\n                hi: BytePos(\n                    1118,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1087,\n                                    ),\n                                    hi: BytePos(\n                                        1095,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('poisoned' type=dynamic),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1097,\n                                    ),\n                                    hi: BytePos(\n                                        1116,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1097,\n                                                ),\n                                                hi: BytePos(\n                                                    1098,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Update(\n                                    UpdateExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1101,\n                                            ),\n                                            hi: BytePos(\n                                                1116,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        op: \"++\",\n                                        prefix: true,\n                                        arg: Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        1103,\n                                                    ),\n                                                    hi: BytePos(\n                                                        1116,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('initEvalCount' type=dynamic),\n                                                optional: false,\n                                            },\n                                        ),\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        1121,\n                    ),\n                    hi: BytePos(\n                        1137,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('poisonedProperty' type=dynamic),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-id-init-skipped.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            966,\n        ),\n        hi: BytePos(\n            1077,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    966,\n                ),\n                hi: BytePos(\n                    1040,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        968,\n                                    ),\n                                    hi: BytePos(\n                                        969,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('s' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        971,\n                                    ),\n                                    hi: BytePos(\n                                        984,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    971,\n                                                ),\n                                                hi: BytePos(\n                                                    972,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('t' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                975,\n                                            ),\n                                            hi: BytePos(\n                                                984,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            975,\n                                                        ),\n                                                        hi: BytePos(\n                                                            982,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        986,\n                                    ),\n                                    hi: BytePos(\n                                        987,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('u' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        989,\n                                    ),\n                                    hi: BytePos(\n                                        1002,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    989,\n                                                ),\n                                                hi: BytePos(\n                                                    990,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('v' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                993,\n                                            ),\n                                            hi: BytePos(\n                                                1002,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            993,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1000,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1004,\n                                    ),\n                                    hi: BytePos(\n                                        1005,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1007,\n                                    ),\n                                    hi: BytePos(\n                                        1020,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1007,\n                                                ),\n                                                hi: BytePos(\n                                                    1008,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('x' type=static),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1011,\n                                            ),\n                                            hi: BytePos(\n                                                1020,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1011,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1018,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1022,\n                                    ),\n                                    hi: BytePos(\n                                        1023,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('y' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1025,\n                                    ),\n                                    hi: BytePos(\n                                        1038,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1025,\n                                                ),\n                                                hi: BytePos(\n                                                    1026,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('z' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1029,\n                                            ),\n                                            hi: BytePos(\n                                                1038,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1029,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1036,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('counter' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1043,\n                    ),\n                    hi: BytePos(\n                        1077,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1045,\n                                            ),\n                                            hi: BytePos(\n                                                1046,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('s' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1048,\n                                                ),\n                                                hi: BytePos(\n                                                    1052,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1054,\n                                            ),\n                                            hi: BytePos(\n                                                1055,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('u' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1057,\n                                                ),\n                                                hi: BytePos(\n                                                    1058,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 0.0,\n                                            raw: Some(\n                                                \"0\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1060,\n                                            ),\n                                            hi: BytePos(\n                                                1061,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Bool(\n                                        Bool {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1063,\n                                                ),\n                                                hi: BytePos(\n                                                    1068,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: false,\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1070,\n                                            ),\n                                            hi: BytePos(\n                                                1071,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Str(\n                                        Str {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1073,\n                                                ),\n                                                hi: BytePos(\n                                                    1075,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: Atom('' type=static),\n                                            raw: Some(\n                                                \"''\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-id-init-throws.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1099,\n        ),\n        hi: BytePos(\n            1124,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1099,\n                ),\n                hi: BytePos(\n                    1119,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1101,\n                                    ),\n                                    hi: BytePos(\n                                        1102,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1104,\n                                    ),\n                                    hi: BytePos(\n                                        1117,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1104,\n                                                ),\n                                                hi: BytePos(\n                                                    1105,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('y' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Call(\n                                    CallExpr {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1108,\n                                            ),\n                                            hi: BytePos(\n                                                1117,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        callee: Expr(\n                                            Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1108,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1115,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('thrower' type=inline),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        ),\n                                        args: [],\n                                        type_args: None,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1122,\n                    ),\n                    hi: BytePos(\n                        1124,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-id-init-unresolvable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1268,\n        ),\n        hi: BytePos(\n            1305,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1268,\n                ),\n                hi: BytePos(\n                    1300,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1270,\n                                    ),\n                                    hi: BytePos(\n                                        1271,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1273,\n                                    ),\n                                    hi: BytePos(\n                                        1298,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1273,\n                                                ),\n                                                hi: BytePos(\n                                                    1274,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('y' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1277,\n                                            ),\n                                            hi: BytePos(\n                                                1298,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('unresolvableReference' type=dynamic),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1303,\n                    ),\n                    hi: BytePos(\n                        1305,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-id-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            882,\n        ),\n        hi: BytePos(\n            901,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    882,\n                ),\n                hi: BytePos(\n                    895,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        884,\n                                    ),\n                                    hi: BytePos(\n                                        885,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        887,\n                                    ),\n                                    hi: BytePos(\n                                        893,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Ident(\n                                    BindingIdent {\n                                        id: Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    887,\n                                                ),\n                                                hi: BytePos(\n                                                    888,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('y' type=inline),\n                                            optional: false,\n                                        },\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    891,\n                                                ),\n                                                hi: BytePos(\n                                                    893,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 33.0,\n                                            raw: Some(\n                                                \"33\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        898,\n                    ),\n                    hi: BytePos(\n                        901,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-id-trailing-comma.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            872,\n        ),\n        hi: BytePos(\n            893,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    872,\n                ),\n                hi: BytePos(\n                    881,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        874,\n                                    ),\n                                    hi: BytePos(\n                                        875,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            877,\n                                        ),\n                                        hi: BytePos(\n                                            878,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        884,\n                    ),\n                    hi: BytePos(\n                        893,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                886,\n                                            ),\n                                            hi: BytePos(\n                                                887,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    889,\n                                                ),\n                                                hi: BytePos(\n                                                    891,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-id.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            863,\n        ),\n        hi: BytePos(\n            883,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    863,\n                ),\n                hi: BytePos(\n                    871,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        865,\n                                    ),\n                                    hi: BytePos(\n                                        866,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('x' type=static),\n                                optional: false,\n                            },\n                        ),\n                        value: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            868,\n                                        ),\n                                        hi: BytePos(\n                                            869,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('y' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        874,\n                    ),\n                    hi: BytePos(\n                        883,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                876,\n                                            ),\n                                            hi: BytePos(\n                                                877,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    879,\n                                                ),\n                                                hi: BytePos(\n                                                    881,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 23.0,\n                                            raw: Some(\n                                                \"23\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-obj-init.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1109,\n        ),\n        hi: BytePos(\n            1169,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1109,\n                ),\n                hi: BytePos(\n                    1150,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1111,\n                                    ),\n                                    hi: BytePos(\n                                        1112,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1114,\n                                    ),\n                                    hi: BytePos(\n                                        1148,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1114,\n                                            ),\n                                            hi: BytePos(\n                                                1125,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1116,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1117,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1116,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1117,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1119,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1120,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1119,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1120,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1122,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1123,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1122,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1123,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1128,\n                                            ),\n                                            hi: BytePos(\n                                                1148,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1130,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1131,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1133,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1134,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1136,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1137,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1139,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1140,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1142,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1143,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1145,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1146,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1153,\n                    ),\n                    hi: BytePos(\n                        1169,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1155,\n                                            ),\n                                            hi: BytePos(\n                                                1156,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1158,\n                                            ),\n                                            hi: BytePos(\n                                                1167,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('undefined' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-obj-value-null.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1032,\n        ),\n        hi: BytePos(\n            1087,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1032,\n                ),\n                hi: BytePos(\n                    1073,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1034,\n                                    ),\n                                    hi: BytePos(\n                                        1035,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1037,\n                                    ),\n                                    hi: BytePos(\n                                        1071,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1037,\n                                            ),\n                                            hi: BytePos(\n                                                1048,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1039,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1040,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1039,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1040,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1042,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1043,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1042,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1043,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1045,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1046,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1045,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1046,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1051,\n                                            ),\n                                            hi: BytePos(\n                                                1071,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1053,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1054,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1056,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1057,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1059,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1060,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1062,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1063,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1065,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1066,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1068,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1069,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1076,\n                    ),\n                    hi: BytePos(\n                        1087,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1078,\n                                            ),\n                                            hi: BytePos(\n                                                1079,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Null(\n                                        Null {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    1081,\n                                                ),\n                                                hi: BytePos(\n                                                    1085,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-obj-value-undef.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            1033,\n        ),\n        hi: BytePos(\n            1069,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    1033,\n                ),\n                hi: BytePos(\n                    1063,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        1035,\n                                    ),\n                                    hi: BytePos(\n                                        1036,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        1038,\n                                    ),\n                                    hi: BytePos(\n                                        1061,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1038,\n                                            ),\n                                            hi: BytePos(\n                                                1049,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1040,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1041,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1040,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1041,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1043,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1044,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1043,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1044,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            1046,\n                                                        ),\n                                                        hi: BytePos(\n                                                            1047,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                1046,\n                                                            ),\n                                                            hi: BytePos(\n                                                                1047,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1052,\n                                            ),\n                                            hi: BytePos(\n                                                1061,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('undefined' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1066,\n                    ),\n                    hi: BytePos(\n                        1069,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-prop-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            981,\n        ),\n        hi: BytePos(\n            1054,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    981,\n                ),\n                hi: BytePos(\n                    1022,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                KeyValue(\n                    KeyValuePatProp {\n                        key: Ident(\n                            Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        983,\n                                    ),\n                                    hi: BytePos(\n                                        984,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('w' type=inline),\n                                optional: false,\n                            },\n                        ),\n                        value: Assign(\n                            AssignPat {\n                                span: Span {\n                                    lo: BytePos(\n                                        986,\n                                    ),\n                                    hi: BytePos(\n                                        1020,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                left: Object(\n                                    ObjectPat {\n                                        span: Span {\n                                            lo: BytePos(\n                                                986,\n                                            ),\n                                            hi: BytePos(\n                                                997,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            988,\n                                                        ),\n                                                        hi: BytePos(\n                                                            989,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                988,\n                                                            ),\n                                                            hi: BytePos(\n                                                                989,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('x' type=static),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            991,\n                                                        ),\n                                                        hi: BytePos(\n                                                            992,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                991,\n                                                            ),\n                                                            hi: BytePos(\n                                                                992,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('y' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                            Assign(\n                                                AssignPatProp {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            994,\n                                                        ),\n                                                        hi: BytePos(\n                                                            995,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    key: Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                994,\n                                                            ),\n                                                            hi: BytePos(\n                                                                995,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('z' type=inline),\n                                                        optional: false,\n                                                    },\n                                                    value: None,\n                                                },\n                                            ),\n                                        ],\n                                        optional: false,\n                                        type_ann: None,\n                                    },\n                                ),\n                                right: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1000,\n                                            ),\n                                            hi: BytePos(\n                                                1020,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1002,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1003,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1005,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1006,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 4.0,\n                                                                    raw: Some(\n                                                                        \"4\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1008,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1009,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('y' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1011,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1012,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 5.0,\n                                                                    raw: Some(\n                                                                        \"5\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1014,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1015,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1017,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1018,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 6.0,\n                                                                    raw: Some(\n                                                                        \"6\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        1025,\n                    ),\n                    hi: BytePos(\n                        1054,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1027,\n                                            ),\n                                            hi: BytePos(\n                                                1028,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('w' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Object(\n                                    ObjectLit {\n                                        span: Span {\n                                            lo: BytePos(\n                                                1030,\n                                            ),\n                                            hi: BytePos(\n                                                1052,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        props: [\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1032,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1033,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1035,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1044,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('undefined' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            Prop(\n                                                KeyValue(\n                                                    KeyValueProp {\n                                                        key: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        1046,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        1047,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('z' type=inline),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        value: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            1049,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            1050,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 7.0,\n                                                                    raw: Some(\n                                                                        \"7\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-rest-getter.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            757,\n        ),\n        hi: BytePos(\n            800,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    757,\n                ),\n                hi: BytePos(\n                    763,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                758,\n                            ),\n                            hi: BytePos(\n                                762,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                758,\n                            ),\n                            hi: BytePos(\n                                761,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            761,\n                                        ),\n                                        hi: BytePos(\n                                            762,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('x' type=static),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        766,\n                    ),\n                    hi: BytePos(\n                        800,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        Getter(\n                            GetterProp {\n                                span: Span {\n                                    lo: BytePos(\n                                        768,\n                                    ),\n                                    hi: BytePos(\n                                        798,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                772,\n                                            ),\n                                            hi: BytePos(\n                                                773,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('v' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                type_ann: None,\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                776,\n                                            ),\n                                            hi: BytePos(\n                                                798,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [\n                                            Expr(\n                                                ExprStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            778,\n                                                        ),\n                                                        hi: BytePos(\n                                                            786,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    expr: Update(\n                                                        UpdateExpr {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    778,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    785,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            op: \"++\",\n                                                            prefix: false,\n                                                            arg: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            778,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            783,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('count' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                        },\n                                                    ),\n                                                },\n                                            ),\n                                            Return(\n                                                ReturnStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            787,\n                                                        ),\n                                                        hi: BytePos(\n                                                            796,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    arg: Some(\n                                                        Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            794,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            795,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 2.0,\n                                                                    raw: Some(\n                                                                        \"2\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    ),\n                                                },\n                                            ),\n                                        ],\n                                    },\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-rest-skip-non-enumerable.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            829,\n        ),\n        hi: BytePos(\n            842,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    829,\n                ),\n                hi: BytePos(\n                    838,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                830,\n                            ),\n                            hi: BytePos(\n                                837,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                830,\n                            ),\n                            hi: BytePos(\n                                833,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            833,\n                                        ),\n                                        hi: BytePos(\n                                            837,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('rest' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Ident(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        841,\n                    ),\n                    hi: BytePos(\n                        842,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('o' type=inline),\n                optional: false,\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/dstr/obj-ptrn-rest-val-obj.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: VarDeclarator {\n    span: Span {\n        lo: BytePos(\n            720,\n        ),\n        hi: BytePos(\n            762,\n        ),\n        ctxt: #0,\n    },\n    name: Object(\n        ObjectPat {\n            span: Span {\n                lo: BytePos(\n                    720,\n                ),\n                hi: BytePos(\n                    735,\n                ),\n                ctxt: #0,\n            },\n            props: [\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                721,\n                            ),\n                            hi: BytePos(\n                                722,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    721,\n                                ),\n                                hi: BytePos(\n                                    722,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('a' type=static),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n                Assign(\n                    AssignPatProp {\n                        span: Span {\n                            lo: BytePos(\n                                724,\n                            ),\n                            hi: BytePos(\n                                725,\n                            ),\n                            ctxt: #0,\n                        },\n                        key: Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    724,\n                                ),\n                                hi: BytePos(\n                                    725,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('b' type=static),\n                            optional: false,\n                        },\n                        value: None,\n                    },\n                ),\n                Rest(\n                    RestPat {\n                        span: Span {\n                            lo: BytePos(\n                                727,\n                            ),\n                            hi: BytePos(\n                                734,\n                            ),\n                            ctxt: #0,\n                        },\n                        dot3_token: Span {\n                            lo: BytePos(\n                                727,\n                            ),\n                            hi: BytePos(\n                                730,\n                            ),\n                            ctxt: #0,\n                        },\n                        arg: Ident(\n                            BindingIdent {\n                                id: Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            730,\n                                        ),\n                                        hi: BytePos(\n                                            734,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('rest' type=inline),\n                                    optional: false,\n                                },\n                                type_ann: None,\n                            },\n                        ),\n                        type_ann: None,\n                    },\n                ),\n            ],\n            optional: false,\n            type_ann: None,\n        },\n    ),\n    init: Some(\n        Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        738,\n                    ),\n                    hi: BytePos(\n                        762,\n                    ),\n                    ctxt: #0,\n                },\n                props: [\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                739,\n                                            ),\n                                            hi: BytePos(\n                                                740,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('x' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    742,\n                                                ),\n                                                hi: BytePos(\n                                                    743,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 1.0,\n                                            raw: Some(\n                                                \"1\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                745,\n                                            ),\n                                            hi: BytePos(\n                                                746,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('y' type=inline),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    748,\n                                                ),\n                                                hi: BytePos(\n                                                    749,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 2.0,\n                                            raw: Some(\n                                                \"2\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                751,\n                                            ),\n                                            hi: BytePos(\n                                                752,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('a' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    754,\n                                                ),\n                                                hi: BytePos(\n                                                    755,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 5.0,\n                                            raw: Some(\n                                                \"5\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                    Prop(\n                        KeyValue(\n                            KeyValueProp {\n                                key: Ident(\n                                    Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                757,\n                                            ),\n                                            hi: BytePos(\n                                                758,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('b' type=static),\n                                        optional: false,\n                                    },\n                                ),\n                                value: Lit(\n                                    Num(\n                                        Number {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    760,\n                                                ),\n                                                hi: BytePos(\n                                                    761,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            value: 3.0,\n                                            raw: Some(\n                                                \"3\",\n                                            ),\n                                        },\n                                    ),\n                                ),\n                            },\n                        ),\n                    ),\n                ],\n            },\n        ),\n    ),\n    definite: false,\n}"}}
{"file_path":"test/language/statements/variable/eval-non-strict.js","error":null}
{"file_path":"test/language/statements/variable/eval-strict-list-final-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/eval-strict-list-final.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/eval-strict-list-first-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/eval-strict-list-first.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/eval-strict-list-middle-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/eval-strict-list-middle.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/eval-strict-list-repeated.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/eval-strict-single-init.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/eval-strict-single.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/fn-name-arrow.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/fn-name-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Class(\n    ClassExpr {\n        ident: Some(\n            Ident {\n                span: Span {\n                    lo: BytePos(\n                        646,\n                    ),\n                    hi: BytePos(\n                        647,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('x' type=static),\n                optional: false,\n            },\n        ),\n        class: Class {\n            span: Span {\n                lo: BytePos(\n                    640,\n                ),\n                hi: BytePos(\n                    650,\n                ),\n                ctxt: #0,\n            },\n            decorators: [],\n            body: [],\n            super_class: None,\n            is_abstract: false,\n            type_params: None,\n            super_type_params: None,\n            implements: [],\n        },\n    },\n)"}}
{"file_path":"test/language/statements/variable/fn-name-cover.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                644,\n            ),\n            hi: BytePos(\n                660,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                644,\n                            ),\n                            hi: BytePos(\n                                645,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Fn(\n                FnExpr {\n                    ident: None,\n                    function: Function {\n                        params: [],\n                        decorators: [],\n                        span: Span {\n                            lo: BytePos(\n                                647,\n                            ),\n                            hi: BytePos(\n                                660,\n                            ),\n                            ctxt: #0,\n                        },\n                        body: Some(\n                            BlockStmt {\n                                span: Span {\n                                    lo: BytePos(\n                                        658,\n                                    ),\n                                    hi: BytePos(\n                                        660,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                stmts: [],\n                            },\n                        ),\n                        is_generator: false,\n                        is_async: false,\n                        type_params: None,\n                        return_type: None,\n                    },\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/statements/variable/fn-name-fn.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/fn-name-gen.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/variable/id-arguments-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/id-eval-strict.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/variable/static-init-await-binding-invalid.js","error":null}
{"file_path":"test/language/statements/variable/static-init-await-binding-valid.js","error":{"category":"load","message":"parse error\n  while parsing file: /home/sebastiano/src/test262/test/language/statements/variable/static-init-await-binding-valid.js"}}
{"file_path":"test/language/statements/while/S12.6.2_A1.js","error":null}
{"file_path":"test/language/statements/while/S12.6.2_A10.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/while/S12.6.2_A11.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/while/S12.6.2_A14_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/while/S12.6.2_A14_T2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/while/S12.6.2_A15.js","error":null}
{"file_path":"test/language/statements/while/S12.6.2_A2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/while/S12.6.2_A3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/S12.6.2_A4_T1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/statements/while/S12.6.2_A4_T2.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                342,\n            ),\n            hi: BytePos(\n                645,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    342,\n                ),\n                hi: BytePos(\n                    348,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('do_out' type=inline),\n            optional: false,\n        },\n        body: While(\n            WhileStmt {\n                span: Span {\n                    lo: BytePos(\n                        351,\n                    ),\n                    hi: BytePos(\n                        645,\n                    ),\n                    ctxt: #0,\n                },\n                test: Bin(\n                    BinExpr {\n                        span: Span {\n                            lo: BytePos(\n                                357,\n                            ),\n                            hi: BytePos(\n                                362,\n                            ),\n                            ctxt: #0,\n                        },\n                        op: \"===\",\n                        left: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            357,\n                                        ),\n                                        hi: BytePos(\n                                            358,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 1.0,\n                                    raw: Some(\n                                        \"1\",\n                                    ),\n                                },\n                            ),\n                        ),\n                        right: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            361,\n                                        ),\n                                        hi: BytePos(\n                                            362,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 1.0,\n                                    raw: Some(\n                                        \"1\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                body: Block(\n                    BlockStmt {\n                        span: Span {\n                            lo: BytePos(\n                                364,\n                            ),\n                            hi: BytePos(\n                                645,\n                            ),\n                            ctxt: #0,\n                        },\n                        stmts: [\n                            If(\n                                IfStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            370,\n                                        ),\n                                        hi: BytePos(\n                                            405,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    test: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    374,\n                                                ),\n                                                hi: BytePos(\n                                                    397,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('__in__do__before__break' type=dynamic),\n                                            optional: false,\n                                        },\n                                    ),\n                                    cons: Break(\n                                        BreakStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    399,\n                                                ),\n                                                hi: BytePos(\n                                                    405,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            label: None,\n                                        },\n                                    ),\n                                    alt: None,\n                                },\n                            ),\n                            Decl(\n                                Var(\n                                    VarDecl {\n                                        span: Span {\n                                            lo: BytePos(\n                                                410,\n                                            ),\n                                            hi: BytePos(\n                                                446,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        kind: \"var\",\n                                        declare: false,\n                                        decls: [\n                                            VarDeclarator {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        414,\n                                                    ),\n                                                    hi: BytePos(\n                                                        445,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                name: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    414,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    437,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('__in__do__before__break' type=dynamic),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                init: Some(\n                                                    Lit(\n                                                        Str(\n                                                            Str {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        438,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        445,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: Atom('black' type=static),\n                                                                raw: Some(\n                                                                    \"\\\"black\\\"\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                ),\n                                                definite: false,\n                                            },\n                                        ],\n                                    },\n                                ),\n                            ),\n                            Labeled(\n                                LabeledStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            451,\n                                        ),\n                                        hi: BytePos(\n                                            592,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    label: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                451,\n                                            ),\n                                            hi: BytePos(\n                                                456,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('do_in' type=inline),\n                                        optional: false,\n                                    },\n                                    body: While(\n                                        WhileStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    459,\n                                                ),\n                                                hi: BytePos(\n                                                    592,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            test: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                466,\n                                                            ),\n                                                            hi: BytePos(\n                                                                467,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 1.0,\n                                                        raw: Some(\n                                                            \"1\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            body: Block(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            469,\n                                                        ),\n                                                        hi: BytePos(\n                                                            592,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [\n                                                        Decl(\n                                                            Var(\n                                                                VarDecl {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            479,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            518,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    kind: \"var\",\n                                                                    declare: false,\n                                                                    decls: [\n                                                                        VarDeclarator {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    483,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    517,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            name: Ident(\n                                                                                BindingIdent {\n                                                                                    id: Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                483,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                510,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('__in__do__IN__before__break' type=dynamic),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                    type_ann: None,\n                                                                                },\n                                                                            ),\n                                                                            init: Some(\n                                                                                Lit(\n                                                                                    Str(\n                                                                                        Str {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    511,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    517,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: Atom('hole' type=inline),\n                                                                                            raw: Some(\n                                                                                                \"\\\"hole\\\"\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            ),\n                                                                            definite: false,\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ),\n                                                        ),\n                                                        Break(\n                                                            BreakStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        527,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        539,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                label: Some(\n                                                                    Ident {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                533,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                538,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        sym: Atom('do_in' type=inline),\n                                                                        optional: false,\n                                                                    },\n                                                                ),\n                                                            },\n                                                        ),\n                                                        Decl(\n                                                            Var(\n                                                                VarDecl {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            549,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            586,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    kind: \"var\",\n                                                                    declare: false,\n                                                                    decls: [\n                                                                        VarDeclarator {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    553,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    585,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            name: Ident(\n                                                                                BindingIdent {\n                                                                                    id: Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                553,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                579,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('__in__do__IN__after__break' type=dynamic),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                    type_ann: None,\n                                                                                },\n                                                                            ),\n                                                                            init: Some(\n                                                                                Lit(\n                                                                                    Str(\n                                                                                        Str {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    580,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    585,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: Atom('sun' type=inline),\n                                                                                            raw: Some(\n                                                                                                \"\\\"sun\\\"\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            ),\n                                                                            definite: false,\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ),\n                                                        ),\n                                                    ],\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                },\n                            ),\n                            Empty(\n                                EmptyStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            593,\n                                        ),\n                                        hi: BytePos(\n                                            594,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                },\n                            ),\n                            Decl(\n                                Var(\n                                    VarDecl {\n                                        span: Span {\n                                            lo: BytePos(\n                                                599,\n                                            ),\n                                            hi: BytePos(\n                                                643,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        kind: \"var\",\n                                        declare: false,\n                                        decls: [\n                                            VarDeclarator {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        603,\n                                                    ),\n                                                    hi: BytePos(\n                                                        642,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                name: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    603,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    625,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('__in__do__after__break' type=dynamic),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                init: Some(\n                                                    Lit(\n                                                        Str(\n                                                            Str {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        626,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        642,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: Atom('won't you come' type=dynamic),\n                                                                raw: Some(\n                                                                    \"\\\"won't you come\\\"\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                ),\n                                                definite: false,\n                                            },\n                                        ],\n                                    },\n                                ),\n                            ),\n                        ],\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/while/S12.6.2_A4_T3.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                342,\n            ),\n            hi: BytePos(\n                636,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    342,\n                ),\n                hi: BytePos(\n                    348,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('do_out' type=inline),\n            optional: false,\n        },\n        body: While(\n            WhileStmt {\n                span: Span {\n                    lo: BytePos(\n                        351,\n                    ),\n                    hi: BytePos(\n                        636,\n                    ),\n                    ctxt: #0,\n                },\n                test: Bin(\n                    BinExpr {\n                        span: Span {\n                            lo: BytePos(\n                                357,\n                            ),\n                            hi: BytePos(\n                                362,\n                            ),\n                            ctxt: #0,\n                        },\n                        op: \"===\",\n                        left: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            357,\n                                        ),\n                                        hi: BytePos(\n                                            358,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 1.0,\n                                    raw: Some(\n                                        \"1\",\n                                    ),\n                                },\n                            ),\n                        ),\n                        right: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            361,\n                                        ),\n                                        hi: BytePos(\n                                            362,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 1.0,\n                                    raw: Some(\n                                        \"1\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                body: Block(\n                    BlockStmt {\n                        span: Span {\n                            lo: BytePos(\n                                364,\n                            ),\n                            hi: BytePos(\n                                636,\n                            ),\n                            ctxt: #0,\n                        },\n                        stmts: [\n                            If(\n                                IfStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            370,\n                                        ),\n                                        hi: BytePos(\n                                            405,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    test: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    374,\n                                                ),\n                                                hi: BytePos(\n                                                    397,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('__in__do__before__break' type=dynamic),\n                                            optional: false,\n                                        },\n                                    ),\n                                    cons: Break(\n                                        BreakStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    399,\n                                                ),\n                                                hi: BytePos(\n                                                    405,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            label: None,\n                                        },\n                                    ),\n                                    alt: None,\n                                },\n                            ),\n                            Decl(\n                                Var(\n                                    VarDecl {\n                                        span: Span {\n                                            lo: BytePos(\n                                                410,\n                                            ),\n                                            hi: BytePos(\n                                                445,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        kind: \"var\",\n                                        declare: false,\n                                        decls: [\n                                            VarDeclarator {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        414,\n                                                    ),\n                                                    hi: BytePos(\n                                                        444,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                name: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    414,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    437,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('__in__do__before__break' type=dynamic),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                init: Some(\n                                                    Lit(\n                                                        Str(\n                                                            Str {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        438,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        444,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: Atom('once' type=inline),\n                                                                raw: Some(\n                                                                    \"\\\"once\\\"\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                ),\n                                                definite: false,\n                                            },\n                                        ],\n                                    },\n                                ),\n                            ),\n                            Labeled(\n                                LabeledStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            450,\n                                        ),\n                                        hi: BytePos(\n                                            589,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    label: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                450,\n                                            ),\n                                            hi: BytePos(\n                                                455,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('do_in' type=inline),\n                                        optional: false,\n                                    },\n                                    body: While(\n                                        WhileStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    458,\n                                                ),\n                                                hi: BytePos(\n                                                    589,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            test: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                465,\n                                                            ),\n                                                            hi: BytePos(\n                                                                466,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 1.0,\n                                                        raw: Some(\n                                                            \"1\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            body: Block(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            468,\n                                                        ),\n                                                        hi: BytePos(\n                                                            589,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [\n                                                        Decl(\n                                                            Var(\n                                                                VarDecl {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            478,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            515,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    kind: \"var\",\n                                                                    declare: false,\n                                                                    decls: [\n                                                                        VarDeclarator {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    482,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    514,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            name: Ident(\n                                                                                BindingIdent {\n                                                                                    id: Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                482,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                509,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('__in__do__IN__before__break' type=dynamic),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                    type_ann: None,\n                                                                                },\n                                                                            ),\n                                                                            init: Some(\n                                                                                Lit(\n                                                                                    Str(\n                                                                                        Str {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    510,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    514,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: Atom('in' type=static),\n                                                                                            raw: Some(\n                                                                                                \"\\\"in\\\"\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            ),\n                                                                            definite: false,\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ),\n                                                        ),\n                                                        Break(\n                                                            BreakStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        524,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        537,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                label: Some(\n                                                                    Ident {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                530,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                536,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        sym: Atom('do_out' type=inline),\n                                                                        optional: false,\n                                                                    },\n                                                                ),\n                                                            },\n                                                        ),\n                                                        Decl(\n                                                            Var(\n                                                                VarDecl {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            546,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            583,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    kind: \"var\",\n                                                                    declare: false,\n                                                                    decls: [\n                                                                        VarDeclarator {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    550,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    582,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            name: Ident(\n                                                                                BindingIdent {\n                                                                                    id: Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                550,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                576,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('__in__do__IN__after__break' type=dynamic),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                    type_ann: None,\n                                                                                },\n                                                                            ),\n                                                                            init: Some(\n                                                                                Lit(\n                                                                                    Str(\n                                                                                        Str {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    577,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    582,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: Atom('the' type=inline),\n                                                                                            raw: Some(\n                                                                                                \"\\\"the\\\"\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            ),\n                                                                            definite: false,\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ),\n                                                        ),\n                                                    ],\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                },\n                            ),\n                            Empty(\n                                EmptyStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            590,\n                                        ),\n                                        hi: BytePos(\n                                            591,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                },\n                            ),\n                            Decl(\n                                Var(\n                                    VarDecl {\n                                        span: Span {\n                                            lo: BytePos(\n                                                596,\n                                            ),\n                                            hi: BytePos(\n                                                634,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        kind: \"var\",\n                                        declare: false,\n                                        decls: [\n                                            VarDeclarator {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        600,\n                                                    ),\n                                                    hi: BytePos(\n                                                        633,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                name: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    600,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    622,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('__in__do__after__break' type=dynamic),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                init: Some(\n                                                    Lit(\n                                                        Str(\n                                                            Str {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        623,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        633,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: Atom('lifetime' type=dynamic),\n                                                                raw: Some(\n                                                                    \"\\\"lifetime\\\"\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                ),\n                                                definite: false,\n                                            },\n                                        ],\n                                    },\n                                ),\n                            ),\n                        ],\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/while/S12.6.2_A4_T4.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                342,\n            ),\n            hi: BytePos(\n                632,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    342,\n                ),\n                hi: BytePos(\n                    348,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('do_out' type=inline),\n            optional: false,\n        },\n        body: While(\n            WhileStmt {\n                span: Span {\n                    lo: BytePos(\n                        351,\n                    ),\n                    hi: BytePos(\n                        632,\n                    ),\n                    ctxt: #0,\n                },\n                test: Bin(\n                    BinExpr {\n                        span: Span {\n                            lo: BytePos(\n                                357,\n                            ),\n                            hi: BytePos(\n                                362,\n                            ),\n                            ctxt: #0,\n                        },\n                        op: \"===\",\n                        left: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            357,\n                                        ),\n                                        hi: BytePos(\n                                            358,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 1.0,\n                                    raw: Some(\n                                        \"1\",\n                                    ),\n                                },\n                            ),\n                        ),\n                        right: Lit(\n                            Num(\n                                Number {\n                                    span: Span {\n                                        lo: BytePos(\n                                            361,\n                                        ),\n                                        hi: BytePos(\n                                            362,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    value: 1.0,\n                                    raw: Some(\n                                        \"1\",\n                                    ),\n                                },\n                            ),\n                        ),\n                    },\n                ),\n                body: Block(\n                    BlockStmt {\n                        span: Span {\n                            lo: BytePos(\n                                364,\n                            ),\n                            hi: BytePos(\n                                632,\n                            ),\n                            ctxt: #0,\n                        },\n                        stmts: [\n                            If(\n                                IfStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            370,\n                                        ),\n                                        hi: BytePos(\n                                            403,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    test: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    373,\n                                                ),\n                                                hi: BytePos(\n                                                    396,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('__in__do__before__break' type=dynamic),\n                                            optional: false,\n                                        },\n                                    ),\n                                    cons: Break(\n                                        BreakStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    397,\n                                                ),\n                                                hi: BytePos(\n                                                    403,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            label: None,\n                                        },\n                                    ),\n                                    alt: None,\n                                },\n                            ),\n                            Decl(\n                                Var(\n                                    VarDecl {\n                                        span: Span {\n                                            lo: BytePos(\n                                                408,\n                                            ),\n                                            hi: BytePos(\n                                                444,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        kind: \"var\",\n                                        declare: false,\n                                        decls: [\n                                            VarDeclarator {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        412,\n                                                    ),\n                                                    hi: BytePos(\n                                                        443,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                name: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    412,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    435,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('__in__do__before__break' type=dynamic),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                init: Some(\n                                                    Lit(\n                                                        Str(\n                                                            Str {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        436,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        443,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: Atom('can't' type=inline),\n                                                                raw: Some(\n                                                                    \"\\\"can't\\\"\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                ),\n                                                definite: false,\n                                            },\n                                        ],\n                                    },\n                                ),\n                            ),\n                            Labeled(\n                                LabeledStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            449,\n                                        ),\n                                        hi: BytePos(\n                                            581,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    label: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                449,\n                                            ),\n                                            hi: BytePos(\n                                                454,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('do_in' type=inline),\n                                        optional: false,\n                                    },\n                                    body: While(\n                                        WhileStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    457,\n                                                ),\n                                                hi: BytePos(\n                                                    581,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            test: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                464,\n                                                            ),\n                                                            hi: BytePos(\n                                                                465,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 1.0,\n                                                        raw: Some(\n                                                            \"1\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                            body: Block(\n                                                BlockStmt {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            467,\n                                                        ),\n                                                        hi: BytePos(\n                                                            581,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    stmts: [\n                                                        Decl(\n                                                            Var(\n                                                                VarDecl {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            477,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            515,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    kind: \"var\",\n                                                                    declare: false,\n                                                                    decls: [\n                                                                        VarDeclarator {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    481,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    514,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            name: Ident(\n                                                                                BindingIdent {\n                                                                                    id: Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                481,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                508,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('__in__do__IN__before__break' type=dynamic),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                    type_ann: None,\n                                                                                },\n                                                                            ),\n                                                                            init: Some(\n                                                                                Lit(\n                                                                                    Str(\n                                                                                        Str {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    509,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    514,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: Atom('get' type=static),\n                                                                                            raw: Some(\n                                                                                                \"\\\"get\\\"\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            ),\n                                                                            definite: false,\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ),\n                                                        ),\n                                                        Break(\n                                                            BreakStmt {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        524,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        530,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                label: None,\n                                                            },\n                                                        ),\n                                                        Decl(\n                                                            Var(\n                                                                VarDecl {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            539,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            575,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    kind: \"var\",\n                                                                    declare: false,\n                                                                    decls: [\n                                                                        VarDeclarator {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    543,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    574,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            name: Ident(\n                                                                                BindingIdent {\n                                                                                    id: Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                543,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                569,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('__in__do__IN__after__break' type=dynamic),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                    type_ann: None,\n                                                                                },\n                                                                            ),\n                                                                            init: Some(\n                                                                                Lit(\n                                                                                    Str(\n                                                                                        Str {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    570,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    574,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: Atom('no' type=inline),\n                                                                                            raw: Some(\n                                                                                                \"\\\"no\\\"\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                            ),\n                                                                            definite: false,\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ),\n                                                        ),\n                                                    ],\n                                                },\n                                            ),\n                                        },\n                                    ),\n                                },\n                            ),\n                            Empty(\n                                EmptyStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            582,\n                                        ),\n                                        hi: BytePos(\n                                            583,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                },\n                            ),\n                            Decl(\n                                Var(\n                                    VarDecl {\n                                        span: Span {\n                                            lo: BytePos(\n                                                588,\n                                            ),\n                                            hi: BytePos(\n                                                630,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        kind: \"var\",\n                                        declare: false,\n                                        decls: [\n                                            VarDeclarator {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        592,\n                                                    ),\n                                                    hi: BytePos(\n                                                        629,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                name: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    592,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    614,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('__in__do__after__break' type=dynamic),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                init: Some(\n                                                    Lit(\n                                                        Str(\n                                                            Str {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        615,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        629,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                value: Atom('Satisfaction' type=dynamic),\n                                                                raw: Some(\n                                                                    \"\\\"Satisfaction\\\"\",\n                                                                ),\n                                                            },\n                                                        ),\n                                                    ),\n                                                ),\n                                                definite: false,\n                                            },\n                                        ],\n                                    },\n                                ),\n                            ),\n                        ],\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/while/S12.6.2_A4_T5.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                356,\n            ),\n            hi: BytePos(\n                573,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    356,\n                ),\n                hi: BytePos(\n                    362,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('woohoo' type=inline),\n            optional: false,\n        },\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        363,\n                    ),\n                    hi: BytePos(\n                        573,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    While(\n                        WhileStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    367,\n                                ),\n                                hi: BytePos(\n                                    509,\n                                ),\n                                ctxt: #0,\n                            },\n                            test: Lit(\n                                Bool(\n                                    Bool {\n                                        span: Span {\n                                            lo: BytePos(\n                                                373,\n                                            ),\n                                            hi: BytePos(\n                                                377,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: true,\n                                    },\n                                ),\n                            ),\n                            body: Block(\n                                BlockStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            378,\n                                        ),\n                                        hi: BytePos(\n                                            509,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    stmts: [\n                                        Expr(\n                                            ExprStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        384,\n                                                    ),\n                                                    hi: BytePos(\n                                                        388,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                expr: Update(\n                                                    UpdateExpr {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                384,\n                                                            ),\n                                                            hi: BytePos(\n                                                                387,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        op: \"++\",\n                                                        prefix: false,\n                                                        arg: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        384,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        385,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('i' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                        If(\n                                            IfStmt {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        393,\n                                                    ),\n                                                    hi: BytePos(\n                                                        505,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                test: Bin(\n                                                    BinExpr {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                398,\n                                                            ),\n                                                            hi: BytePos(\n                                                                405,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        op: \"==\",\n                                                        left: Ident(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        398,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        399,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('i' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                        right: Lit(\n                                                            Num(\n                                                                Number {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            403,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            405,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: 10.0,\n                                                                    raw: Some(\n                                                                        \"10\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    },\n                                                ),\n                                                cons: Block(\n                                                    BlockStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                408,\n                                                            ),\n                                                            hi: BytePos(\n                                                                505,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        stmts: [\n                                                            Break(\n                                                                BreakStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            416,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            429,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    label: Some(\n                                                                        Ident {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    422,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    428,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            sym: Atom('woohoo' type=inline),\n                                                                            optional: false,\n                                                                        },\n                                                                    ),\n                                                                },\n                                                            ),\n                                                            Throw(\n                                                                ThrowStmt {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            436,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            499,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    arg: New(\n                                                                        NewExpr {\n                                                                            span: Span {\n                                                                                lo: BytePos(\n                                                                                    442,\n                                                                                ),\n                                                                                hi: BytePos(\n                                                                                    498,\n                                                                                ),\n                                                                                ctxt: #0,\n                                                                            },\n                                                                            callee: Ident(\n                                                                                Ident {\n                                                                                    span: Span {\n                                                                                        lo: BytePos(\n                                                                                            446,\n                                                                                        ),\n                                                                                        hi: BytePos(\n                                                                                            458,\n                                                                                        ),\n                                                                                        ctxt: #0,\n                                                                                    },\n                                                                                    sym: Atom('Test262Error' type=dynamic),\n                                                                                    optional: false,\n                                                                                },\n                                                                            ),\n                                                                            args: Some(\n                                                                                [\n                                                                                    ExprOrSpread {\n                                                                                        spread: None,\n                                                                                        expr: Lit(\n                                                                                            Str(\n                                                                                                Str {\n                                                                                                    span: Span {\n                                                                                                        lo: BytePos(\n                                                                                                            459,\n                                                                                                        ),\n                                                                                                        hi: BytePos(\n                                                                                                            497,\n                                                                                                        ),\n                                                                                                        ctxt: #0,\n                                                                                                    },\n                                                                                                    value: Atom('#1.1: \"break woohoo\" must break loop' type=dynamic),\n                                                                                                    raw: Some(\n                                                                                                        \"'#1.1: \\\"break woohoo\\\" must break loop'\",\n                                                                                                    ),\n                                                                                                },\n                                                                                            ),\n                                                                                        ),\n                                                                                    },\n                                                                                ],\n                                                                            ),\n                                                                            type_args: None,\n                                                                        },\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ],\n                                                    },\n                                                ),\n                                                alt: None,\n                                            },\n                                        ),\n                                    ],\n                                },\n                            ),\n                        },\n                    ),\n                    Throw(\n                        ThrowStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    512,\n                                ),\n                                hi: BytePos(\n                                    571,\n                                ),\n                                ctxt: #0,\n                            },\n                            arg: New(\n                                NewExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            518,\n                                        ),\n                                        hi: BytePos(\n                                            570,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Ident(\n                                        Ident {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    522,\n                                                ),\n                                                hi: BytePos(\n                                                    534,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            sym: Atom('Test262Error' type=dynamic),\n                                            optional: false,\n                                        },\n                                    ),\n                                    args: Some(\n                                        [\n                                            ExprOrSpread {\n                                                spread: None,\n                                                expr: Lit(\n                                                    Str(\n                                                        Str {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    535,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    569,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: Atom('This code should be unreacheable' type=dynamic),\n                                                            raw: Some(\n                                                                \"'This code should be unreacheable'\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ],\n                                    ),\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/while/S12.6.2_A5.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/S12.6.2_A6_T1.js","error":null}
{"file_path":"test/language/statements/while/S12.6.2_A6_T2.js","error":null}
{"file_path":"test/language/statements/while/S12.6.2_A6_T3.js","error":null}
{"file_path":"test/language/statements/while/S12.6.2_A6_T4.js","error":null}
{"file_path":"test/language/statements/while/S12.6.2_A6_T5.js","error":null}
{"file_path":"test/language/statements/while/S12.6.2_A6_T6.js","error":null}
{"file_path":"test/language/statements/while/S12.6.2_A7.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/S12.6.2_A8.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/S12.6.2_A9.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/cptn-abrupt-empty.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/cptn-iter.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/cptn-no-iter.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/decl-async-fun.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/decl-async-gen.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/decl-cls.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        341,\n                    ),\n                    hi: BytePos(\n                        342,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('C' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        335,\n                    ),\n                    hi: BytePos(\n                        345,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/statements/while/decl-const.js","error":null}
{"file_path":"test/language/statements/while/decl-fun.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/decl-gen.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/decl-let.js","error":null}
{"file_path":"test/language/statements/while/labelled-fn-stmt.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                562,\n            ),\n            hi: BytePos(\n                593,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    562,\n                ),\n                hi: BytePos(\n                    568,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label1' type=inline),\n            optional: false,\n        },\n        body: Labeled(\n            LabeledStmt {\n                span: Span {\n                    lo: BytePos(\n                        570,\n                    ),\n                    hi: BytePos(\n                        593,\n                    ),\n                    ctxt: #0,\n                },\n                label: Ident {\n                    span: Span {\n                        lo: BytePos(\n                            570,\n                        ),\n                        hi: BytePos(\n                            576,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('label2' type=inline),\n                    optional: false,\n                },\n                body: Decl(\n                    Fn(\n                        FnDecl {\n                            ident: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        587,\n                                    ),\n                                    hi: BytePos(\n                                        588,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('f' type=inline),\n                                optional: false,\n                            },\n                            declare: false,\n                            function: Function {\n                                params: [],\n                                decorators: [],\n                                span: Span {\n                                    lo: BytePos(\n                                        578,\n                                    ),\n                                    hi: BytePos(\n                                        593,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                body: Some(\n                                    BlockStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                591,\n                                            ),\n                                            hi: BytePos(\n                                                593,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        stmts: [],\n                                    },\n                                ),\n                                is_generator: false,\n                                is_async: false,\n                                type_params: None,\n                                return_type: None,\n                            },\n                        },\n                    ),\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/statements/while/let-array-with-newline.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/statements/while/let-block-with-newline.js","error":null}
{"file_path":"test/language/statements/while/let-identifier-with-newline.js","error":null}
{"file_path":"test/language/statements/while/tco-body.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/S7.2_A2.1_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A2.2_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A2.3_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A2.4_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A2.5_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A3.1_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A3.2_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A3.3_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A3.4_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A3.5_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A4.1_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A4.2_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A4.3_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A4.4_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A4.5_T2.js","error":null}
{"file_path":"test/language/white-space/S7.2_A5_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/S7.2_A5_T2.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/S7.2_A5_T3.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/S7.2_A5_T4.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/S7.2_A5_T5.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/after-regular-expression-literal-carriage-return.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-em-quad.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-em-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-en-quad.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-en-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-figure-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-form-feed.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-four-per-em-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-hair-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-ideographic-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-line-feed.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-line-separator.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-medium-mathematical-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-nbsp.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-nnbsp.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-ogham-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-paragraph-separator.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-punctuation-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-six-per-em-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-tab.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-thin-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-three-per-em-space.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-vertical-tab.js","error":null}
{"file_path":"test/language/white-space/after-regular-expression-literal-zwnbsp.js","error":null}
{"file_path":"test/language/white-space/between-form-feed.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/white-space/between-horizontal-tab.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/white-space/between-nbsp.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/white-space/between-space.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/white-space/between-vertical-tab.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/white-space/comment-multi-form-feed.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-multi-horizontal-tab.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-multi-nbsp.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-multi-space.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-multi-vertical-tab.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-single-form-feed.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-single-horizontal-tab.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-single-nbsp.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-single-space.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/comment-single-vertical-tab.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/mongolian-vowel-separator-eval.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/white-space/mongolian-vowel-separator.js","error":null}
{"file_path":"test/language/white-space/string-form-feed.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/string-horizontal-tab.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/string-nbsp.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/string-space.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/white-space/string-vertical-tab.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/comments/S7.4_A1_T1.js","error":{"category":"run","message":"could not use as object: v22"}}
{"file_path":"test/language/comments/S7.4_A1_T2.js","error":null}
{"file_path":"test/language/comments/S7.4_A2_T1.js","error":{"category":"run","message":"could not use as object: v22"}}
{"file_path":"test/language/comments/S7.4_A2_T2.js","error":null}
{"file_path":"test/language/comments/S7.4_A3.js","error":null}
{"file_path":"test/language/comments/S7.4_A4_T1.js","error":null}
{"file_path":"test/language/comments/S7.4_A4_T2.js","error":null}
{"file_path":"test/language/comments/S7.4_A4_T3.js","error":null}
{"file_path":"test/language/comments/S7.4_A4_T4.js","error":null}
{"file_path":"test/language/comments/S7.4_A4_T5.js","error":null}
{"file_path":"test/language/comments/S7.4_A4_T6.js","error":null}
{"file_path":"test/language/comments/S7.4_A4_T7.js","error":null}
{"file_path":"test/language/comments/S7.4_A5.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/comments/S7.4_A6.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/comments/hashbang/escaped-bang-041.js","error":null}
{"file_path":"test/language/comments/hashbang/escaped-bang-u0021.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: PrivateName(\n    PrivateName {\n        span: Span {\n            lo: BytePos(\n                1,\n            ),\n            hi: BytePos(\n                8,\n            ),\n            ctxt: #0,\n        },\n        id: Ident {\n            span: Span {\n                lo: BytePos(\n                    2,\n                ),\n                hi: BytePos(\n                    8,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('!' type=inline),\n            optional: false,\n        },\n    },\n)"}}
{"file_path":"test/language/comments/hashbang/escaped-bang-u21.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: PrivateName(\n    PrivateName {\n        span: Span {\n            lo: BytePos(\n                1,\n            ),\n            hi: BytePos(\n                8,\n            ),\n            ctxt: #0,\n        },\n        id: Ident {\n            span: Span {\n                lo: BytePos(\n                    2,\n                ),\n                hi: BytePos(\n                    8,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('!' type=inline),\n            optional: false,\n        },\n    },\n)"}}
{"file_path":"test/language/comments/hashbang/escaped-bang-x21.js","error":null}
{"file_path":"test/language/comments/hashbang/escaped-hash-043.js","error":null}
{"file_path":"test/language/comments/hashbang/escaped-hash-u0023.js","error":null}
{"file_path":"test/language/comments/hashbang/escaped-hash-u23.js","error":null}
{"file_path":"test/language/comments/hashbang/escaped-hash-x23.js","error":null}
{"file_path":"test/language/comments/hashbang/escaped-hashbang.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/comments/hashbang/eval-indirect.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Seq(\n    SeqExpr {\n        span: Span {\n            lo: BytePos(\n                364,\n            ),\n            hi: BytePos(\n                371,\n            ),\n            ctxt: #0,\n        },\n        exprs: [\n            Lit(\n                Num(\n                    Number {\n                        span: Span {\n                            lo: BytePos(\n                                364,\n                            ),\n                            hi: BytePos(\n                                365,\n                            ),\n                            ctxt: #0,\n                        },\n                        value: 0.0,\n                        raw: Some(\n                            \"0\",\n                        ),\n                    },\n                ),\n            ),\n            Ident(\n                Ident {\n                    span: Span {\n                        lo: BytePos(\n                            367,\n                        ),\n                        hi: BytePos(\n                            371,\n                        ),\n                        ctxt: #0,\n                    },\n                    sym: Atom('eval' type=static),\n                    optional: false,\n                },\n            ),\n        ],\n    },\n)"}}
{"file_path":"test/language/comments/hashbang/eval.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/comments/hashbang/function-body.js","error":null}
{"file_path":"test/language/comments/hashbang/function-constructor.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/comments/hashbang/line-terminator-carriage-return.js","error":null}
{"file_path":"test/language/comments/hashbang/line-terminator-line-separator.js","error":null}
{"file_path":"test/language/comments/hashbang/line-terminator-paragraph-separator.js","error":null}
{"file_path":"test/language/comments/hashbang/module.js","error":null}
{"file_path":"test/language/comments/hashbang/multi-line-comment.js","error":null}
{"file_path":"test/language/comments/hashbang/no-line-separator.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/comments/hashbang/not-empty.js","error":null}
{"file_path":"test/language/comments/hashbang/preceding-directive-prologue-sc.js","error":null}
{"file_path":"test/language/comments/hashbang/preceding-directive-prologue.js","error":null}
{"file_path":"test/language/comments/hashbang/preceding-empty-statement.js","error":null}
{"file_path":"test/language/comments/hashbang/preceding-hashbang.js","error":null}
{"file_path":"test/language/comments/hashbang/preceding-line-comment.js","error":null}
{"file_path":"test/language/comments/hashbang/preceding-multi-line-comment.js","error":null}
{"file_path":"test/language/comments/hashbang/preceding-whitespace.js","error":null}
{"file_path":"test/language/comments/hashbang/statement-block.js","error":null}
{"file_path":"test/language/comments/hashbang/use-strict.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: With(\n    WithStmt {\n        span: Span {\n            lo: BytePos(\n                379,\n            ),\n            hi: BytePos(\n                391,\n            ),\n            ctxt: #0,\n        },\n        obj: Object(\n            ObjectLit {\n                span: Span {\n                    lo: BytePos(\n                        385,\n                    ),\n                    hi: BytePos(\n                        387,\n                    ),\n                    ctxt: #0,\n                },\n                props: [],\n            },\n        ),\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        389,\n                    ),\n                    hi: BytePos(\n                        391,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/comments/mongolian-vowel-separator-multi.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/comments/mongolian-vowel-separator-single-eval.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/comments/mongolian-vowel-separator-single.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/comments/multi-line-asi-carriage-return.js","error":null}
{"file_path":"test/language/comments/multi-line-asi-line-feed.js","error":null}
{"file_path":"test/language/comments/multi-line-asi-line-separator.js","error":null}
{"file_path":"test/language/comments/multi-line-asi-paragraph-separator.js","error":null}
{"file_path":"test/language/comments/multi-line-html-close-extra.js","error":null}
{"file_path":"test/language/comments/single-line-html-close-without-lt.js","error":null}
{"file_path":"test/language/block-scope/leave/finally-block-let-declaration-only-shadows-outer-parameter-value-1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/leave/finally-block-let-declaration-only-shadows-outer-parameter-value-2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/leave/for-loop-block-let-declaration-only-shadows-outer-parameter-value-1.js","error":{"category":"run","message":"expected string, but got another type"}}
{"file_path":"test/language/block-scope/leave/for-loop-block-let-declaration-only-shadows-outer-parameter-value-2.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                267,\n            ),\n            hi: BytePos(\n                424,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    267,\n                ),\n                hi: BytePos(\n                    272,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: For(\n            ForStmt {\n                span: Span {\n                    lo: BytePos(\n                        274,\n                    ),\n                    hi: BytePos(\n                        424,\n                    ),\n                    ctxt: #0,\n                },\n                init: Some(\n                    VarDecl(\n                        VarDecl {\n                            span: Span {\n                                lo: BytePos(\n                                    279,\n                                ),\n                                hi: BytePos(\n                                    288,\n                                ),\n                                ctxt: #0,\n                            },\n                            kind: \"var\",\n                            declare: false,\n                            decls: [\n                                VarDeclarator {\n                                    span: Span {\n                                        lo: BytePos(\n                                            283,\n                                        ),\n                                        hi: BytePos(\n                                            288,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    name: Ident(\n                                        BindingIdent {\n                                            id: Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        283,\n                                                    ),\n                                                    hi: BytePos(\n                                                        284,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('i' type=static),\n                                                optional: false,\n                                            },\n                                            type_ann: None,\n                                        },\n                                    ),\n                                    init: Some(\n                                        Lit(\n                                            Num(\n                                                Number {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            287,\n                                                        ),\n                                                        hi: BytePos(\n                                                            288,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    value: 0.0,\n                                                    raw: Some(\n                                                        \"0\",\n                                                    ),\n                                                },\n                                            ),\n                                        ),\n                                    ),\n                                    definite: false,\n                                },\n                            ],\n                        },\n                    ),\n                ),\n                test: Some(\n                    Bin(\n                        BinExpr {\n                            span: Span {\n                                lo: BytePos(\n                                    290,\n                                ),\n                                hi: BytePos(\n                                    296,\n                                ),\n                                ctxt: #0,\n                            },\n                            op: \"<\",\n                            left: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            290,\n                                        ),\n                                        hi: BytePos(\n                                            291,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('i' type=static),\n                                    optional: false,\n                                },\n                            ),\n                            right: Lit(\n                                Num(\n                                    Number {\n                                        span: Span {\n                                            lo: BytePos(\n                                                294,\n                                            ),\n                                            hi: BytePos(\n                                                296,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        value: 10.0,\n                                        raw: Some(\n                                            \"10\",\n                                        ),\n                                    },\n                                ),\n                            ),\n                        },\n                    ),\n                ),\n                update: Some(\n                    Update(\n                        UpdateExpr {\n                            span: Span {\n                                lo: BytePos(\n                                    298,\n                                ),\n                                hi: BytePos(\n                                    301,\n                                ),\n                                ctxt: #0,\n                            },\n                            op: \"++\",\n                            prefix: true,\n                            arg: Ident(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            300,\n                                        ),\n                                        hi: BytePos(\n                                            301,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('i' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ),\n                body: Block(\n                    BlockStmt {\n                        span: Span {\n                            lo: BytePos(\n                                303,\n                            ),\n                            hi: BytePos(\n                                424,\n                            ),\n                            ctxt: #0,\n                        },\n                        stmts: [\n                            Decl(\n                                Var(\n                                    VarDecl {\n                                        span: Span {\n                                            lo: BytePos(\n                                                309,\n                                            ),\n                                            hi: BytePos(\n                                                330,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        kind: \"let\",\n                                        declare: false,\n                                        decls: [\n                                            VarDeclarator {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        313,\n                                                    ),\n                                                    hi: BytePos(\n                                                        329,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                name: Ident(\n                                                    BindingIdent {\n                                                        id: Ident {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    313,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    314,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            sym: Atom('x' type=static),\n                                                            optional: false,\n                                                        },\n                                                        type_ann: None,\n                                                    },\n                                                ),\n                                                init: Some(\n                                                    Bin(\n                                                        BinExpr {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    317,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    329,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            op: \"+\",\n                                                            left: Lit(\n                                                                Str(\n                                                                    Str {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                317,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                325,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: Atom('middle' type=inline),\n                                                                        raw: Some(\n                                                                            \"'middle'\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                            right: Ident(\n                                                                Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            328,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            329,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('i' type=static),\n                                                                    optional: false,\n                                                                },\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                                definite: false,\n                                            },\n                                        ],\n                                    },\n                                ),\n                            ),\n                            For(\n                                ForStmt {\n                                    span: Span {\n                                        lo: BytePos(\n                                            335,\n                                        ),\n                                        hi: BytePos(\n                                            420,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    init: Some(\n                                        VarDecl(\n                                            VarDecl {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        340,\n                                                    ),\n                                                    hi: BytePos(\n                                                        349,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                kind: \"var\",\n                                                declare: false,\n                                                decls: [\n                                                    VarDeclarator {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                344,\n                                                            ),\n                                                            hi: BytePos(\n                                                                349,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        name: Ident(\n                                                            BindingIdent {\n                                                                id: Ident {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            344,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            345,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    sym: Atom('j' type=inline),\n                                                                    optional: false,\n                                                                },\n                                                                type_ann: None,\n                                                            },\n                                                        ),\n                                                        init: Some(\n                                                            Lit(\n                                                                Num(\n                                                                    Number {\n                                                                        span: Span {\n                                                                            lo: BytePos(\n                                                                                348,\n                                                                            ),\n                                                                            hi: BytePos(\n                                                                                349,\n                                                                            ),\n                                                                            ctxt: #0,\n                                                                        },\n                                                                        value: 0.0,\n                                                                        raw: Some(\n                                                                            \"0\",\n                                                                        ),\n                                                                    },\n                                                                ),\n                                                            ),\n                                                        ),\n                                                        definite: false,\n                                                    },\n                                                ],\n                                            },\n                                        ),\n                                    ),\n                                    test: Some(\n                                        Bin(\n                                            BinExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        351,\n                                                    ),\n                                                    hi: BytePos(\n                                                        357,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                op: \"<\",\n                                                left: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                351,\n                                                            ),\n                                                            hi: BytePos(\n                                                                352,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('j' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                right: Lit(\n                                                    Num(\n                                                        Number {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    355,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    357,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            value: 10.0,\n                                                            raw: Some(\n                                                                \"10\",\n                                                            ),\n                                                        },\n                                                    ),\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    update: Some(\n                                        Update(\n                                            UpdateExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        359,\n                                                    ),\n                                                    hi: BytePos(\n                                                        362,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                op: \"++\",\n                                                prefix: true,\n                                                arg: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                361,\n                                                            ),\n                                                            hi: BytePos(\n                                                                362,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('j' type=inline),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    body: Block(\n                                        BlockStmt {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    364,\n                                                ),\n                                                hi: BytePos(\n                                                    420,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            stmts: [\n                                                Decl(\n                                                    Var(\n                                                        VarDecl {\n                                                            span: Span {\n                                                                lo: BytePos(\n                                                                    372,\n                                                                ),\n                                                                hi: BytePos(\n                                                                    392,\n                                                                ),\n                                                                ctxt: #0,\n                                                            },\n                                                            kind: \"let\",\n                                                            declare: false,\n                                                            decls: [\n                                                                VarDeclarator {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            376,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            391,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    name: Ident(\n                                                                        BindingIdent {\n                                                                            id: Ident {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        376,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        377,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                sym: Atom('x' type=static),\n                                                                                optional: false,\n                                                                            },\n                                                                            type_ann: None,\n                                                                        },\n                                                                    ),\n                                                                    init: Some(\n                                                                        Bin(\n                                                                            BinExpr {\n                                                                                span: Span {\n                                                                                    lo: BytePos(\n                                                                                        380,\n                                                                                    ),\n                                                                                    hi: BytePos(\n                                                                                        391,\n                                                                                    ),\n                                                                                    ctxt: #0,\n                                                                                },\n                                                                                op: \"+\",\n                                                                                left: Lit(\n                                                                                    Str(\n                                                                                        Str {\n                                                                                            span: Span {\n                                                                                                lo: BytePos(\n                                                                                                    380,\n                                                                                                ),\n                                                                                                hi: BytePos(\n                                                                                                    387,\n                                                                                                ),\n                                                                                                ctxt: #0,\n                                                                                            },\n                                                                                            value: Atom('inner' type=inline),\n                                                                                            raw: Some(\n                                                                                                \"'inner'\",\n                                                                                            ),\n                                                                                        },\n                                                                                    ),\n                                                                                ),\n                                                                                right: Ident(\n                                                                                    Ident {\n                                                                                        span: Span {\n                                                                                            lo: BytePos(\n                                                                                                390,\n                                                                                            ),\n                                                                                            hi: BytePos(\n                                                                                                391,\n                                                                                            ),\n                                                                                            ctxt: #0,\n                                                                                        },\n                                                                                        sym: Atom('j' type=inline),\n                                                                                        optional: false,\n                                                                                    },\n                                                                                ),\n                                                                            },\n                                                                        ),\n                                                                    ),\n                                                                    definite: false,\n                                                                },\n                                                            ],\n                                                        },\n                                                    ),\n                                                ),\n                                                Continue(\n                                                    ContinueStmt {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                399,\n                                                            ),\n                                                            hi: BytePos(\n                                                                414,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        label: Some(\n                                                            Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        408,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        413,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('label' type=static),\n                                                                optional: false,\n                                                            },\n                                                        ),\n                                                    },\n                                                ),\n                                            ],\n                                        },\n                                    ),\n                                },\n                            ),\n                        ],\n                    },\n                ),\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/block-scope/leave/nested-block-let-declaration-only-shadows-outer-parameter-value-1.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                265,\n            ),\n            hi: BytePos(\n                315,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    265,\n                ),\n                hi: BytePos(\n                    270,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        272,\n                    ),\n                    hi: BytePos(\n                        315,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Decl(\n                        Var(\n                            VarDecl {\n                                span: Span {\n                                    lo: BytePos(\n                                        278,\n                                    ),\n                                    hi: BytePos(\n                                        294,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                kind: \"let\",\n                                declare: false,\n                                decls: [\n                                    VarDeclarator {\n                                        span: Span {\n                                            lo: BytePos(\n                                                282,\n                                            ),\n                                            hi: BytePos(\n                                                293,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        name: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            282,\n                                                        ),\n                                                        hi: BytePos(\n                                                            283,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        init: Some(\n                                            Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                286,\n                                                            ),\n                                                            hi: BytePos(\n                                                                293,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('inner' type=inline),\n                                                        raw: Some(\n                                                            \"'inner'\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ),\n                                        definite: false,\n                                    },\n                                ],\n                            },\n                        ),\n                    ),\n                    Break(\n                        BreakStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    299,\n                                ),\n                                hi: BytePos(\n                                    311,\n                                ),\n                                ctxt: #0,\n                            },\n                            label: Some(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            305,\n                                        ),\n                                        hi: BytePos(\n                                            310,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('label' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/block-scope/leave/nested-block-let-declaration-only-shadows-outer-parameter-value-2.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                265,\n            ),\n            hi: BytePos(\n                353,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    265,\n                ),\n                hi: BytePos(\n                    270,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        272,\n                    ),\n                    hi: BytePos(\n                        353,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Decl(\n                        Var(\n                            VarDecl {\n                                span: Span {\n                                    lo: BytePos(\n                                        278,\n                                    ),\n                                    hi: BytePos(\n                                        295,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                kind: \"let\",\n                                declare: false,\n                                decls: [\n                                    VarDeclarator {\n                                        span: Span {\n                                            lo: BytePos(\n                                                282,\n                                            ),\n                                            hi: BytePos(\n                                                294,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        name: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            282,\n                                                        ),\n                                                        hi: BytePos(\n                                                            283,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        init: Some(\n                                            Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                286,\n                                                            ),\n                                                            hi: BytePos(\n                                                                294,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('middle' type=inline),\n                                                        raw: Some(\n                                                            \"'middle'\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ),\n                                        definite: false,\n                                    },\n                                ],\n                            },\n                        ),\n                    ),\n                    Block(\n                        BlockStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    300,\n                                ),\n                                hi: BytePos(\n                                    349,\n                                ),\n                                ctxt: #0,\n                            },\n                            stmts: [\n                                Decl(\n                                    Var(\n                                        VarDecl {\n                                            span: Span {\n                                                lo: BytePos(\n                                                    308,\n                                                ),\n                                                hi: BytePos(\n                                                    324,\n                                                ),\n                                                ctxt: #0,\n                                            },\n                                            kind: \"let\",\n                                            declare: false,\n                                            decls: [\n                                                VarDeclarator {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            312,\n                                                        ),\n                                                        hi: BytePos(\n                                                            323,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    name: Ident(\n                                                        BindingIdent {\n                                                            id: Ident {\n                                                                span: Span {\n                                                                    lo: BytePos(\n                                                                        312,\n                                                                    ),\n                                                                    hi: BytePos(\n                                                                        313,\n                                                                    ),\n                                                                    ctxt: #0,\n                                                                },\n                                                                sym: Atom('x' type=static),\n                                                                optional: false,\n                                                            },\n                                                            type_ann: None,\n                                                        },\n                                                    ),\n                                                    init: Some(\n                                                        Lit(\n                                                            Str(\n                                                                Str {\n                                                                    span: Span {\n                                                                        lo: BytePos(\n                                                                            316,\n                                                                        ),\n                                                                        hi: BytePos(\n                                                                            323,\n                                                                        ),\n                                                                        ctxt: #0,\n                                                                    },\n                                                                    value: Atom('inner' type=inline),\n                                                                    raw: Some(\n                                                                        \"'inner'\",\n                                                                    ),\n                                                                },\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    definite: false,\n                                                },\n                                            ],\n                                        },\n                                    ),\n                                ),\n                                Break(\n                                    BreakStmt {\n                                        span: Span {\n                                            lo: BytePos(\n                                                331,\n                                            ),\n                                            hi: BytePos(\n                                                343,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        label: Some(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        337,\n                                                    ),\n                                                    hi: BytePos(\n                                                        342,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('label' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    },\n                                ),\n                            ],\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/block-scope/leave/outermost-binding-updated-in-catch-block-nested-block-let-declaration-unseen-outside-of-block.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/leave/try-block-let-declaration-only-shadows-outer-parameter-value-1.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/leave/try-block-let-declaration-only-shadows-outer-parameter-value-2.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/leave/verify-context-in-finally-block.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/leave/verify-context-in-for-loop-block.js","error":{"category":"run","message":"could not use as object: v22"}}
{"file_path":"test/language/block-scope/leave/verify-context-in-labelled-block.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                251,\n            ),\n            hi: BytePos(\n                301,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    251,\n                ),\n                hi: BytePos(\n                    256,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('label' type=static),\n            optional: false,\n        },\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        258,\n                    ),\n                    hi: BytePos(\n                        301,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Decl(\n                        Var(\n                            VarDecl {\n                                span: Span {\n                                    lo: BytePos(\n                                        264,\n                                    ),\n                                    hi: BytePos(\n                                        280,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                kind: \"let\",\n                                declare: false,\n                                decls: [\n                                    VarDeclarator {\n                                        span: Span {\n                                            lo: BytePos(\n                                                268,\n                                            ),\n                                            hi: BytePos(\n                                                279,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        name: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            268,\n                                                        ),\n                                                        hi: BytePos(\n                                                            269,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        init: Some(\n                                            Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                272,\n                                                            ),\n                                                            hi: BytePos(\n                                                                279,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('inner' type=inline),\n                                                        raw: Some(\n                                                            \"'inner'\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ),\n                                        definite: false,\n                                    },\n                                ],\n                            },\n                        ),\n                    ),\n                    Break(\n                        BreakStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    285,\n                                ),\n                                hi: BytePos(\n                                    297,\n                                ),\n                                ctxt: #0,\n                            },\n                            label: Some(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            291,\n                                        ),\n                                        hi: BytePos(\n                                            296,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('label' type=static),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/block-scope/leave/verify-context-in-try-block.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/leave/x-after-break-to-label.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Labeled(\n    LabeledStmt {\n        span: Span {\n            lo: BytePos(\n                222,\n            ),\n            hi: BytePos(\n                305,\n            ),\n            ctxt: #0,\n        },\n        label: Ident {\n            span: Span {\n                lo: BytePos(\n                    222,\n                ),\n                hi: BytePos(\n                    223,\n                ),\n                ctxt: #0,\n            },\n            sym: Atom('L' type=inline),\n            optional: false,\n        },\n        body: Block(\n            BlockStmt {\n                span: Span {\n                    lo: BytePos(\n                        225,\n                    ),\n                    hi: BytePos(\n                        305,\n                    ),\n                    ctxt: #0,\n                },\n                stmts: [\n                    Decl(\n                        Var(\n                            VarDecl {\n                                span: Span {\n                                    lo: BytePos(\n                                        231,\n                                    ),\n                                    hi: BytePos(\n                                        241,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                kind: \"let\",\n                                declare: false,\n                                decls: [\n                                    VarDeclarator {\n                                        span: Span {\n                                            lo: BytePos(\n                                                235,\n                                            ),\n                                            hi: BytePos(\n                                                240,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        name: Ident(\n                                            BindingIdent {\n                                                id: Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            235,\n                                                        ),\n                                                        hi: BytePos(\n                                                            236,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                                type_ann: None,\n                                            },\n                                        ),\n                                        init: Some(\n                                            Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                239,\n                                                            ),\n                                                            hi: BytePos(\n                                                                240,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 3.0,\n                                                        raw: Some(\n                                                            \"3\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        ),\n                                        definite: false,\n                                    },\n                                ],\n                            },\n                        ),\n                    ),\n                    Expr(\n                        ExprStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    246,\n                                ),\n                                hi: BytePos(\n                                    269,\n                                ),\n                                ctxt: #0,\n                            },\n                            expr: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            246,\n                                        ),\n                                        hi: BytePos(\n                                            268,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Member(\n                                            MemberExpr {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        246,\n                                                    ),\n                                                    hi: BytePos(\n                                                        262,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                obj: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                246,\n                                                            ),\n                                                            hi: BytePos(\n                                                                252,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('assert' type=static),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                                prop: Ident(\n                                                    Ident {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                253,\n                                                            ),\n                                                            hi: BytePos(\n                                                                262,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        sym: Atom('sameValue' type=dynamic),\n                                                        optional: false,\n                                                    },\n                                                ),\n                                            },\n                                        ),\n                                    ),\n                                    args: [\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Ident(\n                                                Ident {\n                                                    span: Span {\n                                                        lo: BytePos(\n                                                            263,\n                                                        ),\n                                                        hi: BytePos(\n                                                            264,\n                                                        ),\n                                                        ctxt: #0,\n                                                    },\n                                                    sym: Atom('x' type=static),\n                                                    optional: false,\n                                                },\n                                            ),\n                                        },\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Num(\n                                                    Number {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                266,\n                                                            ),\n                                                            hi: BytePos(\n                                                                267,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: 3.0,\n                                                        raw: Some(\n                                                            \"3\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                    Break(\n                        BreakStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    274,\n                                ),\n                                hi: BytePos(\n                                    282,\n                                ),\n                                ctxt: #0,\n                            },\n                            label: Some(\n                                Ident {\n                                    span: Span {\n                                        lo: BytePos(\n                                            280,\n                                        ),\n                                        hi: BytePos(\n                                            281,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    sym: Atom('L' type=inline),\n                                    optional: false,\n                                },\n                            ),\n                        },\n                    ),\n                    Expr(\n                        ExprStmt {\n                            span: Span {\n                                lo: BytePos(\n                                    287,\n                                ),\n                                hi: BytePos(\n                                    301,\n                                ),\n                                ctxt: #0,\n                            },\n                            expr: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            287,\n                                        ),\n                                        hi: BytePos(\n                                            300,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        287,\n                                                    ),\n                                                    hi: BytePos(\n                                                        293,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('assert' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Bool(\n                                                    Bool {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                294,\n                                                            ),\n                                                            hi: BytePos(\n                                                                299,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: false,\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                ],\n            },\n        ),\n    },\n)"}}
{"file_path":"test/language/block-scope/leave/x-before-continue.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/block-scope/return-from/block-const.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/block-scope/return-from/block-let.js","error":{"category":"run","message":"could not use as object: v21"}}
{"file_path":"test/language/block-scope/shadowing/catch-parameter-shadowing-catch-parameter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/shadowing/catch-parameter-shadowing-function-parameter-name.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/shadowing/catch-parameter-shadowing-let-declaration.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/shadowing/catch-parameter-shadowing-var-variable.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/shadowing/const-declaration-shadowing-catch-parameter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/shadowing/const-declarations-shadowing-parameter-name-let-const-and-var-variables.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/block-scope/shadowing/dynamic-lookup-from-closure.js","error":{"category":"run","message":"could not use as object: v12"}}
{"file_path":"test/language/block-scope/shadowing/dynamic-lookup-in-and-through-block-contexts.js","error":{"category":"run","message":"could not use as object: v27"}}
{"file_path":"test/language/block-scope/shadowing/hoisting-var-declarations-out-of-blocks.js","error":{"category":"run","message":"could not use as object: v18"}}
{"file_path":"test/language/block-scope/shadowing/let-declaration-shadowing-catch-parameter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/shadowing/let-declarations-shadowing-parameter-name-let-const-and-var.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/block-scope/shadowing/lookup-from-closure.js","error":{"category":"run","message":"could not use as object: v12"}}
{"file_path":"test/language/block-scope/shadowing/lookup-in-and-through-block-contexts.js","error":{"category":"run","message":"could not use as object: v27"}}
{"file_path":"test/language/block-scope/shadowing/parameter-name-shadowing-catch-parameter.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/shadowing/parameter-name-shadowing-parameter-name-let-const-and-var.js","error":{"category":"run","message":"could not use as object: v19"}}
{"file_path":"test/language/block-scope/syntax/for-in/acquire-properties-from-array.js","error":{"category":"run","message":"could not use as object: v43"}}
{"file_path":"test/language/block-scope/syntax/for-in/acquire-properties-from-object.js","error":{"category":"run","message":"could not use as object: v39"}}
{"file_path":"test/language/block-scope/syntax/for-in/disallow-initialization-assignment.js","error":null}
{"file_path":"test/language/block-scope/syntax/for-in/disallow-multiple-lexical-bindings-with-and-without-initializer.js","error":{"category":"panic","message":"assertion `left == right` failed\n  left: 2\n right: 1"}}
{"file_path":"test/language/block-scope/syntax/for-in/disallow-multiple-lexical-bindings-with-initializer.js","error":null}
{"file_path":"test/language/block-scope/syntax/for-in/disallow-multiple-lexical-bindings-without-and-with-initializer.js","error":null}
{"file_path":"test/language/block-scope/syntax/for-in/disallow-multiple-lexical-bindings.js","error":{"category":"panic","message":"assertion `left == right` failed\n  left: 2\n right: 1"}}
{"file_path":"test/language/block-scope/syntax/for-in/mixed-values-in-iteration.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/block-scope/syntax/for-in/mixed-values-in-iteration.js: 19,3 - 19,57: unsupported node: Prop(Getter(GetterProp { span: Span { lo: BytePos(418), hi: BytePos(428), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(422), hi: BytePos(423), ctxt: #0 }, sym: Atom('d' type=static), optional: false }), type_ann: None, body: Some(BlockStmt { span: Span { lo: BytePos(426), hi: BytePos(428), ctxt: #0 }, stmts: [] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/block-scope/syntax/for-in/mixed-values-in-iteration.js"}}
{"file_path":"test/language/block-scope/syntax/function-declarations/in-statement-position-case-expression-statement-list.js","error":null}
{"file_path":"test/language/block-scope/syntax/function-declarations/in-statement-position-default-statement-list.js","error":null}
{"file_path":"test/language/block-scope/syntax/function-declarations/in-statement-position-do-statement-while-expression.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/function-declarations/in-statement-position-for-statement.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/function-declarations/in-statement-position-if-expression-statement-else-statement.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/function-declarations/in-statement-position-if-expression-statement.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/function-declarations/in-statement-position-while-expression-statement.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration-global/allowed-to-declare-function-with-function-declaration.js","error":null}
{"file_path":"test/language/block-scope/syntax/redeclaration-global/allowed-to-redeclare-function-declaration-with-var.js","error":null}
{"file_path":"test/language/block-scope/syntax/redeclaration-global/allowed-to-redeclare-var-with-function-declaration.js","error":null}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-const.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-let.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-var.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-const.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-let.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/async-generator-name-redeclaration-attempt-with-var.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        573,\n                    ),\n                    hi: BytePos(\n                        574,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        567,\n                    ),\n                    hi: BytePos(\n                        577,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-const.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        581,\n                    ),\n                    hi: BytePos(\n                        582,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        575,\n                    ),\n                    hi: BytePos(\n                        585,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-function.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        601,\n                    ),\n                    hi: BytePos(\n                        602,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        595,\n                    ),\n                    hi: BytePos(\n                        605,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-let.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        577,\n                    ),\n                    hi: BytePos(\n                        578,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        571,\n                    ),\n                    hi: BytePos(\n                        581,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-var.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        621,\n                    ),\n                    hi: BytePos(\n                        622,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        615,\n                    ),\n                    hi: BytePos(\n                        625,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        596,\n                    ),\n                    hi: BytePos(\n                        597,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        590,\n                    ),\n                    hi: BytePos(\n                        600,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        649,\n                    ),\n                    hi: BytePos(\n                        650,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        643,\n                    ),\n                    hi: BytePos(\n                        653,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-var.js","error":null}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-declaration-attempt-to-redeclare-with-var-declaration-nested-in-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        595,\n                    ),\n                    hi: BytePos(\n                        596,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        589,\n                    ),\n                    hi: BytePos(\n                        599,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-const.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-let.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-var.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        1032,\n                    ),\n                    hi: BytePos(\n                        1033,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        1026,\n                    ),\n                    hi: BytePos(\n                        1036,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-var.js","error":null}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-redeclaration-attempt-after-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-redeclaration-attempt-after-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-redeclaration-attempt-after-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        1027,\n                    ),\n                    hi: BytePos(\n                        1028,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        1021,\n                    ),\n                    hi: BytePos(\n                        1031,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-redeclaration-attempt-after-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-redeclaration-attempt-after-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-redeclaration-attempt-after-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/inner-block-var-redeclaration-attempt-after-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        586,\n                    ),\n                    hi: BytePos(\n                        587,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        580,\n                    ),\n                    hi: BytePos(\n                        590,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-var.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        618,\n                    ),\n                    hi: BytePos(\n                        619,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        612,\n                    ),\n                    hi: BytePos(\n                        622,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-var.js","error":null}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-redeclaration-attempt-after-async-function.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-redeclaration-attempt-after-async-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-redeclaration-attempt-after-class.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Decl(\n    Class(\n        ClassDecl {\n            ident: Ident {\n                span: Span {\n                    lo: BytePos(\n                        617,\n                    ),\n                    hi: BytePos(\n                        618,\n                    ),\n                    ctxt: #0,\n                },\n                sym: Atom('f' type=inline),\n                optional: false,\n            },\n            declare: false,\n            class: Class {\n                span: Span {\n                    lo: BytePos(\n                        611,\n                    ),\n                    hi: BytePos(\n                        621,\n                    ),\n                    ctxt: #0,\n                },\n                decorators: [],\n                body: [],\n                super_class: None,\n                is_abstract: false,\n                type_params: None,\n                super_type_params: None,\n                implements: [],\n            },\n        },\n    ),\n)"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-redeclaration-attempt-after-const.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-redeclaration-attempt-after-function.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-redeclaration-attempt-after-generator.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/block-scope/syntax/redeclaration/var-redeclaration-attempt-after-let.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-1-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-10-s.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/function-code/10.4.3-1-100-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-100gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-101-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-101gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-102-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-102gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-103.js","error":{"category":"run","message":"could not use as object: v14"}}
{"file_path":"test/language/function-code/10.4.3-1-104.js","error":{"category":"run","message":"could not use as object: v14"}}
{"file_path":"test/language/function-code/10.4.3-1-105.js","error":{"category":"run","message":"could not use as object: v14"}}
{"file_path":"test/language/function-code/10.4.3-1-106.js","error":{"category":"run","message":"could not use as object: v14"}}
{"file_path":"test/language/function-code/10.4.3-1-10gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-11-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/function-code/10.4.3-1-11gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-12-s.js","error":{"category":"run","message":"could not use as object: v20"}}
{"file_path":"test/language/function-code/10.4.3-1-12gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-13-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-13gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-14-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-14gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-15-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-15gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-16-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-16gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-17-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-17gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-18gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-19-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-19gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-2-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-20-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-20gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-21-s.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-21gs.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-22-s.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-22gs.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-23-s.js","error":{"category":"run","message":"could not use as object: v17"}}
{"file_path":"test/language/function-code/10.4.3-1-23gs.js","error":{"category":"run","message":"could not use as object: v17"}}
{"file_path":"test/language/function-code/10.4.3-1-24-s.js","error":{"category":"run","message":"could not use as object: v17"}}
{"file_path":"test/language/function-code/10.4.3-1-24gs.js","error":{"category":"run","message":"could not use as object: v17"}}
{"file_path":"test/language/function-code/10.4.3-1-25-s.js","error":{"category":"run","message":"could not use as object: v12"}}
{"file_path":"test/language/function-code/10.4.3-1-25gs.js","error":{"category":"run","message":"could not use as object: v12"}}
{"file_path":"test/language/function-code/10.4.3-1-26-s.js","error":{"category":"run","message":"could not use as object: v12"}}
{"file_path":"test/language/function-code/10.4.3-1-26gs.js","error":{"category":"run","message":"could not use as object: v12"}}
{"file_path":"test/language/function-code/10.4.3-1-27-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-27gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-28-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-28gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-29-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-29gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-3-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-30-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-30gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-31-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-31gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-32-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-32gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-33-s.js","error":{"category":"run","message":"could not use as object: v18"}}
{"file_path":"test/language/function-code/10.4.3-1-33gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-34-s.js","error":{"category":"run","message":"could not use as object: v18"}}
{"file_path":"test/language/function-code/10.4.3-1-34gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-35-s.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-35gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-36-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-36gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-37-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-37gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-38-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-38gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-39-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-39gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-4-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-40-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-40gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-41-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-41gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-42-s.js","error":{"category":"run","message":"could not use as object: v19"}}
{"file_path":"test/language/function-code/10.4.3-1-42gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-43-s.js","error":{"category":"run","message":"could not use as object: v19"}}
{"file_path":"test/language/function-code/10.4.3-1-43gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-44-s.js","error":{"category":"run","message":"could not use as object: v17"}}
{"file_path":"test/language/function-code/10.4.3-1-44gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-45-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-45gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-46-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-46gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-47-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-47gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-48-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-48gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-49-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-49gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-5-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-50-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-50gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-51-s.js","error":{"category":"run","message":"could not use as object: v18"}}
{"file_path":"test/language/function-code/10.4.3-1-51gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-52-s.js","error":{"category":"run","message":"could not use as object: v18"}}
{"file_path":"test/language/function-code/10.4.3-1-52gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-53-s.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-53gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-54-s.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/10.4.3-1-54-s.js: 10,8 - 10,38: unsupported node: Prop(Getter(GetterProp { span: Span { lo: BytePos(233), hi: BytePos(259), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(237), hi: BytePos(240), ctxt: #0 }, sym: Atom('foo' type=inline), optional: false }), type_ann: None, body: Some(BlockStmt { span: Span { lo: BytePos(243), hi: BytePos(259), ctxt: #0 }, stmts: [Return(ReturnStmt { span: Span { lo: BytePos(245), hi: BytePos(257), ctxt: #0 }, arg: Some(This(ThisExpr { span: Span { lo: BytePos(252), hi: BytePos(256), ctxt: #0 } })) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/10.4.3-1-54-s.js"}}
{"file_path":"test/language/function-code/10.4.3-1-54gs.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/10.4.3-1-54gs.js: 13,8 - 13,38: unsupported node: Prop(Getter(GetterProp { span: Span { lo: BytePos(325), hi: BytePos(351), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(329), hi: BytePos(332), ctxt: #0 }, sym: Atom('foo' type=inline), optional: false }), type_ann: None, body: Some(BlockStmt { span: Span { lo: BytePos(335), hi: BytePos(351), ctxt: #0 }, stmts: [Return(ReturnStmt { span: Span { lo: BytePos(337), hi: BytePos(349), ctxt: #0 }, arg: Some(This(ThisExpr { span: Span { lo: BytePos(344), hi: BytePos(348), ctxt: #0 } })) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/10.4.3-1-54gs.js"}}
{"file_path":"test/language/function-code/10.4.3-1-55-s.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/10.4.3-1-55-s.js: 11,8 - 11,52: unsupported node: Prop(Getter(GetterProp { span: Span { lo: BytePos(286), hi: BytePos(326), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(290), hi: BytePos(293), ctxt: #0 }, sym: Atom('foo' type=inline), optional: false }), type_ann: None, body: Some(BlockStmt { span: Span { lo: BytePos(296), hi: BytePos(326), ctxt: #0 }, stmts: [Expr(ExprStmt { span: Span { lo: BytePos(298), hi: BytePos(311), ctxt: #0 }, expr: Lit(Str(Str { span: Span { lo: BytePos(298), hi: BytePos(310), ctxt: #0 }, value: Atom('use strict' type=dynamic), raw: Some(\"\\\"use strict\\\"\") })) }), Return(ReturnStmt { span: Span { lo: BytePos(312), hi: BytePos(324), ctxt: #0 }, arg: Some(This(ThisExpr { span: Span { lo: BytePos(319), hi: BytePos(323), ctxt: #0 } })) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/10.4.3-1-55-s.js"}}
{"file_path":"test/language/function-code/10.4.3-1-55gs.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/10.4.3-1-55gs.js: 11,8 - 11,52: unsupported node: Prop(Getter(GetterProp { span: Span { lo: BytePos(301), hi: BytePos(341), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(305), hi: BytePos(308), ctxt: #0 }, sym: Atom('foo' type=inline), optional: false }), type_ann: None, body: Some(BlockStmt { span: Span { lo: BytePos(311), hi: BytePos(341), ctxt: #0 }, stmts: [Expr(ExprStmt { span: Span { lo: BytePos(313), hi: BytePos(326), ctxt: #0 }, expr: Lit(Str(Str { span: Span { lo: BytePos(313), hi: BytePos(325), ctxt: #0 }, value: Atom('use strict' type=dynamic), raw: Some(\"\\\"use strict\\\"\") })) }), Return(ReturnStmt { span: Span { lo: BytePos(327), hi: BytePos(339), ctxt: #0 }, arg: Some(This(ThisExpr { span: Span { lo: BytePos(334), hi: BytePos(338), ctxt: #0 } })) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/10.4.3-1-55gs.js"}}
{"file_path":"test/language/function-code/10.4.3-1-56-s.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/10.4.3-1-56-s.js: 11,8 - 11,38: unsupported node: Prop(Setter(SetterProp { span: Span { lo: BytePos(244), hi: BytePos(270), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(248), hi: BytePos(251), ctxt: #0 }, sym: Atom('foo' type=inline), optional: false }), param: Ident(BindingIdent { id: Ident { span: Span { lo: BytePos(252), hi: BytePos(257), ctxt: #0 }, sym: Atom('stuff' type=inline), optional: false }, type_ann: None }), body: Some(BlockStmt { span: Span { lo: BytePos(259), hi: BytePos(270), ctxt: #0 }, stmts: [Expr(ExprStmt { span: Span { lo: BytePos(261), hi: BytePos(268), ctxt: #0 }, expr: Assign(AssignExpr { span: Span { lo: BytePos(261), hi: BytePos(267), ctxt: #0 }, op: \"=\", left: Pat(Ident(BindingIdent { id: Ident { span: Span { lo: BytePos(261), hi: BytePos(262), ctxt: #0 }, sym: Atom('x' type=static), optional: false }, type_ann: None })), right: This(ThisExpr { span: Span { lo: BytePos(263), hi: BytePos(267), ctxt: #0 } }) }) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/10.4.3-1-56-s.js"}}
{"file_path":"test/language/function-code/10.4.3-1-56gs.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/10.4.3-1-56gs.js: 11,8 - 11,38: unsupported node: Prop(Setter(SetterProp { span: Span { lo: BytePos(264), hi: BytePos(290), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(268), hi: BytePos(271), ctxt: #0 }, sym: Atom('foo' type=inline), optional: false }), param: Ident(BindingIdent { id: Ident { span: Span { lo: BytePos(272), hi: BytePos(277), ctxt: #0 }, sym: Atom('stuff' type=inline), optional: false }, type_ann: None }), body: Some(BlockStmt { span: Span { lo: BytePos(279), hi: BytePos(290), ctxt: #0 }, stmts: [Expr(ExprStmt { span: Span { lo: BytePos(281), hi: BytePos(288), ctxt: #0 }, expr: Assign(AssignExpr { span: Span { lo: BytePos(281), hi: BytePos(287), ctxt: #0 }, op: \"=\", left: Pat(Ident(BindingIdent { id: Ident { span: Span { lo: BytePos(281), hi: BytePos(282), ctxt: #0 }, sym: Atom('x' type=static), optional: false }, type_ann: None })), right: This(ThisExpr { span: Span { lo: BytePos(283), hi: BytePos(287), ctxt: #0 } }) }) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/10.4.3-1-56gs.js"}}
{"file_path":"test/language/function-code/10.4.3-1-57-s.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/10.4.3-1-57-s.js: 11,8 - 11,53: unsupported node: Prop(Setter(SetterProp { span: Span { lo: BytePos(279), hi: BytePos(320), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(283), hi: BytePos(286), ctxt: #0 }, sym: Atom('foo' type=inline), optional: false }), param: Ident(BindingIdent { id: Ident { span: Span { lo: BytePos(287), hi: BytePos(292), ctxt: #0 }, sym: Atom('stuff' type=inline), optional: false }, type_ann: None }), body: Some(BlockStmt { span: Span { lo: BytePos(294), hi: BytePos(320), ctxt: #0 }, stmts: [Expr(ExprStmt { span: Span { lo: BytePos(296), hi: BytePos(309), ctxt: #0 }, expr: Lit(Str(Str { span: Span { lo: BytePos(296), hi: BytePos(308), ctxt: #0 }, value: Atom('use strict' type=dynamic), raw: Some(\"\\\"use strict\\\"\") })) }), Expr(ExprStmt { span: Span { lo: BytePos(310), hi: BytePos(317), ctxt: #0 }, expr: Assign(AssignExpr { span: Span { lo: BytePos(310), hi: BytePos(316), ctxt: #0 }, op: \"=\", left: Pat(Ident(BindingIdent { id: Ident { span: Span { lo: BytePos(310), hi: BytePos(311), ctxt: #0 }, sym: Atom('x' type=static), optional: false }, type_ann: None })), right: This(ThisExpr { span: Span { lo: BytePos(312), hi: BytePos(316), ctxt: #0 } }) }) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/10.4.3-1-57-s.js"}}
{"file_path":"test/language/function-code/10.4.3-1-57gs.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/10.4.3-1-57gs.js: 12,8 - 12,53: unsupported node: Prop(Setter(SetterProp { span: Span { lo: BytePos(303), hi: BytePos(344), ctxt: #0 }, key: Ident(Ident { span: Span { lo: BytePos(307), hi: BytePos(310), ctxt: #0 }, sym: Atom('foo' type=inline), optional: false }), param: Ident(BindingIdent { id: Ident { span: Span { lo: BytePos(311), hi: BytePos(316), ctxt: #0 }, sym: Atom('stuff' type=inline), optional: false }, type_ann: None }), body: Some(BlockStmt { span: Span { lo: BytePos(318), hi: BytePos(344), ctxt: #0 }, stmts: [Expr(ExprStmt { span: Span { lo: BytePos(320), hi: BytePos(333), ctxt: #0 }, expr: Lit(Str(Str { span: Span { lo: BytePos(320), hi: BytePos(332), ctxt: #0 }, value: Atom('use strict' type=dynamic), raw: Some(\"\\\"use strict\\\"\") })) }), Expr(ExprStmt { span: Span { lo: BytePos(334), hi: BytePos(341), ctxt: #0 }, expr: Assign(AssignExpr { span: Span { lo: BytePos(334), hi: BytePos(340), ctxt: #0 }, op: \"=\", left: Pat(Ident(BindingIdent { id: Ident { span: Span { lo: BytePos(334), hi: BytePos(335), ctxt: #0 }, sym: Atom('x' type=static), optional: false }, type_ann: None })), right: This(ThisExpr { span: Span { lo: BytePos(336), hi: BytePos(340), ctxt: #0 } }) }) })] }) })) [VM code at mcjs_vm/src/bytecode_compiler.rs:1622]\n  while compiling statement\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/10.4.3-1-57gs.js"}}
{"file_path":"test/language/function-code/10.4.3-1-58-s.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/function-code/10.4.3-1-58gs.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/function-code/10.4.3-1-59-s.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/function-code/10.4.3-1-59gs.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/function-code/10.4.3-1-60-s.js","error":{"category":"run","message":"could not use as object: v29"}}
{"file_path":"test/language/function-code/10.4.3-1-60gs.js","error":{"category":"run","message":"could not use as object: v29"}}
{"file_path":"test/language/function-code/10.4.3-1-61-s.js","error":{"category":"run","message":"could not use as object: v29"}}
{"file_path":"test/language/function-code/10.4.3-1-61gs.js","error":{"category":"run","message":"could not use as object: v29"}}
{"file_path":"test/language/function-code/10.4.3-1-62-s.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/function-code/10.4.3-1-62gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-63-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-63gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-64-s.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-64gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-65-s.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-65gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-66-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-66gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-67-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-67gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-68-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-68gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-69-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-69gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-7-s.js","error":{"category":"run","message":"could not use as object: v22"}}
{"file_path":"test/language/function-code/10.4.3-1-70-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-70gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-71-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-71gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-72-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-72gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-73-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-73gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-74-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-74gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-75-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-75gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-76-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-76gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-77-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-77gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-78-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-78gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-79-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-79gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-7gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-8-s.js","error":{"category":"run","message":"could not use as object: v22"}}
{"file_path":"test/language/function-code/10.4.3-1-80-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-80gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-81-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-81gs.js","error":{"category":"panic","message":"<not a string>"}}
{"file_path":"test/language/function-code/10.4.3-1-82-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-82gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-83-s.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-83gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-84-s.js","error":{"category":"run","message":"could not use as object: v16"}}
{"file_path":"test/language/function-code/10.4.3-1-84gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-85-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-85gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-86-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-86gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-87-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-87gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-88-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-88gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-89-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-89gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-8gs.js","error":null}
{"file_path":"test/language/function-code/10.4.3-1-9-s.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/function-code/10.4.3-1-90-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-90gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-91-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-91gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-92-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-92gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-93-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-93gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-94-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-94gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-95-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-95gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-96-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-96gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-97-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-97gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-98-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-98gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-99-s.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-99gs.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/10.4.3-1-9gs.js","error":null}
{"file_path":"test/language/function-code/S10.1.6_A1_T1.js","error":{"category":"load","message":"/home/sebastiano/src/test262/test/language/function-code/S10.1.6_A1_T1.js: 15,2 - 15,10: `delete` operator can only be applied to an object member (e.g. `delete obj[key]`, `delete obj.property`) [VM code at mcjs_vm/src/bytecode_compiler.rs:1711]\n  while compiling module: /home/sebastiano/src/test262/test/language/function-code/S10.1.6_A1_T1.js"}}
{"file_path":"test/language/function-code/S10.2.1_A1.js","error":null}
{"file_path":"test/language/function-code/S10.2.1_A2.js","error":{"category":"run","message":"expected string, but got another type"}}
{"file_path":"test/language/function-code/S10.2.1_A3.js","error":null}
{"file_path":"test/language/function-code/S10.2.1_A4_T1.js","error":{"category":"run","message":"could not use as object: v29"}}
{"file_path":"test/language/function-code/S10.2.1_A4_T2.js","error":{"category":"run","message":"could not use as object: v23"}}
{"file_path":"test/language/function-code/S10.2.1_A5.1_T1.js","error":{"category":"run","message":"could not use as object: v25"}}
{"file_path":"test/language/function-code/S10.2.1_A5.1_T2.js","error":{"category":"run","message":"could not use as object: v25"}}
{"file_path":"test/language/function-code/S10.2.1_A5.2_T1.js","error":{"category":"run","message":"could not use as object: v26"}}
{"file_path":"test/language/function-code/S10.4.3_A1.js","error":null}
{"file_path":"test/language/function-code/S10.4A1.1_T2.js","error":null}
{"file_path":"test/language/function-code/S10.4_A1.1_T1.js","error":{"category":"run","message":"expected a Object, got Undefined"}}
{"file_path":"test/language/function-code/block-decl-onlystrict.js","error":{"category":"run","message":"could not use as object: v25"}}
{"file_path":"test/language/function-code/eval-param-env-with-computed-key.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                734,\n            ),\n            hi: BytePos(\n                770,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Computed(\n                        ComputedPropName {\n                            span: Span {\n                                lo: BytePos(\n                                    735,\n                                ),\n                                hi: BytePos(\n                                    760,\n                                ),\n                                ctxt: #0,\n                            },\n                            expr: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            736,\n                                        ),\n                                        hi: BytePos(\n                                            759,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        736,\n                                                    ),\n                                                    hi: BytePos(\n                                                        740,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('eval' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                741,\n                                                            ),\n                                                            hi: BytePos(\n                                                                758,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('var x = 'inner'' type=dynamic),\n                                                        raw: Some(\n                                                            \"\\\"var x = 'inner'\\\"\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                    value: Ident(\n                        BindingIdent {\n                            id: Ident {\n                                span: Span {\n                                    lo: BytePos(\n                                        762,\n                                    ),\n                                    hi: BytePos(\n                                        769,\n                                    ),\n                                    ctxt: #0,\n                                },\n                                sym: Atom('ignored' type=inline),\n                                optional: false,\n                            },\n                            type_ann: None,\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/function-code/eval-param-env-with-prop-initializer.js","error":{"category":"panic","message":"not yet implemented: unsupported AST node: Object(\n    ObjectPat {\n        span: Span {\n            lo: BytePos(\n                734,\n            ),\n            hi: BytePos(\n                772,\n            ),\n            ctxt: #0,\n        },\n        props: [\n            KeyValue(\n                KeyValuePatProp {\n                    key: Ident(\n                        Ident {\n                            span: Span {\n                                lo: BytePos(\n                                    735,\n                                ),\n                                hi: BytePos(\n                                    736,\n                                ),\n                                ctxt: #0,\n                            },\n                            sym: Atom('a' type=static),\n                            optional: false,\n                        },\n                    ),\n                    value: Assign(\n                        AssignPat {\n                            span: Span {\n                                lo: BytePos(\n                                    738,\n                                ),\n                                hi: BytePos(\n                                    771,\n                                ),\n                                ctxt: #0,\n                            },\n                            left: Ident(\n                                BindingIdent {\n                                    id: Ident {\n                                        span: Span {\n                                            lo: BytePos(\n                                                738,\n                                            ),\n                                            hi: BytePos(\n                                                745,\n                                            ),\n                                            ctxt: #0,\n                                        },\n                                        sym: Atom('ignored' type=inline),\n                                        optional: false,\n                                    },\n                                    type_ann: None,\n                                },\n                            ),\n                            right: Call(\n                                CallExpr {\n                                    span: Span {\n                                        lo: BytePos(\n                                            748,\n                                        ),\n                                        hi: BytePos(\n                                            771,\n                                        ),\n                                        ctxt: #0,\n                                    },\n                                    callee: Expr(\n                                        Ident(\n                                            Ident {\n                                                span: Span {\n                                                    lo: BytePos(\n                                                        748,\n                                                    ),\n                                                    hi: BytePos(\n                                                        752,\n                                                    ),\n                                                    ctxt: #0,\n                                                },\n                                                sym: Atom('eval' type=static),\n                                                optional: false,\n                                            },\n                                        ),\n                                    ),\n                                    args: [\n                                        ExprOrSpread {\n                                            spread: None,\n                                            expr: Lit(\n                                                Str(\n                                                    Str {\n                                                        span: Span {\n                                                            lo: BytePos(\n                                                                753,\n                                                            ),\n                                                            hi: BytePos(\n                                                                770,\n                                                            ),\n                                                            ctxt: #0,\n                                                        },\n                                                        value: Atom('var x = 'inner'' type=dynamic),\n                                                        raw: Some(\n                                                            \"\\\"var x = 'inner'\\\"\",\n                                                        ),\n                                                    },\n                                                ),\n                                            ),\n                                        },\n                                    ],\n                                    type_args: None,\n                                },\n                            ),\n                        },\n                    ),\n                },\n            ),\n        ],\n        optional: false,\n        type_ann: None,\n    },\n)"}}
{"file_path":"test/language/function-code/switch-case-decl-onlystrict.js","error":{"category":"run","message":"could not use as object: v25"}}
{"file_path":"test/language/function-code/switch-dflt-decl-onlystrict.js","error":{"category":"run","message":"could not use as object: v25"}}
