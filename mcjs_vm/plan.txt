
- Support exotic objects

	- Def: (comes directly from the ES262 standard)
		ordinary object: objects that handle property access like any dictionary (e.g. HashMap<String, Value>)
		exotic object: any object that handles property access --at least partially-- in any other way

	- REQ Creating property on exo = No-op
		Creating a new property (setting a property that doesn't exist yet) on an exotic object is a no-op on V8. Let's do the same.

	- REQ: Exotic objects have an ordinary object as prototype.
		- For a number, it's `Number.prototype`, strings have `String.prototype`, etc.

		- This must work:
		> String.prototype.deez = function() { return this + ' deez nuts' }
		> 'eat'.deez()
		'eat deez nuts'

		> Number.prototype.doubled = function() { return this * 2 }
		> (123).doubled()
		246

		- Observation: the heap must be involved in property access, even for immediate objects

	- Plan:
		- Assumption:
			- All definitions and requirements above hold.

			- Def:
				heap objects: objects (ordinary or exotic) that store their state in the heap.
				immediate objects:
					objects that are fully 'virtual'. They wrap a simple value, and only exist temporarily
					for the time of the execution of an object access.  This object access is supposed
					to alow the script to access the wrapped value without specific interfaces.

			- Classification
				- All values types are: undefined, null, boolean, number, string, array, object, function
					- symbol currently unsupported
					- null is not 'interpretable' with an object interface

				- ordinary + heap:	Object
				- exotic + heap:	String, Array, Function
				- ordinary + immediate:
					(N/A, by definition.  Ordinary objects require state to be stored *somewhere* and the stack can't be that place.  Needs to be on the heap.)
				- exotic + immediate:	Boolean, Number

		- Refactor heap so that the above classification holds
		- Tests
			- basic representation and usage of ords, strings, arrays
			- basic representation and usage of function (both JS closures and native)
			- basic representation and usage of numbers, booleans
